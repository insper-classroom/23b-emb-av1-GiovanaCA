
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000094fc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004094fc  004094fc  000194fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00409504  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000494  204009c0  00409ec4  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400e54  0040a358  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402e58  0040c35c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002511f  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004f8d  00000000  00000000  00045b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aeca  00000000  00000000  0004aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001058  00000000  00000000  000559bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d0  00000000  00000000  00056a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025867  00000000  00000000  00057be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016292  00000000  00000000  0007d44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009632c  00000000  00000000  000936de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ab0  00000000  00000000  00129a0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2e 40 20 91 11 40 00 8f 11 40 00 8f 11 40 00     X.@ ..@...@...@.
  400010:	8f 11 40 00 8f 11 40 00 8f 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	69 15 40 00 8f 11 40 00 00 00 00 00 09 16 40 00     i.@...@.......@.
  40003c:	71 16 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     q.@...@...@...@.
  40004c:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  40005c:	8f 11 40 00 8f 11 40 00 00 00 00 00 81 0e 40 00     ..@...@.......@.
  40006c:	95 0e 40 00 a9 0e 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  40007c:	8f 11 40 00 bd 0e 40 00 d1 0e 40 00 8f 11 40 00     ..@...@...@...@.
  40008c:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  40009c:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  4000ac:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  4000bc:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  4000cc:	8f 11 40 00 00 00 00 00 8f 11 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  4000ec:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  4000fc:	8f 11 40 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ..@...@...@...@.
  40010c:	8f 11 40 00 8f 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 8f 11 40 00 8f 11 40 00 8f 11 40 00     ......@...@...@.
  40012c:	8f 11 40 00 8f 11 40 00 00 00 00 00 8f 11 40 00     ..@...@.......@.
  40013c:	8f 11 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00409504 	.word	0x00409504

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409504 	.word	0x00409504
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00409504 	.word	0x00409504
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009dc 	.word	0x204009dc

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	204009dc 	.word	0x204009dc

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	204009dc 	.word	0x204009dc

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	204009dc 	.word	0x204009dc

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400228:	b570      	push	{r4, r5, r6, lr}
  40022a:	4606      	mov	r6, r0
  40022c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40022e:	6804      	ldr	r4, [r0, #0]
  400230:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400234:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400238:	4809      	ldr	r0, [pc, #36]	; (400260 <rtt_write_alarm_time+0x38>)
  40023a:	4b0a      	ldr	r3, [pc, #40]	; (400264 <rtt_write_alarm_time+0x3c>)
  40023c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40023e:	b92d      	cbnz	r5, 40024c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400240:	f04f 33ff 	mov.w	r3, #4294967295
  400244:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400246:	b924      	cbnz	r4, 400252 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400248:	2000      	movs	r0, #0
  40024a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40024c:	3d01      	subs	r5, #1
  40024e:	6075      	str	r5, [r6, #4]
  400250:	e7f9      	b.n	400246 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400252:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400256:	4802      	ldr	r0, [pc, #8]	; (400260 <rtt_write_alarm_time+0x38>)
  400258:	4b03      	ldr	r3, [pc, #12]	; (400268 <rtt_write_alarm_time+0x40>)
  40025a:	4798      	blx	r3
  40025c:	e7f4      	b.n	400248 <rtt_write_alarm_time+0x20>
  40025e:	bf00      	nop
  400260:	400e1830 	.word	0x400e1830
  400264:	00400201 	.word	0x00400201
  400268:	004001ed 	.word	0x004001ed

0040026c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40026c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40026e:	4b07      	ldr	r3, [pc, #28]	; (40028c <spi_enable_clock+0x20>)
  400270:	4298      	cmp	r0, r3
  400272:	d003      	beq.n	40027c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400274:	4b06      	ldr	r3, [pc, #24]	; (400290 <spi_enable_clock+0x24>)
  400276:	4298      	cmp	r0, r3
  400278:	d004      	beq.n	400284 <spi_enable_clock+0x18>
  40027a:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40027c:	2015      	movs	r0, #21
  40027e:	4b05      	ldr	r3, [pc, #20]	; (400294 <spi_enable_clock+0x28>)
  400280:	4798      	blx	r3
  400282:	bd08      	pop	{r3, pc}
  400284:	202a      	movs	r0, #42	; 0x2a
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <spi_enable_clock+0x28>)
  400288:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028a:	e7f6      	b.n	40027a <spi_enable_clock+0xe>
  40028c:	40008000 	.word	0x40008000
  400290:	40058000 	.word	0x40058000
  400294:	00401005 	.word	0x00401005

00400298 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400298:	6843      	ldr	r3, [r0, #4]
  40029a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40029e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a0:	6843      	ldr	r3, [r0, #4]
  4002a2:	0409      	lsls	r1, r1, #16
  4002a4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002a8:	4319      	orrs	r1, r3
  4002aa:	6041      	str	r1, [r0, #4]
  4002ac:	4770      	bx	lr

004002ae <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002ae:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b4:	6905      	ldr	r5, [r0, #16]
  4002b6:	f015 0f02 	tst.w	r5, #2
  4002ba:	d103      	bne.n	4002c4 <spi_write+0x16>
		if (!timeout--) {
  4002bc:	3c01      	subs	r4, #1
  4002be:	d1f9      	bne.n	4002b4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c0:	2001      	movs	r0, #1
  4002c2:	e00c      	b.n	4002de <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002c6:	f014 0f02 	tst.w	r4, #2
  4002ca:	d006      	beq.n	4002da <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002cc:	0412      	lsls	r2, r2, #16
  4002ce:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d2:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d4:	b10b      	cbz	r3, 4002da <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002d6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002da:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002dc:	2000      	movs	r0, #0
}
  4002de:	bc30      	pop	{r4, r5}
  4002e0:	4770      	bx	lr

004002e2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e2:	b932      	cbnz	r2, 4002f2 <spi_set_clock_polarity+0x10>
  4002e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ea:	f023 0301 	bic.w	r3, r3, #1
  4002ee:	6303      	str	r3, [r0, #48]	; 0x30
  4002f0:	4770      	bx	lr
  4002f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002f8:	f043 0301 	orr.w	r3, r3, #1
  4002fc:	6303      	str	r3, [r0, #48]	; 0x30
  4002fe:	4770      	bx	lr

00400300 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400300:	b932      	cbnz	r2, 400310 <spi_set_clock_phase+0x10>
  400302:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400306:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400308:	f023 0302 	bic.w	r3, r3, #2
  40030c:	6303      	str	r3, [r0, #48]	; 0x30
  40030e:	4770      	bx	lr
  400310:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400314:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400316:	f043 0302 	orr.w	r3, r3, #2
  40031a:	6303      	str	r3, [r0, #48]	; 0x30
  40031c:	4770      	bx	lr

0040031e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40031e:	2a04      	cmp	r2, #4
  400320:	d003      	beq.n	40032a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400322:	b16a      	cbz	r2, 400340 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400324:	2a08      	cmp	r2, #8
  400326:	d016      	beq.n	400356 <spi_configure_cs_behavior+0x38>
  400328:	4770      	bx	lr
  40032a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40032e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400330:	f023 0308 	bic.w	r3, r3, #8
  400334:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400336:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400338:	f043 0304 	orr.w	r3, r3, #4
  40033c:	6303      	str	r3, [r0, #48]	; 0x30
  40033e:	4770      	bx	lr
  400340:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400344:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400346:	f023 0308 	bic.w	r3, r3, #8
  40034a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40034c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034e:	f023 0304 	bic.w	r3, r3, #4
  400352:	6303      	str	r3, [r0, #48]	; 0x30
  400354:	4770      	bx	lr
  400356:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40035c:	f043 0308 	orr.w	r3, r3, #8
  400360:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400362:	e7e1      	b.n	400328 <spi_configure_cs_behavior+0xa>

00400364 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400364:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400368:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40036e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400370:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400372:	431a      	orrs	r2, r3
  400374:	630a      	str	r2, [r1, #48]	; 0x30
  400376:	4770      	bx	lr

00400378 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400378:	1e43      	subs	r3, r0, #1
  40037a:	4419      	add	r1, r3
  40037c:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400380:	1e43      	subs	r3, r0, #1
  400382:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400384:	bf94      	ite	ls
  400386:	b200      	sxthls	r0, r0
		return -1;
  400388:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40038c:	4770      	bx	lr

0040038e <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40038e:	b17a      	cbz	r2, 4003b0 <spi_set_baudrate_div+0x22>
{
  400390:	b410      	push	{r4}
  400392:	4614      	mov	r4, r2
  400394:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400398:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40039e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003a6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003a8:	2000      	movs	r0, #0
}
  4003aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003ae:	4770      	bx	lr
        return -1;
  4003b0:	f04f 30ff 	mov.w	r0, #4294967295
  4003b4:	4770      	bx	lr
	...

004003b8 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4003b8:	4b01      	ldr	r3, [pc, #4]	; (4003c0 <gfx_mono_set_framebuffer+0x8>)
  4003ba:	6018      	str	r0, [r3, #0]
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop
  4003c0:	204009e0 	.word	0x204009e0

004003c4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4003c4:	4b02      	ldr	r3, [pc, #8]	; (4003d0 <gfx_mono_framebuffer_put_byte+0xc>)
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003cc:	5442      	strb	r2, [r0, r1]
  4003ce:	4770      	bx	lr
  4003d0:	204009e0 	.word	0x204009e0

004003d4 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4003d4:	4b02      	ldr	r3, [pc, #8]	; (4003e0 <gfx_mono_framebuffer_get_byte+0xc>)
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4003dc:	5c40      	ldrb	r0, [r0, r1]
  4003de:	4770      	bx	lr
  4003e0:	204009e0 	.word	0x204009e0

004003e4 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4003e4:	2a00      	cmp	r2, #0
  4003e6:	d048      	beq.n	40047a <gfx_mono_generic_draw_vertical_line+0x96>
{
  4003e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4003ec:	4614      	mov	r4, r2
  4003ee:	461f      	mov	r7, r3
  4003f0:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4003f2:	1e4a      	subs	r2, r1, #1
  4003f4:	4422      	add	r2, r4
  4003f6:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4003f8:	4291      	cmp	r1, r2
  4003fa:	d031      	beq.n	400460 <gfx_mono_generic_draw_vertical_line+0x7c>
  4003fc:	2a1f      	cmp	r2, #31
  4003fe:	bf28      	it	cs
  400400:	221f      	movcs	r2, #31
  400402:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400404:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  400406:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  40040a:	f001 0207 	and.w	r2, r1, #7
  40040e:	23ff      	movs	r3, #255	; 0xff
  400410:	fa03 f202 	lsl.w	r2, r3, r2
  400414:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  400416:	f005 0507 	and.w	r5, r5, #7
  40041a:	f1c5 0507 	rsb	r5, r5, #7
  40041e:	fa43 f505 	asr.w	r5, r3, r5
  400422:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400424:	4544      	cmp	r4, r8
  400426:	d020      	beq.n	40046a <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400428:	463b      	mov	r3, r7
  40042a:	4601      	mov	r1, r0
  40042c:	4620      	mov	r0, r4
  40042e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 40047c <gfx_mono_generic_draw_vertical_line+0x98>
  400432:	47c8      	blx	r9

		while (++y1page < y2page) {
  400434:	3401      	adds	r4, #1
  400436:	45a0      	cmp	r8, r4
  400438:	d90a      	bls.n	400450 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  40043a:	f04f 0aff 	mov.w	sl, #255	; 0xff
  40043e:	463b      	mov	r3, r7
  400440:	4652      	mov	r2, sl
  400442:	4631      	mov	r1, r6
  400444:	4620      	mov	r0, r4
  400446:	47c8      	blx	r9
		while (++y1page < y2page) {
  400448:	3401      	adds	r4, #1
  40044a:	b2e4      	uxtb	r4, r4
  40044c:	45a0      	cmp	r8, r4
  40044e:	d8f6      	bhi.n	40043e <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400450:	463b      	mov	r3, r7
  400452:	462a      	mov	r2, r5
  400454:	4631      	mov	r1, r6
  400456:	4640      	mov	r0, r8
  400458:	4c08      	ldr	r4, [pc, #32]	; (40047c <gfx_mono_generic_draw_vertical_line+0x98>)
  40045a:	47a0      	blx	r4
  40045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400460:	461a      	mov	r2, r3
  400462:	4b07      	ldr	r3, [pc, #28]	; (400480 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400464:	4798      	blx	r3
		return;
  400466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  40046a:	463b      	mov	r3, r7
  40046c:	402a      	ands	r2, r5
  40046e:	4601      	mov	r1, r0
  400470:	4620      	mov	r0, r4
  400472:	4c02      	ldr	r4, [pc, #8]	; (40047c <gfx_mono_generic_draw_vertical_line+0x98>)
  400474:	47a0      	blx	r4
  400476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40047a:	4770      	bx	lr
  40047c:	004006a5 	.word	0x004006a5
  400480:	00400641 	.word	0x00400641

00400484 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  400484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400488:	b085      	sub	sp, #20
  40048a:	4681      	mov	r9, r0
  40048c:	9100      	str	r1, [sp, #0]
  40048e:	9301      	str	r3, [sp, #4]
  400490:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400494:	b17a      	cbz	r2, 4004b6 <gfx_mono_generic_draw_filled_circle+0x32>
  400496:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  400498:	0055      	lsls	r5, r2, #1
  40049a:	f1c5 0503 	rsb	r5, r5, #3
  40049e:	2701      	movs	r7, #1
  4004a0:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4004a4:	f00b 0303 	and.w	r3, fp, #3
  4004a8:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4004aa:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 40059c <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4004ae:	f00b 030c 	and.w	r3, fp, #12
  4004b2:	9303      	str	r3, [sp, #12]
  4004b4:	e04d      	b.n	400552 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4004b6:	461a      	mov	r2, r3
  4004b8:	4b37      	ldr	r3, [pc, #220]	; (400598 <gfx_mono_generic_draw_filled_circle+0x114>)
  4004ba:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4004bc:	b005      	add	sp, #20
  4004be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  4004c2:	9b00      	ldr	r3, [sp, #0]
  4004c4:	1b19      	subs	r1, r3, r4
  4004c6:	eb09 0006 	add.w	r0, r9, r6
  4004ca:	9b01      	ldr	r3, [sp, #4]
  4004cc:	463a      	mov	r2, r7
  4004ce:	b2c9      	uxtb	r1, r1
  4004d0:	b2c0      	uxtb	r0, r0
  4004d2:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4004d4:	1c72      	adds	r2, r6, #1
  4004d6:	9900      	ldr	r1, [sp, #0]
  4004d8:	1b89      	subs	r1, r1, r6
  4004da:	eb09 0004 	add.w	r0, r9, r4
  4004de:	9b01      	ldr	r3, [sp, #4]
  4004e0:	b2d2      	uxtb	r2, r2
  4004e2:	b2c9      	uxtb	r1, r1
  4004e4:	b2c0      	uxtb	r0, r0
  4004e6:	47d0      	blx	sl
  4004e8:	e038      	b.n	40055c <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  4004ea:	9b00      	ldr	r3, [sp, #0]
  4004ec:	1b19      	subs	r1, r3, r4
  4004ee:	eba9 0006 	sub.w	r0, r9, r6
  4004f2:	9b01      	ldr	r3, [sp, #4]
  4004f4:	463a      	mov	r2, r7
  4004f6:	b2c9      	uxtb	r1, r1
  4004f8:	b2c0      	uxtb	r0, r0
  4004fa:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  4004fc:	1c72      	adds	r2, r6, #1
  4004fe:	9900      	ldr	r1, [sp, #0]
  400500:	1b89      	subs	r1, r1, r6
  400502:	eba9 0004 	sub.w	r0, r9, r4
  400506:	9b01      	ldr	r3, [sp, #4]
  400508:	b2d2      	uxtb	r2, r2
  40050a:	b2c9      	uxtb	r1, r1
  40050c:	b2c0      	uxtb	r0, r0
  40050e:	47d0      	blx	sl
  400510:	e027      	b.n	400562 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400512:	eba9 0006 	sub.w	r0, r9, r6
  400516:	9b01      	ldr	r3, [sp, #4]
  400518:	463a      	mov	r2, r7
  40051a:	9900      	ldr	r1, [sp, #0]
  40051c:	b2c0      	uxtb	r0, r0
  40051e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400520:	1c72      	adds	r2, r6, #1
  400522:	eba9 0004 	sub.w	r0, r9, r4
  400526:	9b01      	ldr	r3, [sp, #4]
  400528:	b2d2      	uxtb	r2, r2
  40052a:	9900      	ldr	r1, [sp, #0]
  40052c:	b2c0      	uxtb	r0, r0
  40052e:	47d0      	blx	sl
  400530:	e01a      	b.n	400568 <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400532:	2d00      	cmp	r5, #0
  400534:	db2b      	blt.n	40058e <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  400536:	1ba4      	subs	r4, r4, r6
  400538:	350a      	adds	r5, #10
  40053a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  40053e:	b225      	sxth	r5, r4
			--offset_y;
  400540:	3e01      	subs	r6, #1
  400542:	b2f6      	uxtb	r6, r6
  400544:	f108 0801 	add.w	r8, r8, #1
  400548:	1c7b      	adds	r3, r7, #1
  40054a:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  40054c:	42be      	cmp	r6, r7
  40054e:	d3b5      	bcc.n	4004bc <gfx_mono_generic_draw_filled_circle+0x38>
  400550:	461f      	mov	r7, r3
  400552:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  400556:	9b02      	ldr	r3, [sp, #8]
  400558:	2b00      	cmp	r3, #0
  40055a:	d1b2      	bne.n	4004c2 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  40055c:	9b03      	ldr	r3, [sp, #12]
  40055e:	2b00      	cmp	r3, #0
  400560:	d1c3      	bne.n	4004ea <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400562:	f01b 0f30 	tst.w	fp, #48	; 0x30
  400566:	d1d4      	bne.n	400512 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  400568:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  40056c:	d0e1      	beq.n	400532 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  40056e:	eb09 0006 	add.w	r0, r9, r6
  400572:	9b01      	ldr	r3, [sp, #4]
  400574:	463a      	mov	r2, r7
  400576:	9900      	ldr	r1, [sp, #0]
  400578:	b2c0      	uxtb	r0, r0
  40057a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  40057c:	1c72      	adds	r2, r6, #1
  40057e:	eb09 0004 	add.w	r0, r9, r4
  400582:	9b01      	ldr	r3, [sp, #4]
  400584:	b2d2      	uxtb	r2, r2
  400586:	9900      	ldr	r1, [sp, #0]
  400588:	b2c0      	uxtb	r0, r0
  40058a:	47d0      	blx	sl
  40058c:	e7d1      	b.n	400532 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  40058e:	3506      	adds	r5, #6
  400590:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400594:	b22d      	sxth	r5, r5
  400596:	e7d5      	b.n	400544 <gfx_mono_generic_draw_filled_circle+0xc0>
  400598:	00400641 	.word	0x00400641
  40059c:	004003e5 	.word	0x004003e5

004005a0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4005a0:	b570      	push	{r4, r5, r6, lr}
  4005a2:	4604      	mov	r4, r0
  4005a4:	460d      	mov	r5, r1
  4005a6:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4005a8:	b91b      	cbnz	r3, 4005b2 <gfx_mono_ssd1306_put_byte+0x12>
  4005aa:	4b0d      	ldr	r3, [pc, #52]	; (4005e0 <gfx_mono_ssd1306_put_byte+0x40>)
  4005ac:	4798      	blx	r3
  4005ae:	42b0      	cmp	r0, r6
  4005b0:	d015      	beq.n	4005de <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4005b2:	4632      	mov	r2, r6
  4005b4:	4629      	mov	r1, r5
  4005b6:	4620      	mov	r0, r4
  4005b8:	4b0a      	ldr	r3, [pc, #40]	; (4005e4 <gfx_mono_ssd1306_put_byte+0x44>)
  4005ba:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4005bc:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4005c0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4005c4:	4c08      	ldr	r4, [pc, #32]	; (4005e8 <gfx_mono_ssd1306_put_byte+0x48>)
  4005c6:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4005c8:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4005cc:	f040 0010 	orr.w	r0, r0, #16
  4005d0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4005d2:	f005 000f 	and.w	r0, r5, #15
  4005d6:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4005d8:	4630      	mov	r0, r6
  4005da:	4b04      	ldr	r3, [pc, #16]	; (4005ec <gfx_mono_ssd1306_put_byte+0x4c>)
  4005dc:	4798      	blx	r3
  4005de:	bd70      	pop	{r4, r5, r6, pc}
  4005e0:	004003d5 	.word	0x004003d5
  4005e4:	004003c5 	.word	0x004003c5
  4005e8:	004006e9 	.word	0x004006e9
  4005ec:	00400909 	.word	0x00400909

004005f0 <gfx_mono_ssd1306_init>:
{
  4005f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4005f4:	480d      	ldr	r0, [pc, #52]	; (40062c <gfx_mono_ssd1306_init+0x3c>)
  4005f6:	4b0e      	ldr	r3, [pc, #56]	; (400630 <gfx_mono_ssd1306_init+0x40>)
  4005f8:	4798      	blx	r3
	ssd1306_init();
  4005fa:	4b0e      	ldr	r3, [pc, #56]	; (400634 <gfx_mono_ssd1306_init+0x44>)
  4005fc:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4005fe:	2040      	movs	r0, #64	; 0x40
  400600:	4b0d      	ldr	r3, [pc, #52]	; (400638 <gfx_mono_ssd1306_init+0x48>)
  400602:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400604:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400606:	f04f 0801 	mov.w	r8, #1
  40060a:	462f      	mov	r7, r5
  40060c:	4e0b      	ldr	r6, [pc, #44]	; (40063c <gfx_mono_ssd1306_init+0x4c>)
{
  40060e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400610:	4643      	mov	r3, r8
  400612:	463a      	mov	r2, r7
  400614:	b2e1      	uxtb	r1, r4
  400616:	4628      	mov	r0, r5
  400618:	47b0      	blx	r6
  40061a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40061c:	2c80      	cmp	r4, #128	; 0x80
  40061e:	d1f7      	bne.n	400610 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400620:	3501      	adds	r5, #1
  400622:	b2ed      	uxtb	r5, r5
  400624:	2d04      	cmp	r5, #4
  400626:	d1f2      	bne.n	40060e <gfx_mono_ssd1306_init+0x1e>
  400628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40062c:	204009e4 	.word	0x204009e4
  400630:	004003b9 	.word	0x004003b9
  400634:	00400729 	.word	0x00400729
  400638:	004006e9 	.word	0x004006e9
  40063c:	004005a1 	.word	0x004005a1

00400640 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400640:	09c3      	lsrs	r3, r0, #7
  400642:	d12a      	bne.n	40069a <gfx_mono_ssd1306_draw_pixel+0x5a>
  400644:	291f      	cmp	r1, #31
  400646:	d828      	bhi.n	40069a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40064c:	4614      	mov	r4, r2
  40064e:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400650:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400652:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400656:	2201      	movs	r2, #1
  400658:	fa02 f701 	lsl.w	r7, r2, r1
  40065c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400660:	4601      	mov	r1, r0
  400662:	4630      	mov	r0, r6
  400664:	4b0d      	ldr	r3, [pc, #52]	; (40069c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400666:	4798      	blx	r3
  400668:	4602      	mov	r2, r0
	switch (color) {
  40066a:	2c01      	cmp	r4, #1
  40066c:	d009      	beq.n	400682 <gfx_mono_ssd1306_draw_pixel+0x42>
  40066e:	b164      	cbz	r4, 40068a <gfx_mono_ssd1306_draw_pixel+0x4a>
  400670:	2c02      	cmp	r4, #2
  400672:	d00e      	beq.n	400692 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400674:	2300      	movs	r3, #0
  400676:	4629      	mov	r1, r5
  400678:	4630      	mov	r0, r6
  40067a:	4c09      	ldr	r4, [pc, #36]	; (4006a0 <gfx_mono_ssd1306_draw_pixel+0x60>)
  40067c:	47a0      	blx	r4
  40067e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400682:	ea48 0200 	orr.w	r2, r8, r0
  400686:	b2d2      	uxtb	r2, r2
		break;
  400688:	e7f4      	b.n	400674 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40068a:	ea20 0207 	bic.w	r2, r0, r7
  40068e:	b2d2      	uxtb	r2, r2
		break;
  400690:	e7f0      	b.n	400674 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400692:	ea88 0200 	eor.w	r2, r8, r0
  400696:	b2d2      	uxtb	r2, r2
		break;
  400698:	e7ec      	b.n	400674 <gfx_mono_ssd1306_draw_pixel+0x34>
  40069a:	4770      	bx	lr
  40069c:	004003d5 	.word	0x004003d5
  4006a0:	004005a1 	.word	0x004005a1

004006a4 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  4006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006a6:	4605      	mov	r5, r0
  4006a8:	460e      	mov	r6, r1
  4006aa:	4617      	mov	r7, r2
  4006ac:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  4006ae:	4b0c      	ldr	r3, [pc, #48]	; (4006e0 <gfx_mono_ssd1306_mask_byte+0x3c>)
  4006b0:	4798      	blx	r3
  4006b2:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  4006b4:	2c01      	cmp	r4, #1
  4006b6:	d008      	beq.n	4006ca <gfx_mono_ssd1306_mask_byte+0x26>
  4006b8:	b154      	cbz	r4, 4006d0 <gfx_mono_ssd1306_mask_byte+0x2c>
  4006ba:	2c02      	cmp	r4, #2
  4006bc:	d00c      	beq.n	4006d8 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  4006be:	2300      	movs	r3, #0
  4006c0:	4631      	mov	r1, r6
  4006c2:	4628      	mov	r0, r5
  4006c4:	4c07      	ldr	r4, [pc, #28]	; (4006e4 <gfx_mono_ssd1306_mask_byte+0x40>)
  4006c6:	47a0      	blx	r4
  4006c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  4006ca:	433a      	orrs	r2, r7
  4006cc:	b2d2      	uxtb	r2, r2
		break;
  4006ce:	e7f6      	b.n	4006be <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  4006d0:	ea20 0207 	bic.w	r2, r0, r7
  4006d4:	b2d2      	uxtb	r2, r2
		break;
  4006d6:	e7f2      	b.n	4006be <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  4006d8:	407a      	eors	r2, r7
  4006da:	b2d2      	uxtb	r2, r2
		break;
  4006dc:	e7ef      	b.n	4006be <gfx_mono_ssd1306_mask_byte+0x1a>
  4006de:	bf00      	nop
  4006e0:	004003d5 	.word	0x004003d5
  4006e4:	004005a1 	.word	0x004005a1

004006e8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4006e8:	b538      	push	{r3, r4, r5, lr}
  4006ea:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4006ec:	2208      	movs	r2, #8
  4006ee:	4b09      	ldr	r3, [pc, #36]	; (400714 <ssd1306_write_command+0x2c>)
  4006f0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4006f2:	4c09      	ldr	r4, [pc, #36]	; (400718 <ssd1306_write_command+0x30>)
  4006f4:	2101      	movs	r1, #1
  4006f6:	4620      	mov	r0, r4
  4006f8:	4b08      	ldr	r3, [pc, #32]	; (40071c <ssd1306_write_command+0x34>)
  4006fa:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4006fc:	2301      	movs	r3, #1
  4006fe:	461a      	mov	r2, r3
  400700:	4629      	mov	r1, r5
  400702:	4620      	mov	r0, r4
  400704:	4c06      	ldr	r4, [pc, #24]	; (400720 <ssd1306_write_command+0x38>)
  400706:	47a0      	blx	r4
	delay_us(10);
  400708:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40070c:	4b05      	ldr	r3, [pc, #20]	; (400724 <ssd1306_write_command+0x3c>)
  40070e:	4798      	blx	r3
  400710:	bd38      	pop	{r3, r4, r5, pc}
  400712:	bf00      	nop
  400714:	400e1000 	.word	0x400e1000
  400718:	40008000 	.word	0x40008000
  40071c:	00400299 	.word	0x00400299
  400720:	004002af 	.word	0x004002af
  400724:	20400001 	.word	0x20400001

00400728 <ssd1306_init>:
{
  400728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40072c:	4d66      	ldr	r5, [pc, #408]	; (4008c8 <ssd1306_init+0x1a0>)
  40072e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400732:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400734:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400738:	4b64      	ldr	r3, [pc, #400]	; (4008cc <ssd1306_init+0x1a4>)
  40073a:	2708      	movs	r7, #8
  40073c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40073e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400742:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400744:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400748:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40074a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40074c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400750:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400752:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400756:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400758:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40075a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40075e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400760:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400762:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400766:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400768:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40076a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40076e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400770:	f022 0208 	bic.w	r2, r2, #8
  400774:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	f022 0208 	bic.w	r2, r2, #8
  40077c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  40077e:	601f      	str	r7, [r3, #0]
  400780:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400782:	631f      	str	r7, [r3, #48]	; 0x30
  400784:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400786:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400904 <ssd1306_init+0x1dc>
  40078a:	2300      	movs	r3, #0
  40078c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400790:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400794:	4640      	mov	r0, r8
  400796:	4c4e      	ldr	r4, [pc, #312]	; (4008d0 <ssd1306_init+0x1a8>)
  400798:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40079a:	2300      	movs	r3, #0
  40079c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a4:	4640      	mov	r0, r8
  4007a6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007a8:	2300      	movs	r3, #0
  4007aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007b2:	4640      	mov	r0, r8
  4007b4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4007b6:	2300      	movs	r3, #0
  4007b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4007bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007c0:	4640      	mov	r0, r8
  4007c2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4007c4:	2300      	movs	r3, #0
  4007c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007ce:	4640      	mov	r0, r8
  4007d0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007d2:	2300      	movs	r3, #0
  4007d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007dc:	4640      	mov	r0, r8
  4007de:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4007e0:	4c3c      	ldr	r4, [pc, #240]	; (4008d4 <ssd1306_init+0x1ac>)
  4007e2:	f04f 0902 	mov.w	r9, #2
  4007e6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007ea:	f04f 0880 	mov.w	r8, #128	; 0x80
  4007ee:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007f2:	6863      	ldr	r3, [r4, #4]
  4007f4:	f043 0301 	orr.w	r3, r3, #1
  4007f8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4007fa:	463a      	mov	r2, r7
  4007fc:	2101      	movs	r1, #1
  4007fe:	4620      	mov	r0, r4
  400800:	4b35      	ldr	r3, [pc, #212]	; (4008d8 <ssd1306_init+0x1b0>)
  400802:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400804:	2200      	movs	r2, #0
  400806:	2101      	movs	r1, #1
  400808:	4620      	mov	r0, r4
  40080a:	4b34      	ldr	r3, [pc, #208]	; (4008dc <ssd1306_init+0x1b4>)
  40080c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40080e:	2200      	movs	r2, #0
  400810:	2101      	movs	r1, #1
  400812:	4620      	mov	r0, r4
  400814:	4b32      	ldr	r3, [pc, #200]	; (4008e0 <ssd1306_init+0x1b8>)
  400816:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400818:	6863      	ldr	r3, [r4, #4]
  40081a:	f023 0302 	bic.w	r3, r3, #2
  40081e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400820:	2200      	movs	r2, #0
  400822:	2101      	movs	r1, #1
  400824:	4620      	mov	r0, r4
  400826:	4b2f      	ldr	r3, [pc, #188]	; (4008e4 <ssd1306_init+0x1bc>)
  400828:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40082a:	6863      	ldr	r3, [r4, #4]
  40082c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400830:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400832:	6863      	ldr	r3, [r4, #4]
  400834:	f043 0310 	orr.w	r3, r3, #16
  400838:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40083a:	492b      	ldr	r1, [pc, #172]	; (4008e8 <ssd1306_init+0x1c0>)
  40083c:	482b      	ldr	r0, [pc, #172]	; (4008ec <ssd1306_init+0x1c4>)
  40083e:	4b2c      	ldr	r3, [pc, #176]	; (4008f0 <ssd1306_init+0x1c8>)
  400840:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400842:	b2c2      	uxtb	r2, r0
  400844:	2101      	movs	r1, #1
  400846:	4620      	mov	r0, r4
  400848:	4b2a      	ldr	r3, [pc, #168]	; (4008f4 <ssd1306_init+0x1cc>)
  40084a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40084c:	4620      	mov	r0, r4
  40084e:	4b2a      	ldr	r3, [pc, #168]	; (4008f8 <ssd1306_init+0x1d0>)
  400850:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400852:	2301      	movs	r3, #1
  400854:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400856:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400858:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40085c:	4c27      	ldr	r4, [pc, #156]	; (4008fc <ssd1306_init+0x1d4>)
  40085e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400860:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400862:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400866:	47a0      	blx	r4
  400868:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40086a:	20a8      	movs	r0, #168	; 0xa8
  40086c:	4c24      	ldr	r4, [pc, #144]	; (400900 <ssd1306_init+0x1d8>)
  40086e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400870:	201f      	movs	r0, #31
  400872:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400874:	20d3      	movs	r0, #211	; 0xd3
  400876:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400878:	2000      	movs	r0, #0
  40087a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  40087c:	2040      	movs	r0, #64	; 0x40
  40087e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400880:	20a1      	movs	r0, #161	; 0xa1
  400882:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400884:	20c8      	movs	r0, #200	; 0xc8
  400886:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400888:	20da      	movs	r0, #218	; 0xda
  40088a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  40088c:	4648      	mov	r0, r9
  40088e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400890:	2081      	movs	r0, #129	; 0x81
  400892:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400894:	208f      	movs	r0, #143	; 0x8f
  400896:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400898:	20a4      	movs	r0, #164	; 0xa4
  40089a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40089c:	20a6      	movs	r0, #166	; 0xa6
  40089e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4008a0:	20d5      	movs	r0, #213	; 0xd5
  4008a2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4008a4:	4640      	mov	r0, r8
  4008a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4008a8:	208d      	movs	r0, #141	; 0x8d
  4008aa:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4008ac:	2014      	movs	r0, #20
  4008ae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4008b0:	20db      	movs	r0, #219	; 0xdb
  4008b2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4008b4:	2040      	movs	r0, #64	; 0x40
  4008b6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4008b8:	20d9      	movs	r0, #217	; 0xd9
  4008ba:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4008bc:	20f1      	movs	r0, #241	; 0xf1
  4008be:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4008c0:	20af      	movs	r0, #175	; 0xaf
  4008c2:	47a0      	blx	r4
  4008c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008c8:	400e1200 	.word	0x400e1200
  4008cc:	400e1000 	.word	0x400e1000
  4008d0:	00400cf1 	.word	0x00400cf1
  4008d4:	40008000 	.word	0x40008000
  4008d8:	0040031f 	.word	0x0040031f
  4008dc:	004002e3 	.word	0x004002e3
  4008e0:	00400301 	.word	0x00400301
  4008e4:	00400365 	.word	0x00400365
  4008e8:	08f0d180 	.word	0x08f0d180
  4008ec:	001e8480 	.word	0x001e8480
  4008f0:	00400379 	.word	0x00400379
  4008f4:	0040038f 	.word	0x0040038f
  4008f8:	0040026d 	.word	0x0040026d
  4008fc:	20400001 	.word	0x20400001
  400900:	004006e9 	.word	0x004006e9
  400904:	400e1400 	.word	0x400e1400

00400908 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400908:	b538      	push	{r3, r4, r5, lr}
  40090a:	4605      	mov	r5, r0
  40090c:	2208      	movs	r2, #8
  40090e:	4b09      	ldr	r3, [pc, #36]	; (400934 <ssd1306_write_data+0x2c>)
  400910:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400912:	4c09      	ldr	r4, [pc, #36]	; (400938 <ssd1306_write_data+0x30>)
  400914:	2101      	movs	r1, #1
  400916:	4620      	mov	r0, r4
  400918:	4b08      	ldr	r3, [pc, #32]	; (40093c <ssd1306_write_data+0x34>)
  40091a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40091c:	2301      	movs	r3, #1
  40091e:	461a      	mov	r2, r3
  400920:	4629      	mov	r1, r5
  400922:	4620      	mov	r0, r4
  400924:	4c06      	ldr	r4, [pc, #24]	; (400940 <ssd1306_write_data+0x38>)
  400926:	47a0      	blx	r4
	delay_us(10);
  400928:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40092c:	4b05      	ldr	r3, [pc, #20]	; (400944 <ssd1306_write_data+0x3c>)
  40092e:	4798      	blx	r3
  400930:	bd38      	pop	{r3, r4, r5, pc}
  400932:	bf00      	nop
  400934:	400e1000 	.word	0x400e1000
  400938:	40008000 	.word	0x40008000
  40093c:	00400299 	.word	0x00400299
  400940:	004002af 	.word	0x004002af
  400944:	20400001 	.word	0x20400001

00400948 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400948:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40094a:	4810      	ldr	r0, [pc, #64]	; (40098c <sysclk_init+0x44>)
  40094c:	4b10      	ldr	r3, [pc, #64]	; (400990 <sysclk_init+0x48>)
  40094e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400950:	213e      	movs	r1, #62	; 0x3e
  400952:	2000      	movs	r0, #0
  400954:	4b0f      	ldr	r3, [pc, #60]	; (400994 <sysclk_init+0x4c>)
  400956:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400958:	4c0f      	ldr	r4, [pc, #60]	; (400998 <sysclk_init+0x50>)
  40095a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40095c:	2800      	cmp	r0, #0
  40095e:	d0fc      	beq.n	40095a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400960:	4b0e      	ldr	r3, [pc, #56]	; (40099c <sysclk_init+0x54>)
  400962:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400964:	4a0e      	ldr	r2, [pc, #56]	; (4009a0 <sysclk_init+0x58>)
  400966:	4b0f      	ldr	r3, [pc, #60]	; (4009a4 <sysclk_init+0x5c>)
  400968:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40096a:	4c0f      	ldr	r4, [pc, #60]	; (4009a8 <sysclk_init+0x60>)
  40096c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40096e:	2800      	cmp	r0, #0
  400970:	d0fc      	beq.n	40096c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400972:	2002      	movs	r0, #2
  400974:	4b0d      	ldr	r3, [pc, #52]	; (4009ac <sysclk_init+0x64>)
  400976:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400978:	2000      	movs	r0, #0
  40097a:	4b0d      	ldr	r3, [pc, #52]	; (4009b0 <sysclk_init+0x68>)
  40097c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40097e:	4b0d      	ldr	r3, [pc, #52]	; (4009b4 <sysclk_init+0x6c>)
  400980:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400982:	4802      	ldr	r0, [pc, #8]	; (40098c <sysclk_init+0x44>)
  400984:	4b02      	ldr	r3, [pc, #8]	; (400990 <sysclk_init+0x48>)
  400986:	4798      	blx	r3
  400988:	bd10      	pop	{r4, pc}
  40098a:	bf00      	nop
  40098c:	11e1a300 	.word	0x11e1a300
  400990:	00401365 	.word	0x00401365
  400994:	00400f81 	.word	0x00400f81
  400998:	00400fd5 	.word	0x00400fd5
  40099c:	00400fe5 	.word	0x00400fe5
  4009a0:	20183f01 	.word	0x20183f01
  4009a4:	400e0600 	.word	0x400e0600
  4009a8:	00400ff5 	.word	0x00400ff5
  4009ac:	00400ee5 	.word	0x00400ee5
  4009b0:	00400f1d 	.word	0x00400f1d
  4009b4:	00401259 	.word	0x00401259

004009b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4009bc:	b980      	cbnz	r0, 4009e0 <_read+0x28>
  4009be:	460c      	mov	r4, r1
  4009c0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4009c2:	2a00      	cmp	r2, #0
  4009c4:	dd0f      	ble.n	4009e6 <_read+0x2e>
  4009c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4009c8:	4e08      	ldr	r6, [pc, #32]	; (4009ec <_read+0x34>)
  4009ca:	4d09      	ldr	r5, [pc, #36]	; (4009f0 <_read+0x38>)
  4009cc:	6830      	ldr	r0, [r6, #0]
  4009ce:	4621      	mov	r1, r4
  4009d0:	682b      	ldr	r3, [r5, #0]
  4009d2:	4798      	blx	r3
		ptr++;
  4009d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4009d6:	42bc      	cmp	r4, r7
  4009d8:	d1f8      	bne.n	4009cc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4009da:	4640      	mov	r0, r8
  4009dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4009e0:	f04f 38ff 	mov.w	r8, #4294967295
  4009e4:	e7f9      	b.n	4009da <_read+0x22>
	for (; len > 0; --len) {
  4009e6:	4680      	mov	r8, r0
  4009e8:	e7f7      	b.n	4009da <_read+0x22>
  4009ea:	bf00      	nop
  4009ec:	20400ddc 	.word	0x20400ddc
  4009f0:	20400dd4 	.word	0x20400dd4

004009f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4009f4:	3801      	subs	r0, #1
  4009f6:	2802      	cmp	r0, #2
  4009f8:	d815      	bhi.n	400a26 <_write+0x32>
{
  4009fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009fe:	460e      	mov	r6, r1
  400a00:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400a02:	b19a      	cbz	r2, 400a2c <_write+0x38>
  400a04:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400a06:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a40 <_write+0x4c>
  400a0a:	4f0c      	ldr	r7, [pc, #48]	; (400a3c <_write+0x48>)
  400a0c:	f8d8 0000 	ldr.w	r0, [r8]
  400a10:	f815 1b01 	ldrb.w	r1, [r5], #1
  400a14:	683b      	ldr	r3, [r7, #0]
  400a16:	4798      	blx	r3
  400a18:	2800      	cmp	r0, #0
  400a1a:	db0a      	blt.n	400a32 <_write+0x3e>
  400a1c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400a1e:	3c01      	subs	r4, #1
  400a20:	d1f4      	bne.n	400a0c <_write+0x18>
  400a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a26:	f04f 30ff 	mov.w	r0, #4294967295
  400a2a:	4770      	bx	lr
	for (; len != 0; --len) {
  400a2c:	4610      	mov	r0, r2
  400a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400a32:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3a:	bf00      	nop
  400a3c:	20400dd8 	.word	0x20400dd8
  400a40:	20400ddc 	.word	0x20400ddc

00400a44 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a4a:	4b5c      	ldr	r3, [pc, #368]	; (400bbc <board_init+0x178>)
  400a4c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a52:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400a56:	4b5a      	ldr	r3, [pc, #360]	; (400bc0 <board_init+0x17c>)
  400a58:	2200      	movs	r2, #0
  400a5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400a5e:	695a      	ldr	r2, [r3, #20]
  400a60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400a64:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400a66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a6a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400a6e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400a72:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400a76:	f007 0007 	and.w	r0, r7, #7
  400a7a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400a7c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400a80:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400a84:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400a88:	f3bf 8f4f 	dsb	sy
  400a8c:	f04f 34ff 	mov.w	r4, #4294967295
  400a90:	fa04 fc00 	lsl.w	ip, r4, r0
  400a94:	fa06 f000 	lsl.w	r0, r6, r0
  400a98:	fa04 f40e 	lsl.w	r4, r4, lr
  400a9c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400aa0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400aa2:	463a      	mov	r2, r7
  400aa4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400aa6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400aaa:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400aae:	3a01      	subs	r2, #1
  400ab0:	4423      	add	r3, r4
  400ab2:	f1b2 3fff 	cmp.w	r2, #4294967295
  400ab6:	d1f6      	bne.n	400aa6 <board_init+0x62>
        } while(sets--);
  400ab8:	3e01      	subs	r6, #1
  400aba:	4460      	add	r0, ip
  400abc:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ac0:	d1ef      	bne.n	400aa2 <board_init+0x5e>
  400ac2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400ac6:	4b3e      	ldr	r3, [pc, #248]	; (400bc0 <board_init+0x17c>)
  400ac8:	695a      	ldr	r2, [r3, #20]
  400aca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400ace:	615a      	str	r2, [r3, #20]
  400ad0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ad4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ad8:	4a3a      	ldr	r2, [pc, #232]	; (400bc4 <board_init+0x180>)
  400ada:	493b      	ldr	r1, [pc, #236]	; (400bc8 <board_init+0x184>)
  400adc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ade:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400ae2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ae8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400aec:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400af0:	f022 0201 	bic.w	r2, r2, #1
  400af4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400af8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400afc:	f022 0201 	bic.w	r2, r2, #1
  400b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b08:	f3bf 8f6f 	isb	sy
  400b0c:	200a      	movs	r0, #10
  400b0e:	4c2f      	ldr	r4, [pc, #188]	; (400bcc <board_init+0x188>)
  400b10:	47a0      	blx	r4
  400b12:	200b      	movs	r0, #11
  400b14:	47a0      	blx	r4
  400b16:	200c      	movs	r0, #12
  400b18:	47a0      	blx	r4
  400b1a:	2010      	movs	r0, #16
  400b1c:	47a0      	blx	r4
  400b1e:	2011      	movs	r0, #17
  400b20:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b22:	4b2b      	ldr	r3, [pc, #172]	; (400bd0 <board_init+0x18c>)
  400b24:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b28:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b2e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400b38:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b3e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b44:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b46:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b4e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b52:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b54:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b56:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b5a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b60:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400b68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b6c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b72:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b74:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b7c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b80:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b82:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b84:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b88:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b8a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b8c:	4a11      	ldr	r2, [pc, #68]	; (400bd4 <board_init+0x190>)
  400b8e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b92:	f043 0310 	orr.w	r3, r3, #16
  400b96:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b9a:	4b0f      	ldr	r3, [pc, #60]	; (400bd8 <board_init+0x194>)
  400b9c:	2210      	movs	r2, #16
  400b9e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ba4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ba6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400bac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400bae:	4311      	orrs	r1, r2
  400bb0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400bb2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400bb4:	4311      	orrs	r1, r2
  400bb6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bb8:	605a      	str	r2, [r3, #4]
  400bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bbc:	400e1850 	.word	0x400e1850
  400bc0:	e000ed00 	.word	0xe000ed00
  400bc4:	400e0c00 	.word	0x400e0c00
  400bc8:	5a00080c 	.word	0x5a00080c
  400bcc:	00401005 	.word	0x00401005
  400bd0:	400e1200 	.word	0x400e1200
  400bd4:	40088000 	.word	0x40088000
  400bd8:	400e1000 	.word	0x400e1000

00400bdc <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400bdc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400be0:	0053      	lsls	r3, r2, #1
  400be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400be6:	fbb2 f2f3 	udiv	r2, r2, r3
  400bea:	3a01      	subs	r2, #1
  400bec:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400bf0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400bf4:	4770      	bx	lr

00400bf6 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400bf6:	6301      	str	r1, [r0, #48]	; 0x30
  400bf8:	4770      	bx	lr

00400bfa <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400bfa:	6341      	str	r1, [r0, #52]	; 0x34
  400bfc:	4770      	bx	lr

00400bfe <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400bfe:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c00:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c04:	d03a      	beq.n	400c7c <pio_set_peripheral+0x7e>
  400c06:	d813      	bhi.n	400c30 <pio_set_peripheral+0x32>
  400c08:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c0c:	d025      	beq.n	400c5a <pio_set_peripheral+0x5c>
  400c0e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c12:	d10a      	bne.n	400c2a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c14:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c16:	4313      	orrs	r3, r2
  400c18:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c1c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c1e:	400b      	ands	r3, r1
  400c20:	ea23 0302 	bic.w	r3, r3, r2
  400c24:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c26:	6042      	str	r2, [r0, #4]
  400c28:	4770      	bx	lr
	switch (ul_type) {
  400c2a:	2900      	cmp	r1, #0
  400c2c:	d1fb      	bne.n	400c26 <pio_set_peripheral+0x28>
  400c2e:	4770      	bx	lr
  400c30:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c34:	d021      	beq.n	400c7a <pio_set_peripheral+0x7c>
  400c36:	d809      	bhi.n	400c4c <pio_set_peripheral+0x4e>
  400c38:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c3c:	d1f3      	bne.n	400c26 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c40:	4313      	orrs	r3, r2
  400c42:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c46:	4313      	orrs	r3, r2
  400c48:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c4a:	e7ec      	b.n	400c26 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c4c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c50:	d013      	beq.n	400c7a <pio_set_peripheral+0x7c>
  400c52:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c56:	d010      	beq.n	400c7a <pio_set_peripheral+0x7c>
  400c58:	e7e5      	b.n	400c26 <pio_set_peripheral+0x28>
{
  400c5a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c5c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c5e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c60:	43d3      	mvns	r3, r2
  400c62:	4021      	ands	r1, r4
  400c64:	461c      	mov	r4, r3
  400c66:	4019      	ands	r1, r3
  400c68:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c6c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c6e:	400b      	ands	r3, r1
  400c70:	4023      	ands	r3, r4
  400c72:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c74:	6042      	str	r2, [r0, #4]
}
  400c76:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c7a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c7c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c7e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c80:	400b      	ands	r3, r1
  400c82:	ea23 0302 	bic.w	r3, r3, r2
  400c86:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c88:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c8a:	4313      	orrs	r3, r2
  400c8c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c8e:	e7ca      	b.n	400c26 <pio_set_peripheral+0x28>

00400c90 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c90:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c92:	f012 0f01 	tst.w	r2, #1
  400c96:	d10d      	bne.n	400cb4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c98:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400c9a:	f012 0f0a 	tst.w	r2, #10
  400c9e:	d00b      	beq.n	400cb8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400ca0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400ca2:	f012 0f02 	tst.w	r2, #2
  400ca6:	d109      	bne.n	400cbc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ca8:	f012 0f08 	tst.w	r2, #8
  400cac:	d008      	beq.n	400cc0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400cae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400cb2:	e005      	b.n	400cc0 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cb4:	6641      	str	r1, [r0, #100]	; 0x64
  400cb6:	e7f0      	b.n	400c9a <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cb8:	6241      	str	r1, [r0, #36]	; 0x24
  400cba:	e7f2      	b.n	400ca2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cbc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400cc0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cc2:	6001      	str	r1, [r0, #0]
  400cc4:	4770      	bx	lr

00400cc6 <pio_set_output>:
{
  400cc6:	b410      	push	{r4}
  400cc8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400cca:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400ccc:	b94c      	cbnz	r4, 400ce2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400cce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400cd0:	b14b      	cbz	r3, 400ce6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400cd2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400cd4:	b94a      	cbnz	r2, 400cea <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400cd6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400cd8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400cda:	6001      	str	r1, [r0, #0]
}
  400cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ce0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400ce2:	6641      	str	r1, [r0, #100]	; 0x64
  400ce4:	e7f4      	b.n	400cd0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400ce6:	6541      	str	r1, [r0, #84]	; 0x54
  400ce8:	e7f4      	b.n	400cd4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400cea:	6301      	str	r1, [r0, #48]	; 0x30
  400cec:	e7f4      	b.n	400cd8 <pio_set_output+0x12>
	...

00400cf0 <pio_configure>:
{
  400cf0:	b570      	push	{r4, r5, r6, lr}
  400cf2:	b082      	sub	sp, #8
  400cf4:	4605      	mov	r5, r0
  400cf6:	4616      	mov	r6, r2
  400cf8:	461c      	mov	r4, r3
	switch (ul_type) {
  400cfa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cfe:	d014      	beq.n	400d2a <pio_configure+0x3a>
  400d00:	d90a      	bls.n	400d18 <pio_configure+0x28>
  400d02:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d06:	d024      	beq.n	400d52 <pio_configure+0x62>
  400d08:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d0c:	d021      	beq.n	400d52 <pio_configure+0x62>
  400d0e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d12:	d017      	beq.n	400d44 <pio_configure+0x54>
		return 0;
  400d14:	2000      	movs	r0, #0
  400d16:	e01a      	b.n	400d4e <pio_configure+0x5e>
	switch (ul_type) {
  400d18:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d1c:	d005      	beq.n	400d2a <pio_configure+0x3a>
  400d1e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d22:	d002      	beq.n	400d2a <pio_configure+0x3a>
  400d24:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d28:	d1f4      	bne.n	400d14 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d2a:	4632      	mov	r2, r6
  400d2c:	4628      	mov	r0, r5
  400d2e:	4b11      	ldr	r3, [pc, #68]	; (400d74 <pio_configure+0x84>)
  400d30:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d32:	f014 0f01 	tst.w	r4, #1
  400d36:	d102      	bne.n	400d3e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d38:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d3a:	2001      	movs	r0, #1
  400d3c:	e007      	b.n	400d4e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d3e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d40:	2001      	movs	r0, #1
  400d42:	e004      	b.n	400d4e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d44:	461a      	mov	r2, r3
  400d46:	4631      	mov	r1, r6
  400d48:	4b0b      	ldr	r3, [pc, #44]	; (400d78 <pio_configure+0x88>)
  400d4a:	4798      	blx	r3
	return 1;
  400d4c:	2001      	movs	r0, #1
}
  400d4e:	b002      	add	sp, #8
  400d50:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d52:	f004 0301 	and.w	r3, r4, #1
  400d56:	9300      	str	r3, [sp, #0]
  400d58:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d5c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d60:	bf14      	ite	ne
  400d62:	2200      	movne	r2, #0
  400d64:	2201      	moveq	r2, #1
  400d66:	4631      	mov	r1, r6
  400d68:	4628      	mov	r0, r5
  400d6a:	4c04      	ldr	r4, [pc, #16]	; (400d7c <pio_configure+0x8c>)
  400d6c:	47a0      	blx	r4
	return 1;
  400d6e:	2001      	movs	r0, #1
		break;
  400d70:	e7ed      	b.n	400d4e <pio_configure+0x5e>
  400d72:	bf00      	nop
  400d74:	00400bff 	.word	0x00400bff
  400d78:	00400c91 	.word	0x00400c91
  400d7c:	00400cc7 	.word	0x00400cc7

00400d80 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d80:	f012 0f10 	tst.w	r2, #16
  400d84:	d012      	beq.n	400dac <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d86:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d8a:	f012 0f20 	tst.w	r2, #32
  400d8e:	d007      	beq.n	400da0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d90:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400d94:	f012 0f40 	tst.w	r2, #64	; 0x40
  400d98:	d005      	beq.n	400da6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400d9a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400d9e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400da0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400da4:	e7f6      	b.n	400d94 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400da6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400daa:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400dac:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400db0:	4770      	bx	lr

00400db2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400db2:	6401      	str	r1, [r0, #64]	; 0x40
  400db4:	4770      	bx	lr

00400db6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400db6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400db8:	4770      	bx	lr

00400dba <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dba:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dbc:	4770      	bx	lr
	...

00400dc0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dc4:	4604      	mov	r4, r0
  400dc6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dc8:	4b0e      	ldr	r3, [pc, #56]	; (400e04 <pio_handler_process+0x44>)
  400dca:	4798      	blx	r3
  400dcc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dce:	4620      	mov	r0, r4
  400dd0:	4b0d      	ldr	r3, [pc, #52]	; (400e08 <pio_handler_process+0x48>)
  400dd2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400dd4:	4005      	ands	r5, r0
  400dd6:	d013      	beq.n	400e00 <pio_handler_process+0x40>
  400dd8:	4c0c      	ldr	r4, [pc, #48]	; (400e0c <pio_handler_process+0x4c>)
  400dda:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400dde:	e003      	b.n	400de8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400de0:	42b4      	cmp	r4, r6
  400de2:	d00d      	beq.n	400e00 <pio_handler_process+0x40>
  400de4:	3410      	adds	r4, #16
		while (status != 0) {
  400de6:	b15d      	cbz	r5, 400e00 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400de8:	6820      	ldr	r0, [r4, #0]
  400dea:	4540      	cmp	r0, r8
  400dec:	d1f8      	bne.n	400de0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400dee:	6861      	ldr	r1, [r4, #4]
  400df0:	4229      	tst	r1, r5
  400df2:	d0f5      	beq.n	400de0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400df4:	68e3      	ldr	r3, [r4, #12]
  400df6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400df8:	6863      	ldr	r3, [r4, #4]
  400dfa:	ea25 0503 	bic.w	r5, r5, r3
  400dfe:	e7ef      	b.n	400de0 <pio_handler_process+0x20>
  400e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e04:	00400db7 	.word	0x00400db7
  400e08:	00400dbb 	.word	0x00400dbb
  400e0c:	20400be4 	.word	0x20400be4

00400e10 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e12:	4c18      	ldr	r4, [pc, #96]	; (400e74 <pio_handler_set+0x64>)
  400e14:	6826      	ldr	r6, [r4, #0]
  400e16:	2e06      	cmp	r6, #6
  400e18:	d82a      	bhi.n	400e70 <pio_handler_set+0x60>
  400e1a:	f04f 0c00 	mov.w	ip, #0
  400e1e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e20:	4f15      	ldr	r7, [pc, #84]	; (400e78 <pio_handler_set+0x68>)
  400e22:	e004      	b.n	400e2e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e24:	3401      	adds	r4, #1
  400e26:	b2e4      	uxtb	r4, r4
  400e28:	46a4      	mov	ip, r4
  400e2a:	42a6      	cmp	r6, r4
  400e2c:	d309      	bcc.n	400e42 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e2e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e30:	0125      	lsls	r5, r4, #4
  400e32:	597d      	ldr	r5, [r7, r5]
  400e34:	428d      	cmp	r5, r1
  400e36:	d1f5      	bne.n	400e24 <pio_handler_set+0x14>
  400e38:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e3c:	686d      	ldr	r5, [r5, #4]
  400e3e:	4295      	cmp	r5, r2
  400e40:	d1f0      	bne.n	400e24 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e42:	4d0d      	ldr	r5, [pc, #52]	; (400e78 <pio_handler_set+0x68>)
  400e44:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e48:	eb05 040e 	add.w	r4, r5, lr
  400e4c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e50:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e52:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e54:	9906      	ldr	r1, [sp, #24]
  400e56:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e58:	3601      	adds	r6, #1
  400e5a:	4566      	cmp	r6, ip
  400e5c:	d005      	beq.n	400e6a <pio_handler_set+0x5a>
  400e5e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e60:	461a      	mov	r2, r3
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <pio_handler_set+0x6c>)
  400e64:	4798      	blx	r3

	return 0;
  400e66:	2000      	movs	r0, #0
  400e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e6a:	4902      	ldr	r1, [pc, #8]	; (400e74 <pio_handler_set+0x64>)
  400e6c:	600e      	str	r6, [r1, #0]
  400e6e:	e7f6      	b.n	400e5e <pio_handler_set+0x4e>
		return 1;
  400e70:	2001      	movs	r0, #1
}
  400e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e74:	20400c54 	.word	0x20400c54
  400e78:	20400be4 	.word	0x20400be4
  400e7c:	00400d81 	.word	0x00400d81

00400e80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e82:	210a      	movs	r1, #10
  400e84:	4801      	ldr	r0, [pc, #4]	; (400e8c <PIOA_Handler+0xc>)
  400e86:	4b02      	ldr	r3, [pc, #8]	; (400e90 <PIOA_Handler+0x10>)
  400e88:	4798      	blx	r3
  400e8a:	bd08      	pop	{r3, pc}
  400e8c:	400e0e00 	.word	0x400e0e00
  400e90:	00400dc1 	.word	0x00400dc1

00400e94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e96:	210b      	movs	r1, #11
  400e98:	4801      	ldr	r0, [pc, #4]	; (400ea0 <PIOB_Handler+0xc>)
  400e9a:	4b02      	ldr	r3, [pc, #8]	; (400ea4 <PIOB_Handler+0x10>)
  400e9c:	4798      	blx	r3
  400e9e:	bd08      	pop	{r3, pc}
  400ea0:	400e1000 	.word	0x400e1000
  400ea4:	00400dc1 	.word	0x00400dc1

00400ea8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ea8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400eaa:	210c      	movs	r1, #12
  400eac:	4801      	ldr	r0, [pc, #4]	; (400eb4 <PIOC_Handler+0xc>)
  400eae:	4b02      	ldr	r3, [pc, #8]	; (400eb8 <PIOC_Handler+0x10>)
  400eb0:	4798      	blx	r3
  400eb2:	bd08      	pop	{r3, pc}
  400eb4:	400e1200 	.word	0x400e1200
  400eb8:	00400dc1 	.word	0x00400dc1

00400ebc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ebc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ebe:	2110      	movs	r1, #16
  400ec0:	4801      	ldr	r0, [pc, #4]	; (400ec8 <PIOD_Handler+0xc>)
  400ec2:	4b02      	ldr	r3, [pc, #8]	; (400ecc <PIOD_Handler+0x10>)
  400ec4:	4798      	blx	r3
  400ec6:	bd08      	pop	{r3, pc}
  400ec8:	400e1400 	.word	0x400e1400
  400ecc:	00400dc1 	.word	0x00400dc1

00400ed0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ed0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ed2:	2111      	movs	r1, #17
  400ed4:	4801      	ldr	r0, [pc, #4]	; (400edc <PIOE_Handler+0xc>)
  400ed6:	4b02      	ldr	r3, [pc, #8]	; (400ee0 <PIOE_Handler+0x10>)
  400ed8:	4798      	blx	r3
  400eda:	bd08      	pop	{r3, pc}
  400edc:	400e1600 	.word	0x400e1600
  400ee0:	00400dc1 	.word	0x00400dc1

00400ee4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ee4:	2803      	cmp	r0, #3
  400ee6:	d011      	beq.n	400f0c <pmc_mck_set_division+0x28>
  400ee8:	2804      	cmp	r0, #4
  400eea:	d012      	beq.n	400f12 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400eec:	2802      	cmp	r0, #2
  400eee:	bf0c      	ite	eq
  400ef0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ef4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ef6:	4a08      	ldr	r2, [pc, #32]	; (400f18 <pmc_mck_set_division+0x34>)
  400ef8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400efe:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f00:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f02:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f04:	f013 0f08 	tst.w	r3, #8
  400f08:	d0fb      	beq.n	400f02 <pmc_mck_set_division+0x1e>
}
  400f0a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f0c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f10:	e7f1      	b.n	400ef6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f12:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f16:	e7ee      	b.n	400ef6 <pmc_mck_set_division+0x12>
  400f18:	400e0600 	.word	0x400e0600

00400f1c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f1c:	4a17      	ldr	r2, [pc, #92]	; (400f7c <pmc_switch_mck_to_pllack+0x60>)
  400f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f24:	4318      	orrs	r0, r3
  400f26:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f28:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f2a:	f013 0f08 	tst.w	r3, #8
  400f2e:	d10a      	bne.n	400f46 <pmc_switch_mck_to_pllack+0x2a>
  400f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f34:	4911      	ldr	r1, [pc, #68]	; (400f7c <pmc_switch_mck_to_pllack+0x60>)
  400f36:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f38:	f012 0f08 	tst.w	r2, #8
  400f3c:	d103      	bne.n	400f46 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f3e:	3b01      	subs	r3, #1
  400f40:	d1f9      	bne.n	400f36 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f42:	2001      	movs	r0, #1
  400f44:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f46:	4a0d      	ldr	r2, [pc, #52]	; (400f7c <pmc_switch_mck_to_pllack+0x60>)
  400f48:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f4a:	f023 0303 	bic.w	r3, r3, #3
  400f4e:	f043 0302 	orr.w	r3, r3, #2
  400f52:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f56:	f013 0f08 	tst.w	r3, #8
  400f5a:	d10a      	bne.n	400f72 <pmc_switch_mck_to_pllack+0x56>
  400f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f60:	4906      	ldr	r1, [pc, #24]	; (400f7c <pmc_switch_mck_to_pllack+0x60>)
  400f62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f64:	f012 0f08 	tst.w	r2, #8
  400f68:	d105      	bne.n	400f76 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f6a:	3b01      	subs	r3, #1
  400f6c:	d1f9      	bne.n	400f62 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f6e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f70:	4770      	bx	lr
	return 0;
  400f72:	2000      	movs	r0, #0
  400f74:	4770      	bx	lr
  400f76:	2000      	movs	r0, #0
  400f78:	4770      	bx	lr
  400f7a:	bf00      	nop
  400f7c:	400e0600 	.word	0x400e0600

00400f80 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f80:	b9a0      	cbnz	r0, 400fac <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f82:	480e      	ldr	r0, [pc, #56]	; (400fbc <pmc_switch_mainck_to_xtal+0x3c>)
  400f84:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f86:	0209      	lsls	r1, r1, #8
  400f88:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f8a:	4a0d      	ldr	r2, [pc, #52]	; (400fc0 <pmc_switch_mainck_to_xtal+0x40>)
  400f8c:	401a      	ands	r2, r3
  400f8e:	4b0d      	ldr	r3, [pc, #52]	; (400fc4 <pmc_switch_mainck_to_xtal+0x44>)
  400f90:	4313      	orrs	r3, r2
  400f92:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f94:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f96:	4602      	mov	r2, r0
  400f98:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f9a:	f013 0f01 	tst.w	r3, #1
  400f9e:	d0fb      	beq.n	400f98 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fa0:	4a06      	ldr	r2, [pc, #24]	; (400fbc <pmc_switch_mainck_to_xtal+0x3c>)
  400fa2:	6a11      	ldr	r1, [r2, #32]
  400fa4:	4b08      	ldr	r3, [pc, #32]	; (400fc8 <pmc_switch_mainck_to_xtal+0x48>)
  400fa6:	430b      	orrs	r3, r1
  400fa8:	6213      	str	r3, [r2, #32]
  400faa:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fac:	4903      	ldr	r1, [pc, #12]	; (400fbc <pmc_switch_mainck_to_xtal+0x3c>)
  400fae:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fb0:	4a06      	ldr	r2, [pc, #24]	; (400fcc <pmc_switch_mainck_to_xtal+0x4c>)
  400fb2:	401a      	ands	r2, r3
  400fb4:	4b06      	ldr	r3, [pc, #24]	; (400fd0 <pmc_switch_mainck_to_xtal+0x50>)
  400fb6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb8:	620b      	str	r3, [r1, #32]
  400fba:	4770      	bx	lr
  400fbc:	400e0600 	.word	0x400e0600
  400fc0:	ffc8fffc 	.word	0xffc8fffc
  400fc4:	00370001 	.word	0x00370001
  400fc8:	01370000 	.word	0x01370000
  400fcc:	fec8fffc 	.word	0xfec8fffc
  400fd0:	01370002 	.word	0x01370002

00400fd4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fd4:	4b02      	ldr	r3, [pc, #8]	; (400fe0 <pmc_osc_is_ready_mainck+0xc>)
  400fd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fd8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fdc:	4770      	bx	lr
  400fde:	bf00      	nop
  400fe0:	400e0600 	.word	0x400e0600

00400fe4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fe4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fe8:	4b01      	ldr	r3, [pc, #4]	; (400ff0 <pmc_disable_pllack+0xc>)
  400fea:	629a      	str	r2, [r3, #40]	; 0x28
  400fec:	4770      	bx	lr
  400fee:	bf00      	nop
  400ff0:	400e0600 	.word	0x400e0600

00400ff4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ff4:	4b02      	ldr	r3, [pc, #8]	; (401000 <pmc_is_locked_pllack+0xc>)
  400ff6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ff8:	f000 0002 	and.w	r0, r0, #2
  400ffc:	4770      	bx	lr
  400ffe:	bf00      	nop
  401000:	400e0600 	.word	0x400e0600

00401004 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401004:	283f      	cmp	r0, #63	; 0x3f
  401006:	d81e      	bhi.n	401046 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401008:	281f      	cmp	r0, #31
  40100a:	d80c      	bhi.n	401026 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40100c:	4b11      	ldr	r3, [pc, #68]	; (401054 <pmc_enable_periph_clk+0x50>)
  40100e:	699a      	ldr	r2, [r3, #24]
  401010:	2301      	movs	r3, #1
  401012:	4083      	lsls	r3, r0
  401014:	4393      	bics	r3, r2
  401016:	d018      	beq.n	40104a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401018:	2301      	movs	r3, #1
  40101a:	fa03 f000 	lsl.w	r0, r3, r0
  40101e:	4b0d      	ldr	r3, [pc, #52]	; (401054 <pmc_enable_periph_clk+0x50>)
  401020:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401022:	2000      	movs	r0, #0
  401024:	4770      	bx	lr
		ul_id -= 32;
  401026:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401028:	4b0a      	ldr	r3, [pc, #40]	; (401054 <pmc_enable_periph_clk+0x50>)
  40102a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40102e:	2301      	movs	r3, #1
  401030:	4083      	lsls	r3, r0
  401032:	4393      	bics	r3, r2
  401034:	d00b      	beq.n	40104e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401036:	2301      	movs	r3, #1
  401038:	fa03 f000 	lsl.w	r0, r3, r0
  40103c:	4b05      	ldr	r3, [pc, #20]	; (401054 <pmc_enable_periph_clk+0x50>)
  40103e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401042:	2000      	movs	r0, #0
  401044:	4770      	bx	lr
		return 1;
  401046:	2001      	movs	r0, #1
  401048:	4770      	bx	lr
	return 0;
  40104a:	2000      	movs	r0, #0
  40104c:	4770      	bx	lr
  40104e:	2000      	movs	r0, #0
}
  401050:	4770      	bx	lr
  401052:	bf00      	nop
  401054:	400e0600 	.word	0x400e0600

00401058 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401058:	6943      	ldr	r3, [r0, #20]
  40105a:	f013 0f02 	tst.w	r3, #2
  40105e:	d002      	beq.n	401066 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401060:	61c1      	str	r1, [r0, #28]
	return 0;
  401062:	2000      	movs	r0, #0
  401064:	4770      	bx	lr
		return 1;
  401066:	2001      	movs	r0, #1
}
  401068:	4770      	bx	lr

0040106a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40106a:	6943      	ldr	r3, [r0, #20]
  40106c:	f013 0f01 	tst.w	r3, #1
  401070:	d003      	beq.n	40107a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401072:	6983      	ldr	r3, [r0, #24]
  401074:	700b      	strb	r3, [r1, #0]
	return 0;
  401076:	2000      	movs	r0, #0
  401078:	4770      	bx	lr
		return 1;
  40107a:	2001      	movs	r0, #1
}
  40107c:	4770      	bx	lr

0040107e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40107e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401080:	010b      	lsls	r3, r1, #4
  401082:	4293      	cmp	r3, r2
  401084:	d914      	bls.n	4010b0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401086:	00c9      	lsls	r1, r1, #3
  401088:	084b      	lsrs	r3, r1, #1
  40108a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40108e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401092:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401094:	1e5c      	subs	r4, r3, #1
  401096:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40109a:	428c      	cmp	r4, r1
  40109c:	d901      	bls.n	4010a2 <usart_set_async_baudrate+0x24>
		return 1;
  40109e:	2001      	movs	r0, #1
  4010a0:	e017      	b.n	4010d2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4010a2:	6841      	ldr	r1, [r0, #4]
  4010a4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4010a8:	6041      	str	r1, [r0, #4]
  4010aa:	e00c      	b.n	4010c6 <usart_set_async_baudrate+0x48>
		return 1;
  4010ac:	2001      	movs	r0, #1
  4010ae:	e010      	b.n	4010d2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010b0:	0859      	lsrs	r1, r3, #1
  4010b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4010b6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010ba:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010bc:	1e5c      	subs	r4, r3, #1
  4010be:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010c2:	428c      	cmp	r4, r1
  4010c4:	d8f2      	bhi.n	4010ac <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010c6:	0412      	lsls	r2, r2, #16
  4010c8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4010cc:	431a      	orrs	r2, r3
  4010ce:	6202      	str	r2, [r0, #32]

	return 0;
  4010d0:	2000      	movs	r0, #0
}
  4010d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010d6:	4770      	bx	lr

004010d8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4010d8:	4b08      	ldr	r3, [pc, #32]	; (4010fc <usart_reset+0x24>)
  4010da:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4010de:	2300      	movs	r3, #0
  4010e0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4010e2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010e4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4010e6:	2388      	movs	r3, #136	; 0x88
  4010e8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010ea:	2324      	movs	r3, #36	; 0x24
  4010ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4010ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010f2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4010f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4010f8:	6003      	str	r3, [r0, #0]
  4010fa:	4770      	bx	lr
  4010fc:	55534100 	.word	0x55534100

00401100 <usart_init_rs232>:
{
  401100:	b570      	push	{r4, r5, r6, lr}
  401102:	4605      	mov	r5, r0
  401104:	460c      	mov	r4, r1
  401106:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401108:	4b0f      	ldr	r3, [pc, #60]	; (401148 <usart_init_rs232+0x48>)
  40110a:	4798      	blx	r3
	ul_reg_val = 0;
  40110c:	2200      	movs	r2, #0
  40110e:	4b0f      	ldr	r3, [pc, #60]	; (40114c <usart_init_rs232+0x4c>)
  401110:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401112:	b1a4      	cbz	r4, 40113e <usart_init_rs232+0x3e>
  401114:	4632      	mov	r2, r6
  401116:	6821      	ldr	r1, [r4, #0]
  401118:	4628      	mov	r0, r5
  40111a:	4b0d      	ldr	r3, [pc, #52]	; (401150 <usart_init_rs232+0x50>)
  40111c:	4798      	blx	r3
  40111e:	4602      	mov	r2, r0
  401120:	b978      	cbnz	r0, 401142 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401122:	6863      	ldr	r3, [r4, #4]
  401124:	68a1      	ldr	r1, [r4, #8]
  401126:	430b      	orrs	r3, r1
  401128:	6921      	ldr	r1, [r4, #16]
  40112a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40112c:	68e1      	ldr	r1, [r4, #12]
  40112e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401130:	4906      	ldr	r1, [pc, #24]	; (40114c <usart_init_rs232+0x4c>)
  401132:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401134:	6869      	ldr	r1, [r5, #4]
  401136:	430b      	orrs	r3, r1
  401138:	606b      	str	r3, [r5, #4]
}
  40113a:	4610      	mov	r0, r2
  40113c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40113e:	2201      	movs	r2, #1
  401140:	e7fb      	b.n	40113a <usart_init_rs232+0x3a>
  401142:	2201      	movs	r2, #1
  401144:	e7f9      	b.n	40113a <usart_init_rs232+0x3a>
  401146:	bf00      	nop
  401148:	004010d9 	.word	0x004010d9
  40114c:	20400c58 	.word	0x20400c58
  401150:	0040107f 	.word	0x0040107f

00401154 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401154:	2340      	movs	r3, #64	; 0x40
  401156:	6003      	str	r3, [r0, #0]
  401158:	4770      	bx	lr

0040115a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40115a:	2310      	movs	r3, #16
  40115c:	6003      	str	r3, [r0, #0]
  40115e:	4770      	bx	lr

00401160 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401160:	6943      	ldr	r3, [r0, #20]
  401162:	f013 0f02 	tst.w	r3, #2
  401166:	d004      	beq.n	401172 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401168:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40116c:	61c1      	str	r1, [r0, #28]
	return 0;
  40116e:	2000      	movs	r0, #0
  401170:	4770      	bx	lr
		return 1;
  401172:	2001      	movs	r0, #1
}
  401174:	4770      	bx	lr

00401176 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401176:	6943      	ldr	r3, [r0, #20]
  401178:	f013 0f01 	tst.w	r3, #1
  40117c:	d005      	beq.n	40118a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40117e:	6983      	ldr	r3, [r0, #24]
  401180:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401184:	600b      	str	r3, [r1, #0]
	return 0;
  401186:	2000      	movs	r0, #0
  401188:	4770      	bx	lr
		return 1;
  40118a:	2001      	movs	r0, #1
}
  40118c:	4770      	bx	lr

0040118e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40118e:	e7fe      	b.n	40118e <Dummy_Handler>

00401190 <Reset_Handler>:
{
  401190:	b500      	push	{lr}
  401192:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401194:	4b25      	ldr	r3, [pc, #148]	; (40122c <Reset_Handler+0x9c>)
  401196:	4a26      	ldr	r2, [pc, #152]	; (401230 <Reset_Handler+0xa0>)
  401198:	429a      	cmp	r2, r3
  40119a:	d010      	beq.n	4011be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40119c:	4b25      	ldr	r3, [pc, #148]	; (401234 <Reset_Handler+0xa4>)
  40119e:	4a23      	ldr	r2, [pc, #140]	; (40122c <Reset_Handler+0x9c>)
  4011a0:	429a      	cmp	r2, r3
  4011a2:	d20c      	bcs.n	4011be <Reset_Handler+0x2e>
  4011a4:	3b01      	subs	r3, #1
  4011a6:	1a9b      	subs	r3, r3, r2
  4011a8:	f023 0303 	bic.w	r3, r3, #3
  4011ac:	3304      	adds	r3, #4
  4011ae:	4413      	add	r3, r2
  4011b0:	491f      	ldr	r1, [pc, #124]	; (401230 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4011b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4011b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4011ba:	429a      	cmp	r2, r3
  4011bc:	d1f9      	bne.n	4011b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4011be:	4b1e      	ldr	r3, [pc, #120]	; (401238 <Reset_Handler+0xa8>)
  4011c0:	4a1e      	ldr	r2, [pc, #120]	; (40123c <Reset_Handler+0xac>)
  4011c2:	429a      	cmp	r2, r3
  4011c4:	d20a      	bcs.n	4011dc <Reset_Handler+0x4c>
  4011c6:	3b01      	subs	r3, #1
  4011c8:	1a9b      	subs	r3, r3, r2
  4011ca:	f023 0303 	bic.w	r3, r3, #3
  4011ce:	3304      	adds	r3, #4
  4011d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4011d2:	2100      	movs	r1, #0
  4011d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011d8:	4293      	cmp	r3, r2
  4011da:	d1fb      	bne.n	4011d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011dc:	4a18      	ldr	r2, [pc, #96]	; (401240 <Reset_Handler+0xb0>)
  4011de:	4b19      	ldr	r3, [pc, #100]	; (401244 <Reset_Handler+0xb4>)
  4011e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011e4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011ea:	fab3 f383 	clz	r3, r3
  4011ee:	095b      	lsrs	r3, r3, #5
  4011f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011f8:	2200      	movs	r2, #0
  4011fa:	4b13      	ldr	r3, [pc, #76]	; (401248 <Reset_Handler+0xb8>)
  4011fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4011fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401200:	4a12      	ldr	r2, [pc, #72]	; (40124c <Reset_Handler+0xbc>)
  401202:	6813      	ldr	r3, [r2, #0]
  401204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401208:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40120a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40120e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401212:	b129      	cbz	r1, 401220 <Reset_Handler+0x90>
		cpu_irq_enable();
  401214:	2201      	movs	r2, #1
  401216:	4b0c      	ldr	r3, [pc, #48]	; (401248 <Reset_Handler+0xb8>)
  401218:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40121a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40121e:	b662      	cpsie	i
        __libc_init_array();
  401220:	4b0b      	ldr	r3, [pc, #44]	; (401250 <Reset_Handler+0xc0>)
  401222:	4798      	blx	r3
        main();
  401224:	4b0b      	ldr	r3, [pc, #44]	; (401254 <Reset_Handler+0xc4>)
  401226:	4798      	blx	r3
  401228:	e7fe      	b.n	401228 <Reset_Handler+0x98>
  40122a:	bf00      	nop
  40122c:	20400000 	.word	0x20400000
  401230:	00409504 	.word	0x00409504
  401234:	204009c0 	.word	0x204009c0
  401238:	20400e54 	.word	0x20400e54
  40123c:	204009c0 	.word	0x204009c0
  401240:	e000ed00 	.word	0xe000ed00
  401244:	00400000 	.word	0x00400000
  401248:	2040000a 	.word	0x2040000a
  40124c:	e000ed88 	.word	0xe000ed88
  401250:	00404469 	.word	0x00404469
  401254:	00403711 	.word	0x00403711

00401258 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401258:	4b3b      	ldr	r3, [pc, #236]	; (401348 <SystemCoreClockUpdate+0xf0>)
  40125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40125c:	f003 0303 	and.w	r3, r3, #3
  401260:	2b01      	cmp	r3, #1
  401262:	d01d      	beq.n	4012a0 <SystemCoreClockUpdate+0x48>
  401264:	b183      	cbz	r3, 401288 <SystemCoreClockUpdate+0x30>
  401266:	2b02      	cmp	r3, #2
  401268:	d036      	beq.n	4012d8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40126a:	4b37      	ldr	r3, [pc, #220]	; (401348 <SystemCoreClockUpdate+0xf0>)
  40126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40126e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401272:	2b70      	cmp	r3, #112	; 0x70
  401274:	d05f      	beq.n	401336 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401276:	4b34      	ldr	r3, [pc, #208]	; (401348 <SystemCoreClockUpdate+0xf0>)
  401278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40127a:	4934      	ldr	r1, [pc, #208]	; (40134c <SystemCoreClockUpdate+0xf4>)
  40127c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401280:	680b      	ldr	r3, [r1, #0]
  401282:	40d3      	lsrs	r3, r2
  401284:	600b      	str	r3, [r1, #0]
  401286:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401288:	4b31      	ldr	r3, [pc, #196]	; (401350 <SystemCoreClockUpdate+0xf8>)
  40128a:	695b      	ldr	r3, [r3, #20]
  40128c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401290:	bf14      	ite	ne
  401292:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401296:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40129a:	4b2c      	ldr	r3, [pc, #176]	; (40134c <SystemCoreClockUpdate+0xf4>)
  40129c:	601a      	str	r2, [r3, #0]
  40129e:	e7e4      	b.n	40126a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012a0:	4b29      	ldr	r3, [pc, #164]	; (401348 <SystemCoreClockUpdate+0xf0>)
  4012a2:	6a1b      	ldr	r3, [r3, #32]
  4012a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012a8:	d003      	beq.n	4012b2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4012aa:	4a2a      	ldr	r2, [pc, #168]	; (401354 <SystemCoreClockUpdate+0xfc>)
  4012ac:	4b27      	ldr	r3, [pc, #156]	; (40134c <SystemCoreClockUpdate+0xf4>)
  4012ae:	601a      	str	r2, [r3, #0]
  4012b0:	e7db      	b.n	40126a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012b2:	4a29      	ldr	r2, [pc, #164]	; (401358 <SystemCoreClockUpdate+0x100>)
  4012b4:	4b25      	ldr	r3, [pc, #148]	; (40134c <SystemCoreClockUpdate+0xf4>)
  4012b6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012b8:	4b23      	ldr	r3, [pc, #140]	; (401348 <SystemCoreClockUpdate+0xf0>)
  4012ba:	6a1b      	ldr	r3, [r3, #32]
  4012bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012c0:	2b10      	cmp	r3, #16
  4012c2:	d005      	beq.n	4012d0 <SystemCoreClockUpdate+0x78>
  4012c4:	2b20      	cmp	r3, #32
  4012c6:	d1d0      	bne.n	40126a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012c8:	4a22      	ldr	r2, [pc, #136]	; (401354 <SystemCoreClockUpdate+0xfc>)
  4012ca:	4b20      	ldr	r3, [pc, #128]	; (40134c <SystemCoreClockUpdate+0xf4>)
  4012cc:	601a      	str	r2, [r3, #0]
          break;
  4012ce:	e7cc      	b.n	40126a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012d0:	4a22      	ldr	r2, [pc, #136]	; (40135c <SystemCoreClockUpdate+0x104>)
  4012d2:	4b1e      	ldr	r3, [pc, #120]	; (40134c <SystemCoreClockUpdate+0xf4>)
  4012d4:	601a      	str	r2, [r3, #0]
          break;
  4012d6:	e7c8      	b.n	40126a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012d8:	4b1b      	ldr	r3, [pc, #108]	; (401348 <SystemCoreClockUpdate+0xf0>)
  4012da:	6a1b      	ldr	r3, [r3, #32]
  4012dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012e0:	d016      	beq.n	401310 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012e2:	4a1c      	ldr	r2, [pc, #112]	; (401354 <SystemCoreClockUpdate+0xfc>)
  4012e4:	4b19      	ldr	r3, [pc, #100]	; (40134c <SystemCoreClockUpdate+0xf4>)
  4012e6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012e8:	4b17      	ldr	r3, [pc, #92]	; (401348 <SystemCoreClockUpdate+0xf0>)
  4012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012ec:	f003 0303 	and.w	r3, r3, #3
  4012f0:	2b02      	cmp	r3, #2
  4012f2:	d1ba      	bne.n	40126a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012f4:	4a14      	ldr	r2, [pc, #80]	; (401348 <SystemCoreClockUpdate+0xf0>)
  4012f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012fa:	4814      	ldr	r0, [pc, #80]	; (40134c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401300:	6803      	ldr	r3, [r0, #0]
  401302:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401306:	b2d2      	uxtb	r2, r2
  401308:	fbb3 f3f2 	udiv	r3, r3, r2
  40130c:	6003      	str	r3, [r0, #0]
  40130e:	e7ac      	b.n	40126a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401310:	4a11      	ldr	r2, [pc, #68]	; (401358 <SystemCoreClockUpdate+0x100>)
  401312:	4b0e      	ldr	r3, [pc, #56]	; (40134c <SystemCoreClockUpdate+0xf4>)
  401314:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401316:	4b0c      	ldr	r3, [pc, #48]	; (401348 <SystemCoreClockUpdate+0xf0>)
  401318:	6a1b      	ldr	r3, [r3, #32]
  40131a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40131e:	2b10      	cmp	r3, #16
  401320:	d005      	beq.n	40132e <SystemCoreClockUpdate+0xd6>
  401322:	2b20      	cmp	r3, #32
  401324:	d1e0      	bne.n	4012e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401326:	4a0b      	ldr	r2, [pc, #44]	; (401354 <SystemCoreClockUpdate+0xfc>)
  401328:	4b08      	ldr	r3, [pc, #32]	; (40134c <SystemCoreClockUpdate+0xf4>)
  40132a:	601a      	str	r2, [r3, #0]
          break;
  40132c:	e7dc      	b.n	4012e8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40132e:	4a0b      	ldr	r2, [pc, #44]	; (40135c <SystemCoreClockUpdate+0x104>)
  401330:	4b06      	ldr	r3, [pc, #24]	; (40134c <SystemCoreClockUpdate+0xf4>)
  401332:	601a      	str	r2, [r3, #0]
          break;
  401334:	e7d8      	b.n	4012e8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401336:	4a05      	ldr	r2, [pc, #20]	; (40134c <SystemCoreClockUpdate+0xf4>)
  401338:	6813      	ldr	r3, [r2, #0]
  40133a:	4909      	ldr	r1, [pc, #36]	; (401360 <SystemCoreClockUpdate+0x108>)
  40133c:	fba1 1303 	umull	r1, r3, r1, r3
  401340:	085b      	lsrs	r3, r3, #1
  401342:	6013      	str	r3, [r2, #0]
  401344:	4770      	bx	lr
  401346:	bf00      	nop
  401348:	400e0600 	.word	0x400e0600
  40134c:	2040000c 	.word	0x2040000c
  401350:	400e1810 	.word	0x400e1810
  401354:	00b71b00 	.word	0x00b71b00
  401358:	003d0900 	.word	0x003d0900
  40135c:	007a1200 	.word	0x007a1200
  401360:	aaaaaaab 	.word	0xaaaaaaab

00401364 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401364:	4b16      	ldr	r3, [pc, #88]	; (4013c0 <system_init_flash+0x5c>)
  401366:	4298      	cmp	r0, r3
  401368:	d913      	bls.n	401392 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40136a:	4b16      	ldr	r3, [pc, #88]	; (4013c4 <system_init_flash+0x60>)
  40136c:	4298      	cmp	r0, r3
  40136e:	d915      	bls.n	40139c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401370:	4b15      	ldr	r3, [pc, #84]	; (4013c8 <system_init_flash+0x64>)
  401372:	4298      	cmp	r0, r3
  401374:	d916      	bls.n	4013a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401376:	4b15      	ldr	r3, [pc, #84]	; (4013cc <system_init_flash+0x68>)
  401378:	4298      	cmp	r0, r3
  40137a:	d917      	bls.n	4013ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40137c:	4b14      	ldr	r3, [pc, #80]	; (4013d0 <system_init_flash+0x6c>)
  40137e:	4298      	cmp	r0, r3
  401380:	d918      	bls.n	4013b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401382:	4b14      	ldr	r3, [pc, #80]	; (4013d4 <system_init_flash+0x70>)
  401384:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401386:	bf94      	ite	ls
  401388:	4a13      	ldrls	r2, [pc, #76]	; (4013d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40138a:	4a14      	ldrhi	r2, [pc, #80]	; (4013dc <system_init_flash+0x78>)
  40138c:	4b14      	ldr	r3, [pc, #80]	; (4013e0 <system_init_flash+0x7c>)
  40138e:	601a      	str	r2, [r3, #0]
  401390:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401392:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401396:	4b12      	ldr	r3, [pc, #72]	; (4013e0 <system_init_flash+0x7c>)
  401398:	601a      	str	r2, [r3, #0]
  40139a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40139c:	4a11      	ldr	r2, [pc, #68]	; (4013e4 <system_init_flash+0x80>)
  40139e:	4b10      	ldr	r3, [pc, #64]	; (4013e0 <system_init_flash+0x7c>)
  4013a0:	601a      	str	r2, [r3, #0]
  4013a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013a4:	4a10      	ldr	r2, [pc, #64]	; (4013e8 <system_init_flash+0x84>)
  4013a6:	4b0e      	ldr	r3, [pc, #56]	; (4013e0 <system_init_flash+0x7c>)
  4013a8:	601a      	str	r2, [r3, #0]
  4013aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013ac:	4a0f      	ldr	r2, [pc, #60]	; (4013ec <system_init_flash+0x88>)
  4013ae:	4b0c      	ldr	r3, [pc, #48]	; (4013e0 <system_init_flash+0x7c>)
  4013b0:	601a      	str	r2, [r3, #0]
  4013b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013b8:	4b09      	ldr	r3, [pc, #36]	; (4013e0 <system_init_flash+0x7c>)
  4013ba:	601a      	str	r2, [r3, #0]
  4013bc:	4770      	bx	lr
  4013be:	bf00      	nop
  4013c0:	015ef3bf 	.word	0x015ef3bf
  4013c4:	02bde77f 	.word	0x02bde77f
  4013c8:	041cdb3f 	.word	0x041cdb3f
  4013cc:	057bceff 	.word	0x057bceff
  4013d0:	06dac2bf 	.word	0x06dac2bf
  4013d4:	0839b67f 	.word	0x0839b67f
  4013d8:	04000500 	.word	0x04000500
  4013dc:	04000600 	.word	0x04000600
  4013e0:	400e0c00 	.word	0x400e0c00
  4013e4:	04000100 	.word	0x04000100
  4013e8:	04000200 	.word	0x04000200
  4013ec:	04000300 	.word	0x04000300

004013f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013f0:	4b0a      	ldr	r3, [pc, #40]	; (40141c <_sbrk+0x2c>)
  4013f2:	681b      	ldr	r3, [r3, #0]
  4013f4:	b153      	cbz	r3, 40140c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4013f6:	4b09      	ldr	r3, [pc, #36]	; (40141c <_sbrk+0x2c>)
  4013f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013fa:	181a      	adds	r2, r3, r0
  4013fc:	4908      	ldr	r1, [pc, #32]	; (401420 <_sbrk+0x30>)
  4013fe:	4291      	cmp	r1, r2
  401400:	db08      	blt.n	401414 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401402:	4610      	mov	r0, r2
  401404:	4a05      	ldr	r2, [pc, #20]	; (40141c <_sbrk+0x2c>)
  401406:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401408:	4618      	mov	r0, r3
  40140a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40140c:	4a05      	ldr	r2, [pc, #20]	; (401424 <_sbrk+0x34>)
  40140e:	4b03      	ldr	r3, [pc, #12]	; (40141c <_sbrk+0x2c>)
  401410:	601a      	str	r2, [r3, #0]
  401412:	e7f0      	b.n	4013f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401414:	f04f 30ff 	mov.w	r0, #4294967295
}
  401418:	4770      	bx	lr
  40141a:	bf00      	nop
  40141c:	20400c5c 	.word	0x20400c5c
  401420:	2045fffc 	.word	0x2045fffc
  401424:	20403058 	.word	0x20403058

00401428 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401428:	f04f 30ff 	mov.w	r0, #4294967295
  40142c:	4770      	bx	lr

0040142e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401432:	604b      	str	r3, [r1, #4]

	return 0;
}
  401434:	2000      	movs	r0, #0
  401436:	4770      	bx	lr

00401438 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401438:	2001      	movs	r0, #1
  40143a:	4770      	bx	lr

0040143c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40143c:	2000      	movs	r0, #0
  40143e:	4770      	bx	lr

00401440 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401440:	f100 0308 	add.w	r3, r0, #8
  401444:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401446:	f04f 32ff 	mov.w	r2, #4294967295
  40144a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40144c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40144e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401450:	2300      	movs	r3, #0
  401452:	6003      	str	r3, [r0, #0]
  401454:	4770      	bx	lr

00401456 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401456:	2300      	movs	r3, #0
  401458:	6103      	str	r3, [r0, #16]
  40145a:	4770      	bx	lr

0040145c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40145c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40145e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401460:	689a      	ldr	r2, [r3, #8]
  401462:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401464:	689a      	ldr	r2, [r3, #8]
  401466:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401468:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40146a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40146c:	6803      	ldr	r3, [r0, #0]
  40146e:	3301      	adds	r3, #1
  401470:	6003      	str	r3, [r0, #0]
  401472:	4770      	bx	lr

00401474 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401474:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401476:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401478:	f1b5 3fff 	cmp.w	r5, #4294967295
  40147c:	d002      	beq.n	401484 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40147e:	f100 0208 	add.w	r2, r0, #8
  401482:	e002      	b.n	40148a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401484:	6902      	ldr	r2, [r0, #16]
  401486:	e004      	b.n	401492 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401488:	461a      	mov	r2, r3
  40148a:	6853      	ldr	r3, [r2, #4]
  40148c:	681c      	ldr	r4, [r3, #0]
  40148e:	42a5      	cmp	r5, r4
  401490:	d2fa      	bcs.n	401488 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401492:	6853      	ldr	r3, [r2, #4]
  401494:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401496:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401498:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40149a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40149c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40149e:	6803      	ldr	r3, [r0, #0]
  4014a0:	3301      	adds	r3, #1
  4014a2:	6003      	str	r3, [r0, #0]
}
  4014a4:	bc30      	pop	{r4, r5}
  4014a6:	4770      	bx	lr

004014a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4014a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4014aa:	6842      	ldr	r2, [r0, #4]
  4014ac:	6881      	ldr	r1, [r0, #8]
  4014ae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4014b0:	6882      	ldr	r2, [r0, #8]
  4014b2:	6841      	ldr	r1, [r0, #4]
  4014b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4014b6:	685a      	ldr	r2, [r3, #4]
  4014b8:	4290      	cmp	r0, r2
  4014ba:	d005      	beq.n	4014c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4014bc:	2200      	movs	r2, #0
  4014be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014c0:	6818      	ldr	r0, [r3, #0]
  4014c2:	3801      	subs	r0, #1
  4014c4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014c8:	6882      	ldr	r2, [r0, #8]
  4014ca:	605a      	str	r2, [r3, #4]
  4014cc:	e7f6      	b.n	4014bc <uxListRemove+0x14>
	...

004014d0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014d0:	4b0d      	ldr	r3, [pc, #52]	; (401508 <prvTaskExitError+0x38>)
  4014d2:	681b      	ldr	r3, [r3, #0]
  4014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014d8:	d00a      	beq.n	4014f0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014de:	b672      	cpsid	i
  4014e0:	f383 8811 	msr	BASEPRI, r3
  4014e4:	f3bf 8f6f 	isb	sy
  4014e8:	f3bf 8f4f 	dsb	sy
  4014ec:	b662      	cpsie	i
  4014ee:	e7fe      	b.n	4014ee <prvTaskExitError+0x1e>
  4014f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014f4:	b672      	cpsid	i
  4014f6:	f383 8811 	msr	BASEPRI, r3
  4014fa:	f3bf 8f6f 	isb	sy
  4014fe:	f3bf 8f4f 	dsb	sy
  401502:	b662      	cpsie	i
  401504:	e7fe      	b.n	401504 <prvTaskExitError+0x34>
  401506:	bf00      	nop
  401508:	20400010 	.word	0x20400010

0040150c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40150c:	4806      	ldr	r0, [pc, #24]	; (401528 <prvPortStartFirstTask+0x1c>)
  40150e:	6800      	ldr	r0, [r0, #0]
  401510:	6800      	ldr	r0, [r0, #0]
  401512:	f380 8808 	msr	MSP, r0
  401516:	b662      	cpsie	i
  401518:	b661      	cpsie	f
  40151a:	f3bf 8f4f 	dsb	sy
  40151e:	f3bf 8f6f 	isb	sy
  401522:	df00      	svc	0
  401524:	bf00      	nop
  401526:	0000      	.short	0x0000
  401528:	e000ed08 	.word	0xe000ed08

0040152c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40152c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40153c <vPortEnableVFP+0x10>
  401530:	6801      	ldr	r1, [r0, #0]
  401532:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401536:	6001      	str	r1, [r0, #0]
  401538:	4770      	bx	lr
  40153a:	0000      	.short	0x0000
  40153c:	e000ed88 	.word	0xe000ed88

00401540 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401544:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401548:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40154c:	4b05      	ldr	r3, [pc, #20]	; (401564 <pxPortInitialiseStack+0x24>)
  40154e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401552:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401556:	f06f 0302 	mvn.w	r3, #2
  40155a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40155e:	3844      	subs	r0, #68	; 0x44
  401560:	4770      	bx	lr
  401562:	bf00      	nop
  401564:	004014d1 	.word	0x004014d1

00401568 <SVC_Handler>:
	__asm volatile (
  401568:	4b06      	ldr	r3, [pc, #24]	; (401584 <pxCurrentTCBConst2>)
  40156a:	6819      	ldr	r1, [r3, #0]
  40156c:	6808      	ldr	r0, [r1, #0]
  40156e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401572:	f380 8809 	msr	PSP, r0
  401576:	f3bf 8f6f 	isb	sy
  40157a:	f04f 0000 	mov.w	r0, #0
  40157e:	f380 8811 	msr	BASEPRI, r0
  401582:	4770      	bx	lr

00401584 <pxCurrentTCBConst2>:
  401584:	20400c68 	.word	0x20400c68
  401588:	4770      	bx	lr
  40158a:	bf00      	nop

0040158c <vPortEnterCritical>:
  40158c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401590:	b672      	cpsid	i
  401592:	f383 8811 	msr	BASEPRI, r3
  401596:	f3bf 8f6f 	isb	sy
  40159a:	f3bf 8f4f 	dsb	sy
  40159e:	b662      	cpsie	i
	uxCriticalNesting++;
  4015a0:	4a0b      	ldr	r2, [pc, #44]	; (4015d0 <vPortEnterCritical+0x44>)
  4015a2:	6813      	ldr	r3, [r2, #0]
  4015a4:	3301      	adds	r3, #1
  4015a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4015a8:	2b01      	cmp	r3, #1
  4015aa:	d10f      	bne.n	4015cc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4015ac:	4b09      	ldr	r3, [pc, #36]	; (4015d4 <vPortEnterCritical+0x48>)
  4015ae:	681b      	ldr	r3, [r3, #0]
  4015b0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015b4:	d00a      	beq.n	4015cc <vPortEnterCritical+0x40>
  4015b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ba:	b672      	cpsid	i
  4015bc:	f383 8811 	msr	BASEPRI, r3
  4015c0:	f3bf 8f6f 	isb	sy
  4015c4:	f3bf 8f4f 	dsb	sy
  4015c8:	b662      	cpsie	i
  4015ca:	e7fe      	b.n	4015ca <vPortEnterCritical+0x3e>
  4015cc:	4770      	bx	lr
  4015ce:	bf00      	nop
  4015d0:	20400010 	.word	0x20400010
  4015d4:	e000ed04 	.word	0xe000ed04

004015d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015d8:	4b0a      	ldr	r3, [pc, #40]	; (401604 <vPortExitCritical+0x2c>)
  4015da:	681b      	ldr	r3, [r3, #0]
  4015dc:	b953      	cbnz	r3, 4015f4 <vPortExitCritical+0x1c>
  4015de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e2:	b672      	cpsid	i
  4015e4:	f383 8811 	msr	BASEPRI, r3
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	f3bf 8f4f 	dsb	sy
  4015f0:	b662      	cpsie	i
  4015f2:	e7fe      	b.n	4015f2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015f4:	3b01      	subs	r3, #1
  4015f6:	4a03      	ldr	r2, [pc, #12]	; (401604 <vPortExitCritical+0x2c>)
  4015f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015fa:	b90b      	cbnz	r3, 401600 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4015fc:	f383 8811 	msr	BASEPRI, r3
  401600:	4770      	bx	lr
  401602:	bf00      	nop
  401604:	20400010 	.word	0x20400010

00401608 <PendSV_Handler>:
	__asm volatile
  401608:	f3ef 8009 	mrs	r0, PSP
  40160c:	f3bf 8f6f 	isb	sy
  401610:	4b15      	ldr	r3, [pc, #84]	; (401668 <pxCurrentTCBConst>)
  401612:	681a      	ldr	r2, [r3, #0]
  401614:	f01e 0f10 	tst.w	lr, #16
  401618:	bf08      	it	eq
  40161a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40161e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401622:	6010      	str	r0, [r2, #0]
  401624:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401628:	f04f 0080 	mov.w	r0, #128	; 0x80
  40162c:	b672      	cpsid	i
  40162e:	f380 8811 	msr	BASEPRI, r0
  401632:	f3bf 8f4f 	dsb	sy
  401636:	f3bf 8f6f 	isb	sy
  40163a:	b662      	cpsie	i
  40163c:	f001 f8fe 	bl	40283c <vTaskSwitchContext>
  401640:	f04f 0000 	mov.w	r0, #0
  401644:	f380 8811 	msr	BASEPRI, r0
  401648:	bc08      	pop	{r3}
  40164a:	6819      	ldr	r1, [r3, #0]
  40164c:	6808      	ldr	r0, [r1, #0]
  40164e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401652:	f01e 0f10 	tst.w	lr, #16
  401656:	bf08      	it	eq
  401658:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40165c:	f380 8809 	msr	PSP, r0
  401660:	f3bf 8f6f 	isb	sy
  401664:	4770      	bx	lr
  401666:	bf00      	nop

00401668 <pxCurrentTCBConst>:
  401668:	20400c68 	.word	0x20400c68
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop

00401670 <SysTick_Handler>:
{
  401670:	b508      	push	{r3, lr}
	__asm volatile
  401672:	f3ef 8311 	mrs	r3, BASEPRI
  401676:	f04f 0280 	mov.w	r2, #128	; 0x80
  40167a:	b672      	cpsid	i
  40167c:	f382 8811 	msr	BASEPRI, r2
  401680:	f3bf 8f6f 	isb	sy
  401684:	f3bf 8f4f 	dsb	sy
  401688:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40168a:	4b05      	ldr	r3, [pc, #20]	; (4016a0 <SysTick_Handler+0x30>)
  40168c:	4798      	blx	r3
  40168e:	b118      	cbz	r0, 401698 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401694:	4b03      	ldr	r3, [pc, #12]	; (4016a4 <SysTick_Handler+0x34>)
  401696:	601a      	str	r2, [r3, #0]
	__asm volatile
  401698:	2300      	movs	r3, #0
  40169a:	f383 8811 	msr	BASEPRI, r3
  40169e:	bd08      	pop	{r3, pc}
  4016a0:	004024a9 	.word	0x004024a9
  4016a4:	e000ed04 	.word	0xe000ed04

004016a8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4016a8:	4a03      	ldr	r2, [pc, #12]	; (4016b8 <vPortSetupTimerInterrupt+0x10>)
  4016aa:	4b04      	ldr	r3, [pc, #16]	; (4016bc <vPortSetupTimerInterrupt+0x14>)
  4016ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4016ae:	2207      	movs	r2, #7
  4016b0:	3b04      	subs	r3, #4
  4016b2:	601a      	str	r2, [r3, #0]
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop
  4016b8:	000927bf 	.word	0x000927bf
  4016bc:	e000e014 	.word	0xe000e014

004016c0 <xPortStartScheduler>:
{
  4016c0:	b500      	push	{lr}
  4016c2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016c4:	4b25      	ldr	r3, [pc, #148]	; (40175c <xPortStartScheduler+0x9c>)
  4016c6:	781a      	ldrb	r2, [r3, #0]
  4016c8:	b2d2      	uxtb	r2, r2
  4016ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016cc:	22ff      	movs	r2, #255	; 0xff
  4016ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016d0:	781b      	ldrb	r3, [r3, #0]
  4016d2:	b2db      	uxtb	r3, r3
  4016d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016e0:	4a1f      	ldr	r2, [pc, #124]	; (401760 <xPortStartScheduler+0xa0>)
  4016e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016e4:	2207      	movs	r2, #7
  4016e6:	4b1f      	ldr	r3, [pc, #124]	; (401764 <xPortStartScheduler+0xa4>)
  4016e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016ee:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016f2:	d010      	beq.n	401716 <xPortStartScheduler+0x56>
  4016f4:	2206      	movs	r2, #6
  4016f6:	e000      	b.n	4016fa <xPortStartScheduler+0x3a>
  4016f8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016fe:	005b      	lsls	r3, r3, #1
  401700:	b2db      	uxtb	r3, r3
  401702:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401706:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40170a:	1e51      	subs	r1, r2, #1
  40170c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401710:	d1f2      	bne.n	4016f8 <xPortStartScheduler+0x38>
  401712:	4b14      	ldr	r3, [pc, #80]	; (401764 <xPortStartScheduler+0xa4>)
  401714:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401716:	4a13      	ldr	r2, [pc, #76]	; (401764 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401718:	6813      	ldr	r3, [r2, #0]
  40171a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40171c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401720:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401722:	9b01      	ldr	r3, [sp, #4]
  401724:	b2db      	uxtb	r3, r3
  401726:	4a0d      	ldr	r2, [pc, #52]	; (40175c <xPortStartScheduler+0x9c>)
  401728:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40172a:	4b0f      	ldr	r3, [pc, #60]	; (401768 <xPortStartScheduler+0xa8>)
  40172c:	681a      	ldr	r2, [r3, #0]
  40172e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401732:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401734:	681a      	ldr	r2, [r3, #0]
  401736:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40173a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40173c:	4b0b      	ldr	r3, [pc, #44]	; (40176c <xPortStartScheduler+0xac>)
  40173e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401740:	2200      	movs	r2, #0
  401742:	4b0b      	ldr	r3, [pc, #44]	; (401770 <xPortStartScheduler+0xb0>)
  401744:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401746:	4b0b      	ldr	r3, [pc, #44]	; (401774 <xPortStartScheduler+0xb4>)
  401748:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40174a:	4a0b      	ldr	r2, [pc, #44]	; (401778 <xPortStartScheduler+0xb8>)
  40174c:	6813      	ldr	r3, [r2, #0]
  40174e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401752:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401754:	4b09      	ldr	r3, [pc, #36]	; (40177c <xPortStartScheduler+0xbc>)
  401756:	4798      	blx	r3
	prvTaskExitError();
  401758:	4b09      	ldr	r3, [pc, #36]	; (401780 <xPortStartScheduler+0xc0>)
  40175a:	4798      	blx	r3
  40175c:	e000e400 	.word	0xe000e400
  401760:	20400c60 	.word	0x20400c60
  401764:	20400c64 	.word	0x20400c64
  401768:	e000ed20 	.word	0xe000ed20
  40176c:	004016a9 	.word	0x004016a9
  401770:	20400010 	.word	0x20400010
  401774:	0040152d 	.word	0x0040152d
  401778:	e000ef34 	.word	0xe000ef34
  40177c:	0040150d 	.word	0x0040150d
  401780:	004014d1 	.word	0x004014d1

00401784 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401784:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401788:	2b0f      	cmp	r3, #15
  40178a:	d911      	bls.n	4017b0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40178c:	4a12      	ldr	r2, [pc, #72]	; (4017d8 <vPortValidateInterruptPriority+0x54>)
  40178e:	5c9b      	ldrb	r3, [r3, r2]
  401790:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401792:	4a12      	ldr	r2, [pc, #72]	; (4017dc <vPortValidateInterruptPriority+0x58>)
  401794:	7812      	ldrb	r2, [r2, #0]
  401796:	429a      	cmp	r2, r3
  401798:	d90a      	bls.n	4017b0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40179a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40179e:	b672      	cpsid	i
  4017a0:	f383 8811 	msr	BASEPRI, r3
  4017a4:	f3bf 8f6f 	isb	sy
  4017a8:	f3bf 8f4f 	dsb	sy
  4017ac:	b662      	cpsie	i
  4017ae:	e7fe      	b.n	4017ae <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4017b0:	4b0b      	ldr	r3, [pc, #44]	; (4017e0 <vPortValidateInterruptPriority+0x5c>)
  4017b2:	681b      	ldr	r3, [r3, #0]
  4017b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4017b8:	4a0a      	ldr	r2, [pc, #40]	; (4017e4 <vPortValidateInterruptPriority+0x60>)
  4017ba:	6812      	ldr	r2, [r2, #0]
  4017bc:	4293      	cmp	r3, r2
  4017be:	d90a      	bls.n	4017d6 <vPortValidateInterruptPriority+0x52>
  4017c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c4:	b672      	cpsid	i
  4017c6:	f383 8811 	msr	BASEPRI, r3
  4017ca:	f3bf 8f6f 	isb	sy
  4017ce:	f3bf 8f4f 	dsb	sy
  4017d2:	b662      	cpsie	i
  4017d4:	e7fe      	b.n	4017d4 <vPortValidateInterruptPriority+0x50>
  4017d6:	4770      	bx	lr
  4017d8:	e000e3f0 	.word	0xe000e3f0
  4017dc:	20400c60 	.word	0x20400c60
  4017e0:	e000ed0c 	.word	0xe000ed0c
  4017e4:	20400c64 	.word	0x20400c64

004017e8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017e8:	b510      	push	{r4, lr}
  4017ea:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4017ec:	4b06      	ldr	r3, [pc, #24]	; (401808 <pvPortMalloc+0x20>)
  4017ee:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4017f0:	4620      	mov	r0, r4
  4017f2:	4b06      	ldr	r3, [pc, #24]	; (40180c <pvPortMalloc+0x24>)
  4017f4:	4798      	blx	r3
  4017f6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4017f8:	4b05      	ldr	r3, [pc, #20]	; (401810 <pvPortMalloc+0x28>)
  4017fa:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4017fc:	b10c      	cbz	r4, 401802 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4017fe:	4620      	mov	r0, r4
  401800:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401802:	4b04      	ldr	r3, [pc, #16]	; (401814 <pvPortMalloc+0x2c>)
  401804:	4798      	blx	r3
	return pvReturn;
  401806:	e7fa      	b.n	4017fe <pvPortMalloc+0x16>
  401808:	0040248d 	.word	0x0040248d
  40180c:	004044b9 	.word	0x004044b9
  401810:	004025f5 	.word	0x004025f5
  401814:	00403447 	.word	0x00403447

00401818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401818:	b148      	cbz	r0, 40182e <vPortFree+0x16>
{
  40181a:	b510      	push	{r4, lr}
  40181c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40181e:	4b04      	ldr	r3, [pc, #16]	; (401830 <vPortFree+0x18>)
  401820:	4798      	blx	r3
		{
			free( pv );
  401822:	4620      	mov	r0, r4
  401824:	4b03      	ldr	r3, [pc, #12]	; (401834 <vPortFree+0x1c>)
  401826:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401828:	4b03      	ldr	r3, [pc, #12]	; (401838 <vPortFree+0x20>)
  40182a:	4798      	blx	r3
  40182c:	bd10      	pop	{r4, pc}
  40182e:	4770      	bx	lr
  401830:	0040248d 	.word	0x0040248d
  401834:	004044c9 	.word	0x004044c9
  401838:	004025f5 	.word	0x004025f5

0040183c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40183c:	b538      	push	{r3, r4, r5, lr}
  40183e:	4604      	mov	r4, r0
  401840:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401842:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401844:	b95a      	cbnz	r2, 40185e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401846:	6803      	ldr	r3, [r0, #0]
  401848:	2b00      	cmp	r3, #0
  40184a:	d12e      	bne.n	4018aa <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40184c:	6840      	ldr	r0, [r0, #4]
  40184e:	4b1b      	ldr	r3, [pc, #108]	; (4018bc <prvCopyDataToQueue+0x80>)
  401850:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401852:	2300      	movs	r3, #0
  401854:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401858:	3301      	adds	r3, #1
  40185a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40185c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40185e:	b96d      	cbnz	r5, 40187c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401860:	6880      	ldr	r0, [r0, #8]
  401862:	4b17      	ldr	r3, [pc, #92]	; (4018c0 <prvCopyDataToQueue+0x84>)
  401864:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401866:	68a3      	ldr	r3, [r4, #8]
  401868:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40186a:	4413      	add	r3, r2
  40186c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40186e:	6862      	ldr	r2, [r4, #4]
  401870:	4293      	cmp	r3, r2
  401872:	d31c      	bcc.n	4018ae <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401874:	6823      	ldr	r3, [r4, #0]
  401876:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401878:	2000      	movs	r0, #0
  40187a:	e7ec      	b.n	401856 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40187c:	68c0      	ldr	r0, [r0, #12]
  40187e:	4b10      	ldr	r3, [pc, #64]	; (4018c0 <prvCopyDataToQueue+0x84>)
  401880:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401882:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401884:	425b      	negs	r3, r3
  401886:	68e2      	ldr	r2, [r4, #12]
  401888:	441a      	add	r2, r3
  40188a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40188c:	6821      	ldr	r1, [r4, #0]
  40188e:	428a      	cmp	r2, r1
  401890:	d202      	bcs.n	401898 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401892:	6862      	ldr	r2, [r4, #4]
  401894:	4413      	add	r3, r2
  401896:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401898:	2d02      	cmp	r5, #2
  40189a:	d10a      	bne.n	4018b2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40189c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40189e:	b153      	cbz	r3, 4018b6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a2:	3b01      	subs	r3, #1
  4018a4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4018a6:	2000      	movs	r0, #0
  4018a8:	e7d5      	b.n	401856 <prvCopyDataToQueue+0x1a>
  4018aa:	2000      	movs	r0, #0
  4018ac:	e7d3      	b.n	401856 <prvCopyDataToQueue+0x1a>
  4018ae:	2000      	movs	r0, #0
  4018b0:	e7d1      	b.n	401856 <prvCopyDataToQueue+0x1a>
  4018b2:	2000      	movs	r0, #0
  4018b4:	e7cf      	b.n	401856 <prvCopyDataToQueue+0x1a>
  4018b6:	2000      	movs	r0, #0
  4018b8:	e7cd      	b.n	401856 <prvCopyDataToQueue+0x1a>
  4018ba:	bf00      	nop
  4018bc:	00402c3d 	.word	0x00402c3d
  4018c0:	00404a39 	.word	0x00404a39

004018c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4018c4:	b530      	push	{r4, r5, lr}
  4018c6:	b083      	sub	sp, #12
  4018c8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4018ca:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4018cc:	b174      	cbz	r4, 4018ec <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4018ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018d2:	429a      	cmp	r2, r3
  4018d4:	d315      	bcc.n	401902 <prvNotifyQueueSetContainer+0x3e>
  4018d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018da:	b672      	cpsid	i
  4018dc:	f383 8811 	msr	BASEPRI, r3
  4018e0:	f3bf 8f6f 	isb	sy
  4018e4:	f3bf 8f4f 	dsb	sy
  4018e8:	b662      	cpsie	i
  4018ea:	e7fe      	b.n	4018ea <prvNotifyQueueSetContainer+0x26>
  4018ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f0:	b672      	cpsid	i
  4018f2:	f383 8811 	msr	BASEPRI, r3
  4018f6:	f3bf 8f6f 	isb	sy
  4018fa:	f3bf 8f4f 	dsb	sy
  4018fe:	b662      	cpsie	i
  401900:	e7fe      	b.n	401900 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401902:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401904:	4293      	cmp	r3, r2
  401906:	d803      	bhi.n	401910 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401908:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40190a:	4628      	mov	r0, r5
  40190c:	b003      	add	sp, #12
  40190e:	bd30      	pop	{r4, r5, pc}
  401910:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401912:	a901      	add	r1, sp, #4
  401914:	4620      	mov	r0, r4
  401916:	4b0b      	ldr	r3, [pc, #44]	; (401944 <prvNotifyQueueSetContainer+0x80>)
  401918:	4798      	blx	r3
  40191a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40191c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40191e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401922:	d10a      	bne.n	40193a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401924:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401926:	2b00      	cmp	r3, #0
  401928:	d0ef      	beq.n	40190a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40192a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40192e:	4b06      	ldr	r3, [pc, #24]	; (401948 <prvNotifyQueueSetContainer+0x84>)
  401930:	4798      	blx	r3
  401932:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401934:	bf18      	it	ne
  401936:	2501      	movne	r5, #1
  401938:	e7e7      	b.n	40190a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40193a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40193c:	3301      	adds	r3, #1
  40193e:	64a3      	str	r3, [r4, #72]	; 0x48
  401940:	e7e3      	b.n	40190a <prvNotifyQueueSetContainer+0x46>
  401942:	bf00      	nop
  401944:	0040183d 	.word	0x0040183d
  401948:	00402a11 	.word	0x00402a11

0040194c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40194c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40194e:	b172      	cbz	r2, 40196e <prvCopyDataFromQueue+0x22>
{
  401950:	b510      	push	{r4, lr}
  401952:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401954:	68c4      	ldr	r4, [r0, #12]
  401956:	4414      	add	r4, r2
  401958:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40195a:	6840      	ldr	r0, [r0, #4]
  40195c:	4284      	cmp	r4, r0
  40195e:	d301      	bcc.n	401964 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401960:	6818      	ldr	r0, [r3, #0]
  401962:	60d8      	str	r0, [r3, #12]
  401964:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401966:	68d9      	ldr	r1, [r3, #12]
  401968:	4b01      	ldr	r3, [pc, #4]	; (401970 <prvCopyDataFromQueue+0x24>)
  40196a:	4798      	blx	r3
  40196c:	bd10      	pop	{r4, pc}
  40196e:	4770      	bx	lr
  401970:	00404a39 	.word	0x00404a39

00401974 <prvUnlockQueue>:
{
  401974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401976:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401978:	4b22      	ldr	r3, [pc, #136]	; (401a04 <prvUnlockQueue+0x90>)
  40197a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40197c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40197e:	2b00      	cmp	r3, #0
  401980:	dd1b      	ble.n	4019ba <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401982:	4d21      	ldr	r5, [pc, #132]	; (401a08 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401984:	4f21      	ldr	r7, [pc, #132]	; (401a0c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401986:	4e22      	ldr	r6, [pc, #136]	; (401a10 <prvUnlockQueue+0x9c>)
  401988:	e00b      	b.n	4019a2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40198a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40198c:	b1ab      	cbz	r3, 4019ba <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40198e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401992:	47b0      	blx	r6
  401994:	b978      	cbnz	r0, 4019b6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401998:	3b01      	subs	r3, #1
  40199a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40199c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40199e:	2b00      	cmp	r3, #0
  4019a0:	dd0b      	ble.n	4019ba <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019a4:	2b00      	cmp	r3, #0
  4019a6:	d0f0      	beq.n	40198a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019a8:	2100      	movs	r1, #0
  4019aa:	4620      	mov	r0, r4
  4019ac:	47a8      	blx	r5
  4019ae:	2801      	cmp	r0, #1
  4019b0:	d1f1      	bne.n	401996 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4019b2:	47b8      	blx	r7
  4019b4:	e7ef      	b.n	401996 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4019b6:	47b8      	blx	r7
  4019b8:	e7ed      	b.n	401996 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4019ba:	f04f 33ff 	mov.w	r3, #4294967295
  4019be:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4019c0:	4b14      	ldr	r3, [pc, #80]	; (401a14 <prvUnlockQueue+0xa0>)
  4019c2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4019c4:	4b0f      	ldr	r3, [pc, #60]	; (401a04 <prvUnlockQueue+0x90>)
  4019c6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	dd14      	ble.n	4019f8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019ce:	6923      	ldr	r3, [r4, #16]
  4019d0:	b193      	cbz	r3, 4019f8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019d2:	f104 0610 	add.w	r6, r4, #16
  4019d6:	4d0e      	ldr	r5, [pc, #56]	; (401a10 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4019d8:	4f0c      	ldr	r7, [pc, #48]	; (401a0c <prvUnlockQueue+0x98>)
  4019da:	e007      	b.n	4019ec <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4019dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019de:	3b01      	subs	r3, #1
  4019e0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e4:	2b00      	cmp	r3, #0
  4019e6:	dd07      	ble.n	4019f8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019e8:	6923      	ldr	r3, [r4, #16]
  4019ea:	b12b      	cbz	r3, 4019f8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019ec:	4630      	mov	r0, r6
  4019ee:	47a8      	blx	r5
  4019f0:	2800      	cmp	r0, #0
  4019f2:	d0f3      	beq.n	4019dc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4019f4:	47b8      	blx	r7
  4019f6:	e7f1      	b.n	4019dc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4019f8:	f04f 33ff 	mov.w	r3, #4294967295
  4019fc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4019fe:	4b05      	ldr	r3, [pc, #20]	; (401a14 <prvUnlockQueue+0xa0>)
  401a00:	4798      	blx	r3
  401a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a04:	0040158d 	.word	0x0040158d
  401a08:	004018c5 	.word	0x004018c5
  401a0c:	00402b6d 	.word	0x00402b6d
  401a10:	00402a11 	.word	0x00402a11
  401a14:	004015d9 	.word	0x004015d9

00401a18 <xQueueGenericReset>:
{
  401a18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a1a:	b308      	cbz	r0, 401a60 <xQueueGenericReset+0x48>
  401a1c:	4604      	mov	r4, r0
  401a1e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a20:	4b1d      	ldr	r3, [pc, #116]	; (401a98 <xQueueGenericReset+0x80>)
  401a22:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a24:	6822      	ldr	r2, [r4, #0]
  401a26:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401a28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a2a:	fb03 f301 	mul.w	r3, r3, r1
  401a2e:	18d0      	adds	r0, r2, r3
  401a30:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a32:	2000      	movs	r0, #0
  401a34:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a36:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a38:	1a5b      	subs	r3, r3, r1
  401a3a:	4413      	add	r3, r2
  401a3c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a3e:	f04f 33ff 	mov.w	r3, #4294967295
  401a42:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a44:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a46:	b9fd      	cbnz	r5, 401a88 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a48:	6923      	ldr	r3, [r4, #16]
  401a4a:	b12b      	cbz	r3, 401a58 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a4c:	f104 0010 	add.w	r0, r4, #16
  401a50:	4b12      	ldr	r3, [pc, #72]	; (401a9c <xQueueGenericReset+0x84>)
  401a52:	4798      	blx	r3
  401a54:	2801      	cmp	r0, #1
  401a56:	d00e      	beq.n	401a76 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401a58:	4b11      	ldr	r3, [pc, #68]	; (401aa0 <xQueueGenericReset+0x88>)
  401a5a:	4798      	blx	r3
}
  401a5c:	2001      	movs	r0, #1
  401a5e:	bd38      	pop	{r3, r4, r5, pc}
  401a60:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a64:	b672      	cpsid	i
  401a66:	f383 8811 	msr	BASEPRI, r3
  401a6a:	f3bf 8f6f 	isb	sy
  401a6e:	f3bf 8f4f 	dsb	sy
  401a72:	b662      	cpsie	i
  401a74:	e7fe      	b.n	401a74 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a7a:	4b0a      	ldr	r3, [pc, #40]	; (401aa4 <xQueueGenericReset+0x8c>)
  401a7c:	601a      	str	r2, [r3, #0]
  401a7e:	f3bf 8f4f 	dsb	sy
  401a82:	f3bf 8f6f 	isb	sy
  401a86:	e7e7      	b.n	401a58 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a88:	f104 0010 	add.w	r0, r4, #16
  401a8c:	4d06      	ldr	r5, [pc, #24]	; (401aa8 <xQueueGenericReset+0x90>)
  401a8e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a94:	47a8      	blx	r5
  401a96:	e7df      	b.n	401a58 <xQueueGenericReset+0x40>
  401a98:	0040158d 	.word	0x0040158d
  401a9c:	00402a11 	.word	0x00402a11
  401aa0:	004015d9 	.word	0x004015d9
  401aa4:	e000ed04 	.word	0xe000ed04
  401aa8:	00401441 	.word	0x00401441

00401aac <xQueueGenericCreate>:
{
  401aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401aae:	b950      	cbnz	r0, 401ac6 <xQueueGenericCreate+0x1a>
  401ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab4:	b672      	cpsid	i
  401ab6:	f383 8811 	msr	BASEPRI, r3
  401aba:	f3bf 8f6f 	isb	sy
  401abe:	f3bf 8f4f 	dsb	sy
  401ac2:	b662      	cpsie	i
  401ac4:	e7fe      	b.n	401ac4 <xQueueGenericCreate+0x18>
  401ac6:	4606      	mov	r6, r0
  401ac8:	4617      	mov	r7, r2
  401aca:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401acc:	b189      	cbz	r1, 401af2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ace:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401ad2:	3059      	adds	r0, #89	; 0x59
  401ad4:	4b12      	ldr	r3, [pc, #72]	; (401b20 <xQueueGenericCreate+0x74>)
  401ad6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401ad8:	4604      	mov	r4, r0
  401ada:	b9e8      	cbnz	r0, 401b18 <xQueueGenericCreate+0x6c>
  401adc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae0:	b672      	cpsid	i
  401ae2:	f383 8811 	msr	BASEPRI, r3
  401ae6:	f3bf 8f6f 	isb	sy
  401aea:	f3bf 8f4f 	dsb	sy
  401aee:	b662      	cpsie	i
  401af0:	e7fe      	b.n	401af0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401af2:	2058      	movs	r0, #88	; 0x58
  401af4:	4b0a      	ldr	r3, [pc, #40]	; (401b20 <xQueueGenericCreate+0x74>)
  401af6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401af8:	4604      	mov	r4, r0
  401afa:	2800      	cmp	r0, #0
  401afc:	d0ee      	beq.n	401adc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401afe:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b00:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b02:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b04:	2101      	movs	r1, #1
  401b06:	4620      	mov	r0, r4
  401b08:	4b06      	ldr	r3, [pc, #24]	; (401b24 <xQueueGenericCreate+0x78>)
  401b0a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b0c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b10:	2300      	movs	r3, #0
  401b12:	6563      	str	r3, [r4, #84]	; 0x54
}
  401b14:	4620      	mov	r0, r4
  401b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b18:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b1c:	6003      	str	r3, [r0, #0]
  401b1e:	e7ef      	b.n	401b00 <xQueueGenericCreate+0x54>
  401b20:	004017e9 	.word	0x004017e9
  401b24:	00401a19 	.word	0x00401a19

00401b28 <xQueueGenericSend>:
{
  401b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b2c:	b085      	sub	sp, #20
  401b2e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b30:	b1b8      	cbz	r0, 401b62 <xQueueGenericSend+0x3a>
  401b32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b34:	b301      	cbz	r1, 401b78 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b36:	2b02      	cmp	r3, #2
  401b38:	d02c      	beq.n	401b94 <xQueueGenericSend+0x6c>
  401b3a:	461d      	mov	r5, r3
  401b3c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b3e:	4b66      	ldr	r3, [pc, #408]	; (401cd8 <xQueueGenericSend+0x1b0>)
  401b40:	4798      	blx	r3
  401b42:	2800      	cmp	r0, #0
  401b44:	d134      	bne.n	401bb0 <xQueueGenericSend+0x88>
  401b46:	9b01      	ldr	r3, [sp, #4]
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d038      	beq.n	401bbe <xQueueGenericSend+0x96>
  401b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b50:	b672      	cpsid	i
  401b52:	f383 8811 	msr	BASEPRI, r3
  401b56:	f3bf 8f6f 	isb	sy
  401b5a:	f3bf 8f4f 	dsb	sy
  401b5e:	b662      	cpsie	i
  401b60:	e7fe      	b.n	401b60 <xQueueGenericSend+0x38>
  401b62:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b66:	b672      	cpsid	i
  401b68:	f383 8811 	msr	BASEPRI, r3
  401b6c:	f3bf 8f6f 	isb	sy
  401b70:	f3bf 8f4f 	dsb	sy
  401b74:	b662      	cpsie	i
  401b76:	e7fe      	b.n	401b76 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b78:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b7a:	2a00      	cmp	r2, #0
  401b7c:	d0db      	beq.n	401b36 <xQueueGenericSend+0xe>
  401b7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b82:	b672      	cpsid	i
  401b84:	f383 8811 	msr	BASEPRI, r3
  401b88:	f3bf 8f6f 	isb	sy
  401b8c:	f3bf 8f4f 	dsb	sy
  401b90:	b662      	cpsie	i
  401b92:	e7fe      	b.n	401b92 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401b96:	2a01      	cmp	r2, #1
  401b98:	d0cf      	beq.n	401b3a <xQueueGenericSend+0x12>
  401b9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b9e:	b672      	cpsid	i
  401ba0:	f383 8811 	msr	BASEPRI, r3
  401ba4:	f3bf 8f6f 	isb	sy
  401ba8:	f3bf 8f4f 	dsb	sy
  401bac:	b662      	cpsie	i
  401bae:	e7fe      	b.n	401bae <xQueueGenericSend+0x86>
  401bb0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401bb2:	4e4a      	ldr	r6, [pc, #296]	; (401cdc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401bb4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401d08 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401bb8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401ce8 <xQueueGenericSend+0x1c0>
  401bbc:	e042      	b.n	401c44 <xQueueGenericSend+0x11c>
  401bbe:	2700      	movs	r7, #0
  401bc0:	e7f7      	b.n	401bb2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401bc2:	462a      	mov	r2, r5
  401bc4:	4641      	mov	r1, r8
  401bc6:	4620      	mov	r0, r4
  401bc8:	4b45      	ldr	r3, [pc, #276]	; (401ce0 <xQueueGenericSend+0x1b8>)
  401bca:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401bce:	b19b      	cbz	r3, 401bf8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401bd0:	4629      	mov	r1, r5
  401bd2:	4620      	mov	r0, r4
  401bd4:	4b43      	ldr	r3, [pc, #268]	; (401ce4 <xQueueGenericSend+0x1bc>)
  401bd6:	4798      	blx	r3
  401bd8:	2801      	cmp	r0, #1
  401bda:	d107      	bne.n	401bec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be0:	4b41      	ldr	r3, [pc, #260]	; (401ce8 <xQueueGenericSend+0x1c0>)
  401be2:	601a      	str	r2, [r3, #0]
  401be4:	f3bf 8f4f 	dsb	sy
  401be8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bec:	4b3f      	ldr	r3, [pc, #252]	; (401cec <xQueueGenericSend+0x1c4>)
  401bee:	4798      	blx	r3
				return pdPASS;
  401bf0:	2001      	movs	r0, #1
}
  401bf2:	b005      	add	sp, #20
  401bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bfa:	b173      	cbz	r3, 401c1a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c00:	4b3b      	ldr	r3, [pc, #236]	; (401cf0 <xQueueGenericSend+0x1c8>)
  401c02:	4798      	blx	r3
  401c04:	2801      	cmp	r0, #1
  401c06:	d1f1      	bne.n	401bec <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c0c:	4b36      	ldr	r3, [pc, #216]	; (401ce8 <xQueueGenericSend+0x1c0>)
  401c0e:	601a      	str	r2, [r3, #0]
  401c10:	f3bf 8f4f 	dsb	sy
  401c14:	f3bf 8f6f 	isb	sy
  401c18:	e7e8      	b.n	401bec <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c1a:	2800      	cmp	r0, #0
  401c1c:	d0e6      	beq.n	401bec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c22:	4b31      	ldr	r3, [pc, #196]	; (401ce8 <xQueueGenericSend+0x1c0>)
  401c24:	601a      	str	r2, [r3, #0]
  401c26:	f3bf 8f4f 	dsb	sy
  401c2a:	f3bf 8f6f 	isb	sy
  401c2e:	e7dd      	b.n	401bec <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c30:	4b2e      	ldr	r3, [pc, #184]	; (401cec <xQueueGenericSend+0x1c4>)
  401c32:	4798      	blx	r3
					return errQUEUE_FULL;
  401c34:	2000      	movs	r0, #0
  401c36:	e7dc      	b.n	401bf2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c38:	4620      	mov	r0, r4
  401c3a:	4b2e      	ldr	r3, [pc, #184]	; (401cf4 <xQueueGenericSend+0x1cc>)
  401c3c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c3e:	4b2e      	ldr	r3, [pc, #184]	; (401cf8 <xQueueGenericSend+0x1d0>)
  401c40:	4798      	blx	r3
  401c42:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c44:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c4a:	429a      	cmp	r2, r3
  401c4c:	d3b9      	bcc.n	401bc2 <xQueueGenericSend+0x9a>
  401c4e:	2d02      	cmp	r5, #2
  401c50:	d0b7      	beq.n	401bc2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c52:	9b01      	ldr	r3, [sp, #4]
  401c54:	2b00      	cmp	r3, #0
  401c56:	d0eb      	beq.n	401c30 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401c58:	b90f      	cbnz	r7, 401c5e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401c5a:	a802      	add	r0, sp, #8
  401c5c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c5e:	4b23      	ldr	r3, [pc, #140]	; (401cec <xQueueGenericSend+0x1c4>)
  401c60:	4798      	blx	r3
		vTaskSuspendAll();
  401c62:	4b26      	ldr	r3, [pc, #152]	; (401cfc <xQueueGenericSend+0x1d4>)
  401c64:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c66:	47b0      	blx	r6
  401c68:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c6e:	d101      	bne.n	401c74 <xQueueGenericSend+0x14c>
  401c70:	2300      	movs	r3, #0
  401c72:	6463      	str	r3, [r4, #68]	; 0x44
  401c74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c76:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c7a:	d101      	bne.n	401c80 <xQueueGenericSend+0x158>
  401c7c:	2300      	movs	r3, #0
  401c7e:	64a3      	str	r3, [r4, #72]	; 0x48
  401c80:	4b1a      	ldr	r3, [pc, #104]	; (401cec <xQueueGenericSend+0x1c4>)
  401c82:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c84:	a901      	add	r1, sp, #4
  401c86:	a802      	add	r0, sp, #8
  401c88:	4b1d      	ldr	r3, [pc, #116]	; (401d00 <xQueueGenericSend+0x1d8>)
  401c8a:	4798      	blx	r3
  401c8c:	b9e0      	cbnz	r0, 401cc8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401c8e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401c90:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401c94:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401c96:	4b15      	ldr	r3, [pc, #84]	; (401cec <xQueueGenericSend+0x1c4>)
  401c98:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401c9a:	45bb      	cmp	fp, r7
  401c9c:	d1cc      	bne.n	401c38 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401c9e:	9901      	ldr	r1, [sp, #4]
  401ca0:	f104 0010 	add.w	r0, r4, #16
  401ca4:	4b17      	ldr	r3, [pc, #92]	; (401d04 <xQueueGenericSend+0x1dc>)
  401ca6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401ca8:	4620      	mov	r0, r4
  401caa:	4b12      	ldr	r3, [pc, #72]	; (401cf4 <xQueueGenericSend+0x1cc>)
  401cac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cae:	4b12      	ldr	r3, [pc, #72]	; (401cf8 <xQueueGenericSend+0x1d0>)
  401cb0:	4798      	blx	r3
  401cb2:	2800      	cmp	r0, #0
  401cb4:	d1c5      	bne.n	401c42 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401cb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cba:	f8c9 3000 	str.w	r3, [r9]
  401cbe:	f3bf 8f4f 	dsb	sy
  401cc2:	f3bf 8f6f 	isb	sy
  401cc6:	e7bc      	b.n	401c42 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401cc8:	4620      	mov	r0, r4
  401cca:	4b0a      	ldr	r3, [pc, #40]	; (401cf4 <xQueueGenericSend+0x1cc>)
  401ccc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cce:	4b0a      	ldr	r3, [pc, #40]	; (401cf8 <xQueueGenericSend+0x1d0>)
  401cd0:	4798      	blx	r3
			return errQUEUE_FULL;
  401cd2:	2000      	movs	r0, #0
  401cd4:	e78d      	b.n	401bf2 <xQueueGenericSend+0xca>
  401cd6:	bf00      	nop
  401cd8:	00402b79 	.word	0x00402b79
  401cdc:	0040158d 	.word	0x0040158d
  401ce0:	0040183d 	.word	0x0040183d
  401ce4:	004018c5 	.word	0x004018c5
  401ce8:	e000ed04 	.word	0xe000ed04
  401cec:	004015d9 	.word	0x004015d9
  401cf0:	00402a11 	.word	0x00402a11
  401cf4:	00401975 	.word	0x00401975
  401cf8:	004025f5 	.word	0x004025f5
  401cfc:	0040248d 	.word	0x0040248d
  401d00:	00402ad9 	.word	0x00402ad9
  401d04:	0040290d 	.word	0x0040290d
  401d08:	00402aa9 	.word	0x00402aa9

00401d0c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d0c:	2800      	cmp	r0, #0
  401d0e:	d036      	beq.n	401d7e <xQueueGenericSendFromISR+0x72>
{
  401d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d14:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d16:	2900      	cmp	r1, #0
  401d18:	d03c      	beq.n	401d94 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d1a:	2b02      	cmp	r3, #2
  401d1c:	d048      	beq.n	401db0 <xQueueGenericSendFromISR+0xa4>
  401d1e:	461e      	mov	r6, r3
  401d20:	4615      	mov	r5, r2
  401d22:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401d24:	4b35      	ldr	r3, [pc, #212]	; (401dfc <xQueueGenericSendFromISR+0xf0>)
  401d26:	4798      	blx	r3
	__asm volatile
  401d28:	f3ef 8711 	mrs	r7, BASEPRI
  401d2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d30:	b672      	cpsid	i
  401d32:	f383 8811 	msr	BASEPRI, r3
  401d36:	f3bf 8f6f 	isb	sy
  401d3a:	f3bf 8f4f 	dsb	sy
  401d3e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401d40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d44:	429a      	cmp	r2, r3
  401d46:	d301      	bcc.n	401d4c <xQueueGenericSendFromISR+0x40>
  401d48:	2e02      	cmp	r6, #2
  401d4a:	d14f      	bne.n	401dec <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401d4c:	4632      	mov	r2, r6
  401d4e:	4641      	mov	r1, r8
  401d50:	4620      	mov	r0, r4
  401d52:	4b2b      	ldr	r3, [pc, #172]	; (401e00 <xQueueGenericSendFromISR+0xf4>)
  401d54:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401d56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d58:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d5c:	d141      	bne.n	401de2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401d5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d60:	2b00      	cmp	r3, #0
  401d62:	d033      	beq.n	401dcc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401d64:	4631      	mov	r1, r6
  401d66:	4620      	mov	r0, r4
  401d68:	4b26      	ldr	r3, [pc, #152]	; (401e04 <xQueueGenericSendFromISR+0xf8>)
  401d6a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401d6c:	2d00      	cmp	r5, #0
  401d6e:	d03f      	beq.n	401df0 <xQueueGenericSendFromISR+0xe4>
  401d70:	2801      	cmp	r0, #1
  401d72:	d13d      	bne.n	401df0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401d74:	6028      	str	r0, [r5, #0]
	__asm volatile
  401d76:	f387 8811 	msr	BASEPRI, r7
}
  401d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401d7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d82:	b672      	cpsid	i
  401d84:	f383 8811 	msr	BASEPRI, r3
  401d88:	f3bf 8f6f 	isb	sy
  401d8c:	f3bf 8f4f 	dsb	sy
  401d90:	b662      	cpsie	i
  401d92:	e7fe      	b.n	401d92 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d94:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d96:	2800      	cmp	r0, #0
  401d98:	d0bf      	beq.n	401d1a <xQueueGenericSendFromISR+0xe>
  401d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d9e:	b672      	cpsid	i
  401da0:	f383 8811 	msr	BASEPRI, r3
  401da4:	f3bf 8f6f 	isb	sy
  401da8:	f3bf 8f4f 	dsb	sy
  401dac:	b662      	cpsie	i
  401dae:	e7fe      	b.n	401dae <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401db0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401db2:	2801      	cmp	r0, #1
  401db4:	d0b3      	beq.n	401d1e <xQueueGenericSendFromISR+0x12>
  401db6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dba:	b672      	cpsid	i
  401dbc:	f383 8811 	msr	BASEPRI, r3
  401dc0:	f3bf 8f6f 	isb	sy
  401dc4:	f3bf 8f4f 	dsb	sy
  401dc8:	b662      	cpsie	i
  401dca:	e7fe      	b.n	401dca <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401dce:	b18b      	cbz	r3, 401df4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401dd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401dd4:	4b0c      	ldr	r3, [pc, #48]	; (401e08 <xQueueGenericSendFromISR+0xfc>)
  401dd6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401dd8:	b175      	cbz	r5, 401df8 <xQueueGenericSendFromISR+0xec>
  401dda:	b168      	cbz	r0, 401df8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ddc:	2001      	movs	r0, #1
  401dde:	6028      	str	r0, [r5, #0]
  401de0:	e7c9      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401de2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401de4:	3301      	adds	r3, #1
  401de6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401de8:	2001      	movs	r0, #1
  401dea:	e7c4      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401dec:	2000      	movs	r0, #0
  401dee:	e7c2      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401df0:	2001      	movs	r0, #1
  401df2:	e7c0      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
  401df4:	2001      	movs	r0, #1
  401df6:	e7be      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
  401df8:	2001      	movs	r0, #1
  401dfa:	e7bc      	b.n	401d76 <xQueueGenericSendFromISR+0x6a>
  401dfc:	00401785 	.word	0x00401785
  401e00:	0040183d 	.word	0x0040183d
  401e04:	004018c5 	.word	0x004018c5
  401e08:	00402a11 	.word	0x00402a11

00401e0c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401e0c:	b170      	cbz	r0, 401e2c <xQueueGiveFromISR+0x20>
{
  401e0e:	b570      	push	{r4, r5, r6, lr}
  401e10:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401e14:	b1ab      	cbz	r3, 401e42 <xQueueGiveFromISR+0x36>
  401e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1a:	b672      	cpsid	i
  401e1c:	f383 8811 	msr	BASEPRI, r3
  401e20:	f3bf 8f6f 	isb	sy
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	b662      	cpsie	i
  401e2a:	e7fe      	b.n	401e2a <xQueueGiveFromISR+0x1e>
  401e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e30:	b672      	cpsid	i
  401e32:	f383 8811 	msr	BASEPRI, r3
  401e36:	f3bf 8f6f 	isb	sy
  401e3a:	f3bf 8f4f 	dsb	sy
  401e3e:	b662      	cpsie	i
  401e40:	e7fe      	b.n	401e40 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e42:	6803      	ldr	r3, [r0, #0]
  401e44:	b333      	cbz	r3, 401e94 <xQueueGiveFromISR+0x88>
  401e46:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e48:	4b25      	ldr	r3, [pc, #148]	; (401ee0 <xQueueGiveFromISR+0xd4>)
  401e4a:	4798      	blx	r3
	__asm volatile
  401e4c:	f3ef 8611 	mrs	r6, BASEPRI
  401e50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e54:	b672      	cpsid	i
  401e56:	f383 8811 	msr	BASEPRI, r3
  401e5a:	f3bf 8f6f 	isb	sy
  401e5e:	f3bf 8f4f 	dsb	sy
  401e62:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401e64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e68:	429a      	cmp	r2, r3
  401e6a:	d231      	bcs.n	401ed0 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e6e:	3301      	adds	r3, #1
  401e70:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e74:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e78:	d125      	bne.n	401ec6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e7c:	b1c3      	cbz	r3, 401eb0 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401e7e:	2100      	movs	r1, #0
  401e80:	4620      	mov	r0, r4
  401e82:	4b18      	ldr	r3, [pc, #96]	; (401ee4 <xQueueGiveFromISR+0xd8>)
  401e84:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401e86:	b32d      	cbz	r5, 401ed4 <xQueueGiveFromISR+0xc8>
  401e88:	2801      	cmp	r0, #1
  401e8a:	d123      	bne.n	401ed4 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e8c:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e8e:	f386 8811 	msr	BASEPRI, r6
}
  401e92:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e94:	6843      	ldr	r3, [r0, #4]
  401e96:	2b00      	cmp	r3, #0
  401e98:	d0d5      	beq.n	401e46 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401e9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e9e:	b672      	cpsid	i
  401ea0:	f383 8811 	msr	BASEPRI, r3
  401ea4:	f3bf 8f6f 	isb	sy
  401ea8:	f3bf 8f4f 	dsb	sy
  401eac:	b662      	cpsie	i
  401eae:	e7fe      	b.n	401eae <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eb2:	b18b      	cbz	r3, 401ed8 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401eb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401eb8:	4b0b      	ldr	r3, [pc, #44]	; (401ee8 <xQueueGiveFromISR+0xdc>)
  401eba:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ebc:	b175      	cbz	r5, 401edc <xQueueGiveFromISR+0xd0>
  401ebe:	b168      	cbz	r0, 401edc <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ec0:	2001      	movs	r0, #1
  401ec2:	6028      	str	r0, [r5, #0]
  401ec4:	e7e3      	b.n	401e8e <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401ec6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ec8:	3301      	adds	r3, #1
  401eca:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ecc:	2001      	movs	r0, #1
  401ece:	e7de      	b.n	401e8e <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401ed0:	2000      	movs	r0, #0
  401ed2:	e7dc      	b.n	401e8e <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401ed4:	2001      	movs	r0, #1
  401ed6:	e7da      	b.n	401e8e <xQueueGiveFromISR+0x82>
  401ed8:	2001      	movs	r0, #1
  401eda:	e7d8      	b.n	401e8e <xQueueGiveFromISR+0x82>
  401edc:	2001      	movs	r0, #1
  401ede:	e7d6      	b.n	401e8e <xQueueGiveFromISR+0x82>
  401ee0:	00401785 	.word	0x00401785
  401ee4:	004018c5 	.word	0x004018c5
  401ee8:	00402a11 	.word	0x00402a11

00401eec <xQueueGenericReceive>:
{
  401eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ef0:	b084      	sub	sp, #16
  401ef2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401ef4:	b198      	cbz	r0, 401f1e <xQueueGenericReceive+0x32>
  401ef6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ef8:	b1e1      	cbz	r1, 401f34 <xQueueGenericReceive+0x48>
  401efa:	4698      	mov	r8, r3
  401efc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401efe:	4b61      	ldr	r3, [pc, #388]	; (402084 <xQueueGenericReceive+0x198>)
  401f00:	4798      	blx	r3
  401f02:	bb28      	cbnz	r0, 401f50 <xQueueGenericReceive+0x64>
  401f04:	9b01      	ldr	r3, [sp, #4]
  401f06:	b353      	cbz	r3, 401f5e <xQueueGenericReceive+0x72>
  401f08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0c:	b672      	cpsid	i
  401f0e:	f383 8811 	msr	BASEPRI, r3
  401f12:	f3bf 8f6f 	isb	sy
  401f16:	f3bf 8f4f 	dsb	sy
  401f1a:	b662      	cpsie	i
  401f1c:	e7fe      	b.n	401f1c <xQueueGenericReceive+0x30>
  401f1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f22:	b672      	cpsid	i
  401f24:	f383 8811 	msr	BASEPRI, r3
  401f28:	f3bf 8f6f 	isb	sy
  401f2c:	f3bf 8f4f 	dsb	sy
  401f30:	b662      	cpsie	i
  401f32:	e7fe      	b.n	401f32 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f34:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f36:	2a00      	cmp	r2, #0
  401f38:	d0df      	beq.n	401efa <xQueueGenericReceive+0xe>
  401f3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f3e:	b672      	cpsid	i
  401f40:	f383 8811 	msr	BASEPRI, r3
  401f44:	f3bf 8f6f 	isb	sy
  401f48:	f3bf 8f4f 	dsb	sy
  401f4c:	b662      	cpsie	i
  401f4e:	e7fe      	b.n	401f4e <xQueueGenericReceive+0x62>
  401f50:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401f52:	4d4d      	ldr	r5, [pc, #308]	; (402088 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401f54:	f8df a160 	ldr.w	sl, [pc, #352]	; 4020b8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401f58:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402098 <xQueueGenericReceive+0x1ac>
  401f5c:	e04b      	b.n	401ff6 <xQueueGenericReceive+0x10a>
  401f5e:	2600      	movs	r6, #0
  401f60:	e7f7      	b.n	401f52 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401f62:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f64:	4639      	mov	r1, r7
  401f66:	4620      	mov	r0, r4
  401f68:	4b48      	ldr	r3, [pc, #288]	; (40208c <xQueueGenericReceive+0x1a0>)
  401f6a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401f6c:	f1b8 0f00 	cmp.w	r8, #0
  401f70:	d11d      	bne.n	401fae <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f74:	3b01      	subs	r3, #1
  401f76:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f78:	6823      	ldr	r3, [r4, #0]
  401f7a:	b913      	cbnz	r3, 401f82 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401f7c:	4b44      	ldr	r3, [pc, #272]	; (402090 <xQueueGenericReceive+0x1a4>)
  401f7e:	4798      	blx	r3
  401f80:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f82:	6923      	ldr	r3, [r4, #16]
  401f84:	b16b      	cbz	r3, 401fa2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f86:	f104 0010 	add.w	r0, r4, #16
  401f8a:	4b42      	ldr	r3, [pc, #264]	; (402094 <xQueueGenericReceive+0x1a8>)
  401f8c:	4798      	blx	r3
  401f8e:	2801      	cmp	r0, #1
  401f90:	d107      	bne.n	401fa2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f96:	4b40      	ldr	r3, [pc, #256]	; (402098 <xQueueGenericReceive+0x1ac>)
  401f98:	601a      	str	r2, [r3, #0]
  401f9a:	f3bf 8f4f 	dsb	sy
  401f9e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401fa2:	4b3e      	ldr	r3, [pc, #248]	; (40209c <xQueueGenericReceive+0x1b0>)
  401fa4:	4798      	blx	r3
				return pdPASS;
  401fa6:	2001      	movs	r0, #1
}
  401fa8:	b004      	add	sp, #16
  401faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401fae:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d0f5      	beq.n	401fa2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fba:	4b36      	ldr	r3, [pc, #216]	; (402094 <xQueueGenericReceive+0x1a8>)
  401fbc:	4798      	blx	r3
  401fbe:	2800      	cmp	r0, #0
  401fc0:	d0ef      	beq.n	401fa2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fc6:	4b34      	ldr	r3, [pc, #208]	; (402098 <xQueueGenericReceive+0x1ac>)
  401fc8:	601a      	str	r2, [r3, #0]
  401fca:	f3bf 8f4f 	dsb	sy
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	e7e6      	b.n	401fa2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401fd4:	4b31      	ldr	r3, [pc, #196]	; (40209c <xQueueGenericReceive+0x1b0>)
  401fd6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401fd8:	2000      	movs	r0, #0
  401fda:	e7e5      	b.n	401fa8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401fdc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401fde:	6860      	ldr	r0, [r4, #4]
  401fe0:	4b2f      	ldr	r3, [pc, #188]	; (4020a0 <xQueueGenericReceive+0x1b4>)
  401fe2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401fe4:	4b2d      	ldr	r3, [pc, #180]	; (40209c <xQueueGenericReceive+0x1b0>)
  401fe6:	4798      	blx	r3
  401fe8:	e030      	b.n	40204c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401fea:	4620      	mov	r0, r4
  401fec:	4b2d      	ldr	r3, [pc, #180]	; (4020a4 <xQueueGenericReceive+0x1b8>)
  401fee:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ff0:	4b2d      	ldr	r3, [pc, #180]	; (4020a8 <xQueueGenericReceive+0x1bc>)
  401ff2:	4798      	blx	r3
  401ff4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401ff6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ffa:	2b00      	cmp	r3, #0
  401ffc:	d1b1      	bne.n	401f62 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ffe:	9b01      	ldr	r3, [sp, #4]
  402000:	2b00      	cmp	r3, #0
  402002:	d0e7      	beq.n	401fd4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402004:	b90e      	cbnz	r6, 40200a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402006:	a802      	add	r0, sp, #8
  402008:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40200a:	4b24      	ldr	r3, [pc, #144]	; (40209c <xQueueGenericReceive+0x1b0>)
  40200c:	4798      	blx	r3
		vTaskSuspendAll();
  40200e:	4b27      	ldr	r3, [pc, #156]	; (4020ac <xQueueGenericReceive+0x1c0>)
  402010:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402012:	47a8      	blx	r5
  402014:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402016:	f1b3 3fff 	cmp.w	r3, #4294967295
  40201a:	d101      	bne.n	402020 <xQueueGenericReceive+0x134>
  40201c:	2300      	movs	r3, #0
  40201e:	6463      	str	r3, [r4, #68]	; 0x44
  402020:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402022:	f1b3 3fff 	cmp.w	r3, #4294967295
  402026:	d101      	bne.n	40202c <xQueueGenericReceive+0x140>
  402028:	2300      	movs	r3, #0
  40202a:	64a3      	str	r3, [r4, #72]	; 0x48
  40202c:	4b1b      	ldr	r3, [pc, #108]	; (40209c <xQueueGenericReceive+0x1b0>)
  40202e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402030:	a901      	add	r1, sp, #4
  402032:	a802      	add	r0, sp, #8
  402034:	4b1e      	ldr	r3, [pc, #120]	; (4020b0 <xQueueGenericReceive+0x1c4>)
  402036:	4798      	blx	r3
  402038:	b9e8      	cbnz	r0, 402076 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40203a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40203c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40203e:	4b17      	ldr	r3, [pc, #92]	; (40209c <xQueueGenericReceive+0x1b0>)
  402040:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402042:	2e00      	cmp	r6, #0
  402044:	d1d1      	bne.n	401fea <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402046:	6823      	ldr	r3, [r4, #0]
  402048:	2b00      	cmp	r3, #0
  40204a:	d0c7      	beq.n	401fdc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40204c:	9901      	ldr	r1, [sp, #4]
  40204e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402052:	4b18      	ldr	r3, [pc, #96]	; (4020b4 <xQueueGenericReceive+0x1c8>)
  402054:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402056:	4620      	mov	r0, r4
  402058:	4b12      	ldr	r3, [pc, #72]	; (4020a4 <xQueueGenericReceive+0x1b8>)
  40205a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40205c:	4b12      	ldr	r3, [pc, #72]	; (4020a8 <xQueueGenericReceive+0x1bc>)
  40205e:	4798      	blx	r3
  402060:	2800      	cmp	r0, #0
  402062:	d1c7      	bne.n	401ff4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402068:	f8c9 3000 	str.w	r3, [r9]
  40206c:	f3bf 8f4f 	dsb	sy
  402070:	f3bf 8f6f 	isb	sy
  402074:	e7be      	b.n	401ff4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402076:	4620      	mov	r0, r4
  402078:	4b0a      	ldr	r3, [pc, #40]	; (4020a4 <xQueueGenericReceive+0x1b8>)
  40207a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40207c:	4b0a      	ldr	r3, [pc, #40]	; (4020a8 <xQueueGenericReceive+0x1bc>)
  40207e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402080:	2000      	movs	r0, #0
  402082:	e791      	b.n	401fa8 <xQueueGenericReceive+0xbc>
  402084:	00402b79 	.word	0x00402b79
  402088:	0040158d 	.word	0x0040158d
  40208c:	0040194d 	.word	0x0040194d
  402090:	00402cf9 	.word	0x00402cf9
  402094:	00402a11 	.word	0x00402a11
  402098:	e000ed04 	.word	0xe000ed04
  40209c:	004015d9 	.word	0x004015d9
  4020a0:	00402b99 	.word	0x00402b99
  4020a4:	00401975 	.word	0x00401975
  4020a8:	004025f5 	.word	0x004025f5
  4020ac:	0040248d 	.word	0x0040248d
  4020b0:	00402ad9 	.word	0x00402ad9
  4020b4:	0040290d 	.word	0x0040290d
  4020b8:	00402aa9 	.word	0x00402aa9

004020bc <vQueueAddToRegistry>:
	{
  4020bc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4020be:	4b0b      	ldr	r3, [pc, #44]	; (4020ec <vQueueAddToRegistry+0x30>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	b153      	cbz	r3, 4020da <vQueueAddToRegistry+0x1e>
  4020c4:	2301      	movs	r3, #1
  4020c6:	4c09      	ldr	r4, [pc, #36]	; (4020ec <vQueueAddToRegistry+0x30>)
  4020c8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4020cc:	b132      	cbz	r2, 4020dc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020ce:	3301      	adds	r3, #1
  4020d0:	2b08      	cmp	r3, #8
  4020d2:	d1f9      	bne.n	4020c8 <vQueueAddToRegistry+0xc>
	}
  4020d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020d8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020da:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4020dc:	4a03      	ldr	r2, [pc, #12]	; (4020ec <vQueueAddToRegistry+0x30>)
  4020de:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4020e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4020e6:	6058      	str	r0, [r3, #4]
				break;
  4020e8:	e7f4      	b.n	4020d4 <vQueueAddToRegistry+0x18>
  4020ea:	bf00      	nop
  4020ec:	20400de0 	.word	0x20400de0

004020f0 <vQueueWaitForMessageRestricted>:
	{
  4020f0:	b570      	push	{r4, r5, r6, lr}
  4020f2:	4604      	mov	r4, r0
  4020f4:	460d      	mov	r5, r1
  4020f6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4020f8:	4b0f      	ldr	r3, [pc, #60]	; (402138 <vQueueWaitForMessageRestricted+0x48>)
  4020fa:	4798      	blx	r3
  4020fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  402102:	d00b      	beq.n	40211c <vQueueWaitForMessageRestricted+0x2c>
  402104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402106:	f1b3 3fff 	cmp.w	r3, #4294967295
  40210a:	d00a      	beq.n	402122 <vQueueWaitForMessageRestricted+0x32>
  40210c:	4b0b      	ldr	r3, [pc, #44]	; (40213c <vQueueWaitForMessageRestricted+0x4c>)
  40210e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402112:	b14b      	cbz	r3, 402128 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402114:	4620      	mov	r0, r4
  402116:	4b0a      	ldr	r3, [pc, #40]	; (402140 <vQueueWaitForMessageRestricted+0x50>)
  402118:	4798      	blx	r3
  40211a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40211c:	2300      	movs	r3, #0
  40211e:	6463      	str	r3, [r4, #68]	; 0x44
  402120:	e7f0      	b.n	402104 <vQueueWaitForMessageRestricted+0x14>
  402122:	2300      	movs	r3, #0
  402124:	64a3      	str	r3, [r4, #72]	; 0x48
  402126:	e7f1      	b.n	40210c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402128:	4632      	mov	r2, r6
  40212a:	4629      	mov	r1, r5
  40212c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402130:	4b04      	ldr	r3, [pc, #16]	; (402144 <vQueueWaitForMessageRestricted+0x54>)
  402132:	4798      	blx	r3
  402134:	e7ee      	b.n	402114 <vQueueWaitForMessageRestricted+0x24>
  402136:	bf00      	nop
  402138:	0040158d 	.word	0x0040158d
  40213c:	004015d9 	.word	0x004015d9
  402140:	00401975 	.word	0x00401975
  402144:	00402991 	.word	0x00402991

00402148 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402148:	4b08      	ldr	r3, [pc, #32]	; (40216c <prvResetNextTaskUnblockTime+0x24>)
  40214a:	681b      	ldr	r3, [r3, #0]
  40214c:	681b      	ldr	r3, [r3, #0]
  40214e:	b13b      	cbz	r3, 402160 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402150:	4b06      	ldr	r3, [pc, #24]	; (40216c <prvResetNextTaskUnblockTime+0x24>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402156:	68db      	ldr	r3, [r3, #12]
  402158:	685a      	ldr	r2, [r3, #4]
  40215a:	4b05      	ldr	r3, [pc, #20]	; (402170 <prvResetNextTaskUnblockTime+0x28>)
  40215c:	601a      	str	r2, [r3, #0]
  40215e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402160:	f04f 32ff 	mov.w	r2, #4294967295
  402164:	4b02      	ldr	r3, [pc, #8]	; (402170 <prvResetNextTaskUnblockTime+0x28>)
  402166:	601a      	str	r2, [r3, #0]
  402168:	4770      	bx	lr
  40216a:	bf00      	nop
  40216c:	20400c6c 	.word	0x20400c6c
  402170:	20400d18 	.word	0x20400d18

00402174 <prvAddCurrentTaskToDelayedList>:
{
  402174:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402176:	4b0f      	ldr	r3, [pc, #60]	; (4021b4 <prvAddCurrentTaskToDelayedList+0x40>)
  402178:	681b      	ldr	r3, [r3, #0]
  40217a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40217c:	4b0e      	ldr	r3, [pc, #56]	; (4021b8 <prvAddCurrentTaskToDelayedList+0x44>)
  40217e:	681b      	ldr	r3, [r3, #0]
  402180:	4298      	cmp	r0, r3
  402182:	d30e      	bcc.n	4021a2 <prvAddCurrentTaskToDelayedList+0x2e>
  402184:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402186:	4b0d      	ldr	r3, [pc, #52]	; (4021bc <prvAddCurrentTaskToDelayedList+0x48>)
  402188:	6818      	ldr	r0, [r3, #0]
  40218a:	4b0a      	ldr	r3, [pc, #40]	; (4021b4 <prvAddCurrentTaskToDelayedList+0x40>)
  40218c:	6819      	ldr	r1, [r3, #0]
  40218e:	3104      	adds	r1, #4
  402190:	4b0b      	ldr	r3, [pc, #44]	; (4021c0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402192:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402194:	4b0b      	ldr	r3, [pc, #44]	; (4021c4 <prvAddCurrentTaskToDelayedList+0x50>)
  402196:	681b      	ldr	r3, [r3, #0]
  402198:	429c      	cmp	r4, r3
  40219a:	d201      	bcs.n	4021a0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40219c:	4b09      	ldr	r3, [pc, #36]	; (4021c4 <prvAddCurrentTaskToDelayedList+0x50>)
  40219e:	601c      	str	r4, [r3, #0]
  4021a0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021a2:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <prvAddCurrentTaskToDelayedList+0x54>)
  4021a4:	6818      	ldr	r0, [r3, #0]
  4021a6:	4b03      	ldr	r3, [pc, #12]	; (4021b4 <prvAddCurrentTaskToDelayedList+0x40>)
  4021a8:	6819      	ldr	r1, [r3, #0]
  4021aa:	3104      	adds	r1, #4
  4021ac:	4b04      	ldr	r3, [pc, #16]	; (4021c0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4021ae:	4798      	blx	r3
  4021b0:	bd10      	pop	{r4, pc}
  4021b2:	bf00      	nop
  4021b4:	20400c68 	.word	0x20400c68
  4021b8:	20400d60 	.word	0x20400d60
  4021bc:	20400c6c 	.word	0x20400c6c
  4021c0:	00401475 	.word	0x00401475
  4021c4:	20400d18 	.word	0x20400d18
  4021c8:	20400c70 	.word	0x20400c70

004021cc <xTaskGenericCreate>:
{
  4021cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021d0:	b083      	sub	sp, #12
  4021d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4021d4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4021d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4021da:	b160      	cbz	r0, 4021f6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4021dc:	2d04      	cmp	r5, #4
  4021de:	d915      	bls.n	40220c <xTaskGenericCreate+0x40>
  4021e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e4:	b672      	cpsid	i
  4021e6:	f383 8811 	msr	BASEPRI, r3
  4021ea:	f3bf 8f6f 	isb	sy
  4021ee:	f3bf 8f4f 	dsb	sy
  4021f2:	b662      	cpsie	i
  4021f4:	e7fe      	b.n	4021f4 <xTaskGenericCreate+0x28>
  4021f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fa:	b672      	cpsid	i
  4021fc:	f383 8811 	msr	BASEPRI, r3
  402200:	f3bf 8f6f 	isb	sy
  402204:	f3bf 8f4f 	dsb	sy
  402208:	b662      	cpsie	i
  40220a:	e7fe      	b.n	40220a <xTaskGenericCreate+0x3e>
  40220c:	9001      	str	r0, [sp, #4]
  40220e:	4698      	mov	r8, r3
  402210:	4691      	mov	r9, r2
  402212:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402214:	b936      	cbnz	r6, 402224 <xTaskGenericCreate+0x58>
  402216:	0090      	lsls	r0, r2, #2
  402218:	4b62      	ldr	r3, [pc, #392]	; (4023a4 <xTaskGenericCreate+0x1d8>)
  40221a:	4798      	blx	r3
		if( pxStack != NULL )
  40221c:	4606      	mov	r6, r0
  40221e:	2800      	cmp	r0, #0
  402220:	f000 809e 	beq.w	402360 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402224:	2058      	movs	r0, #88	; 0x58
  402226:	4b5f      	ldr	r3, [pc, #380]	; (4023a4 <xTaskGenericCreate+0x1d8>)
  402228:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40222a:	4604      	mov	r4, r0
  40222c:	2800      	cmp	r0, #0
  40222e:	f000 8094 	beq.w	40235a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402232:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402234:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402238:	21a5      	movs	r1, #165	; 0xa5
  40223a:	4630      	mov	r0, r6
  40223c:	4b5a      	ldr	r3, [pc, #360]	; (4023a8 <xTaskGenericCreate+0x1dc>)
  40223e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402240:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402244:	444e      	add	r6, r9
  402246:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402248:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40224c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402250:	783b      	ldrb	r3, [r7, #0]
  402252:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402256:	783b      	ldrb	r3, [r7, #0]
  402258:	2b00      	cmp	r3, #0
  40225a:	f040 8084 	bne.w	402366 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40225e:	2700      	movs	r7, #0
  402260:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402264:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402266:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402268:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40226a:	f104 0904 	add.w	r9, r4, #4
  40226e:	4648      	mov	r0, r9
  402270:	f8df b184 	ldr.w	fp, [pc, #388]	; 4023f8 <xTaskGenericCreate+0x22c>
  402274:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402276:	f104 0018 	add.w	r0, r4, #24
  40227a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40227c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40227e:	f1c5 0305 	rsb	r3, r5, #5
  402282:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402284:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402286:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402288:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40228c:	4642      	mov	r2, r8
  40228e:	9901      	ldr	r1, [sp, #4]
  402290:	4630      	mov	r0, r6
  402292:	4b46      	ldr	r3, [pc, #280]	; (4023ac <xTaskGenericCreate+0x1e0>)
  402294:	4798      	blx	r3
  402296:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402298:	f1ba 0f00 	cmp.w	sl, #0
  40229c:	d001      	beq.n	4022a2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40229e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4022a2:	4b43      	ldr	r3, [pc, #268]	; (4023b0 <xTaskGenericCreate+0x1e4>)
  4022a4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022a6:	4a43      	ldr	r2, [pc, #268]	; (4023b4 <xTaskGenericCreate+0x1e8>)
  4022a8:	6813      	ldr	r3, [r2, #0]
  4022aa:	3301      	adds	r3, #1
  4022ac:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022ae:	4b42      	ldr	r3, [pc, #264]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  4022b0:	681b      	ldr	r3, [r3, #0]
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	d166      	bne.n	402384 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4022b6:	4b40      	ldr	r3, [pc, #256]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  4022b8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022ba:	6813      	ldr	r3, [r2, #0]
  4022bc:	2b01      	cmp	r3, #1
  4022be:	d121      	bne.n	402304 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4022c0:	4f3e      	ldr	r7, [pc, #248]	; (4023bc <xTaskGenericCreate+0x1f0>)
  4022c2:	4638      	mov	r0, r7
  4022c4:	4e3e      	ldr	r6, [pc, #248]	; (4023c0 <xTaskGenericCreate+0x1f4>)
  4022c6:	47b0      	blx	r6
  4022c8:	f107 0014 	add.w	r0, r7, #20
  4022cc:	47b0      	blx	r6
  4022ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4022d2:	47b0      	blx	r6
  4022d4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4022d8:	47b0      	blx	r6
  4022da:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4022de:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4022e0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4023fc <xTaskGenericCreate+0x230>
  4022e4:	4640      	mov	r0, r8
  4022e6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4022e8:	4f36      	ldr	r7, [pc, #216]	; (4023c4 <xTaskGenericCreate+0x1f8>)
  4022ea:	4638      	mov	r0, r7
  4022ec:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4022ee:	4836      	ldr	r0, [pc, #216]	; (4023c8 <xTaskGenericCreate+0x1fc>)
  4022f0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4022f2:	4836      	ldr	r0, [pc, #216]	; (4023cc <xTaskGenericCreate+0x200>)
  4022f4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4022f6:	4836      	ldr	r0, [pc, #216]	; (4023d0 <xTaskGenericCreate+0x204>)
  4022f8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4022fa:	4b36      	ldr	r3, [pc, #216]	; (4023d4 <xTaskGenericCreate+0x208>)
  4022fc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402300:	4b35      	ldr	r3, [pc, #212]	; (4023d8 <xTaskGenericCreate+0x20c>)
  402302:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402304:	4a35      	ldr	r2, [pc, #212]	; (4023dc <xTaskGenericCreate+0x210>)
  402306:	6813      	ldr	r3, [r2, #0]
  402308:	3301      	adds	r3, #1
  40230a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40230c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40230e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402310:	4a33      	ldr	r2, [pc, #204]	; (4023e0 <xTaskGenericCreate+0x214>)
  402312:	6811      	ldr	r1, [r2, #0]
  402314:	2301      	movs	r3, #1
  402316:	4083      	lsls	r3, r0
  402318:	430b      	orrs	r3, r1
  40231a:	6013      	str	r3, [r2, #0]
  40231c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402320:	4649      	mov	r1, r9
  402322:	4b26      	ldr	r3, [pc, #152]	; (4023bc <xTaskGenericCreate+0x1f0>)
  402324:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402328:	4b2e      	ldr	r3, [pc, #184]	; (4023e4 <xTaskGenericCreate+0x218>)
  40232a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40232c:	4b2e      	ldr	r3, [pc, #184]	; (4023e8 <xTaskGenericCreate+0x21c>)
  40232e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402330:	4b2e      	ldr	r3, [pc, #184]	; (4023ec <xTaskGenericCreate+0x220>)
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	2b00      	cmp	r3, #0
  402336:	d031      	beq.n	40239c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402338:	4b1f      	ldr	r3, [pc, #124]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40233e:	429d      	cmp	r5, r3
  402340:	d92e      	bls.n	4023a0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402346:	4b2a      	ldr	r3, [pc, #168]	; (4023f0 <xTaskGenericCreate+0x224>)
  402348:	601a      	str	r2, [r3, #0]
  40234a:	f3bf 8f4f 	dsb	sy
  40234e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402352:	2001      	movs	r0, #1
}
  402354:	b003      	add	sp, #12
  402356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40235a:	4630      	mov	r0, r6
  40235c:	4b25      	ldr	r3, [pc, #148]	; (4023f4 <xTaskGenericCreate+0x228>)
  40235e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402360:	f04f 30ff 	mov.w	r0, #4294967295
  402364:	e7f6      	b.n	402354 <xTaskGenericCreate+0x188>
  402366:	463b      	mov	r3, r7
  402368:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40236c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40236e:	7859      	ldrb	r1, [r3, #1]
  402370:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402374:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402378:	2900      	cmp	r1, #0
  40237a:	f43f af70 	beq.w	40225e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40237e:	42bb      	cmp	r3, r7
  402380:	d1f5      	bne.n	40236e <xTaskGenericCreate+0x1a2>
  402382:	e76c      	b.n	40225e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402384:	4b19      	ldr	r3, [pc, #100]	; (4023ec <xTaskGenericCreate+0x220>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	2b00      	cmp	r3, #0
  40238a:	d1bb      	bne.n	402304 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40238c:	4b0a      	ldr	r3, [pc, #40]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  40238e:	681b      	ldr	r3, [r3, #0]
  402390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402392:	429d      	cmp	r5, r3
  402394:	d3b6      	bcc.n	402304 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402396:	4b08      	ldr	r3, [pc, #32]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  402398:	601c      	str	r4, [r3, #0]
  40239a:	e7b3      	b.n	402304 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40239c:	2001      	movs	r0, #1
  40239e:	e7d9      	b.n	402354 <xTaskGenericCreate+0x188>
  4023a0:	2001      	movs	r0, #1
	return xReturn;
  4023a2:	e7d7      	b.n	402354 <xTaskGenericCreate+0x188>
  4023a4:	004017e9 	.word	0x004017e9
  4023a8:	00404b6d 	.word	0x00404b6d
  4023ac:	00401541 	.word	0x00401541
  4023b0:	0040158d 	.word	0x0040158d
  4023b4:	20400cd8 	.word	0x20400cd8
  4023b8:	20400c68 	.word	0x20400c68
  4023bc:	20400c74 	.word	0x20400c74
  4023c0:	00401441 	.word	0x00401441
  4023c4:	20400d04 	.word	0x20400d04
  4023c8:	20400d20 	.word	0x20400d20
  4023cc:	20400d4c 	.word	0x20400d4c
  4023d0:	20400d38 	.word	0x20400d38
  4023d4:	20400c6c 	.word	0x20400c6c
  4023d8:	20400c70 	.word	0x20400c70
  4023dc:	20400ce4 	.word	0x20400ce4
  4023e0:	20400cec 	.word	0x20400cec
  4023e4:	0040145d 	.word	0x0040145d
  4023e8:	004015d9 	.word	0x004015d9
  4023ec:	20400d34 	.word	0x20400d34
  4023f0:	e000ed04 	.word	0xe000ed04
  4023f4:	00401819 	.word	0x00401819
  4023f8:	00401457 	.word	0x00401457
  4023fc:	20400cf0 	.word	0x20400cf0

00402400 <vTaskStartScheduler>:
{
  402400:	b510      	push	{r4, lr}
  402402:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402404:	2300      	movs	r3, #0
  402406:	9303      	str	r3, [sp, #12]
  402408:	9302      	str	r3, [sp, #8]
  40240a:	9301      	str	r3, [sp, #4]
  40240c:	9300      	str	r3, [sp, #0]
  40240e:	2282      	movs	r2, #130	; 0x82
  402410:	4916      	ldr	r1, [pc, #88]	; (40246c <vTaskStartScheduler+0x6c>)
  402412:	4817      	ldr	r0, [pc, #92]	; (402470 <vTaskStartScheduler+0x70>)
  402414:	4c17      	ldr	r4, [pc, #92]	; (402474 <vTaskStartScheduler+0x74>)
  402416:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402418:	2801      	cmp	r0, #1
  40241a:	d00b      	beq.n	402434 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40241c:	bb20      	cbnz	r0, 402468 <vTaskStartScheduler+0x68>
  40241e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402422:	b672      	cpsid	i
  402424:	f383 8811 	msr	BASEPRI, r3
  402428:	f3bf 8f6f 	isb	sy
  40242c:	f3bf 8f4f 	dsb	sy
  402430:	b662      	cpsie	i
  402432:	e7fe      	b.n	402432 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402434:	4b10      	ldr	r3, [pc, #64]	; (402478 <vTaskStartScheduler+0x78>)
  402436:	4798      	blx	r3
	if( xReturn == pdPASS )
  402438:	2801      	cmp	r0, #1
  40243a:	d1ef      	bne.n	40241c <vTaskStartScheduler+0x1c>
  40243c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402440:	b672      	cpsid	i
  402442:	f383 8811 	msr	BASEPRI, r3
  402446:	f3bf 8f6f 	isb	sy
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402450:	f04f 32ff 	mov.w	r2, #4294967295
  402454:	4b09      	ldr	r3, [pc, #36]	; (40247c <vTaskStartScheduler+0x7c>)
  402456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402458:	2201      	movs	r2, #1
  40245a:	4b09      	ldr	r3, [pc, #36]	; (402480 <vTaskStartScheduler+0x80>)
  40245c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40245e:	2200      	movs	r2, #0
  402460:	4b08      	ldr	r3, [pc, #32]	; (402484 <vTaskStartScheduler+0x84>)
  402462:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402464:	4b08      	ldr	r3, [pc, #32]	; (402488 <vTaskStartScheduler+0x88>)
  402466:	4798      	blx	r3
}
  402468:	b004      	add	sp, #16
  40246a:	bd10      	pop	{r4, pc}
  40246c:	0040914c 	.word	0x0040914c
  402470:	004027a5 	.word	0x004027a5
  402474:	004021cd 	.word	0x004021cd
  402478:	00402de5 	.word	0x00402de5
  40247c:	20400d18 	.word	0x20400d18
  402480:	20400d34 	.word	0x20400d34
  402484:	20400d60 	.word	0x20400d60
  402488:	004016c1 	.word	0x004016c1

0040248c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40248c:	4a02      	ldr	r2, [pc, #8]	; (402498 <vTaskSuspendAll+0xc>)
  40248e:	6813      	ldr	r3, [r2, #0]
  402490:	3301      	adds	r3, #1
  402492:	6013      	str	r3, [r2, #0]
  402494:	4770      	bx	lr
  402496:	bf00      	nop
  402498:	20400ce0 	.word	0x20400ce0

0040249c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40249c:	4b01      	ldr	r3, [pc, #4]	; (4024a4 <xTaskGetTickCount+0x8>)
  40249e:	6818      	ldr	r0, [r3, #0]
}
  4024a0:	4770      	bx	lr
  4024a2:	bf00      	nop
  4024a4:	20400d60 	.word	0x20400d60

004024a8 <xTaskIncrementTick>:
{
  4024a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024ac:	4b42      	ldr	r3, [pc, #264]	; (4025b8 <xTaskIncrementTick+0x110>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	2b00      	cmp	r3, #0
  4024b2:	d178      	bne.n	4025a6 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4024b4:	4b41      	ldr	r3, [pc, #260]	; (4025bc <xTaskIncrementTick+0x114>)
  4024b6:	681a      	ldr	r2, [r3, #0]
  4024b8:	3201      	adds	r2, #1
  4024ba:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4024bc:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4024be:	b9d6      	cbnz	r6, 4024f6 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4024c0:	4b3f      	ldr	r3, [pc, #252]	; (4025c0 <xTaskIncrementTick+0x118>)
  4024c2:	681b      	ldr	r3, [r3, #0]
  4024c4:	681b      	ldr	r3, [r3, #0]
  4024c6:	b153      	cbz	r3, 4024de <xTaskIncrementTick+0x36>
  4024c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024cc:	b672      	cpsid	i
  4024ce:	f383 8811 	msr	BASEPRI, r3
  4024d2:	f3bf 8f6f 	isb	sy
  4024d6:	f3bf 8f4f 	dsb	sy
  4024da:	b662      	cpsie	i
  4024dc:	e7fe      	b.n	4024dc <xTaskIncrementTick+0x34>
  4024de:	4a38      	ldr	r2, [pc, #224]	; (4025c0 <xTaskIncrementTick+0x118>)
  4024e0:	6811      	ldr	r1, [r2, #0]
  4024e2:	4b38      	ldr	r3, [pc, #224]	; (4025c4 <xTaskIncrementTick+0x11c>)
  4024e4:	6818      	ldr	r0, [r3, #0]
  4024e6:	6010      	str	r0, [r2, #0]
  4024e8:	6019      	str	r1, [r3, #0]
  4024ea:	4a37      	ldr	r2, [pc, #220]	; (4025c8 <xTaskIncrementTick+0x120>)
  4024ec:	6813      	ldr	r3, [r2, #0]
  4024ee:	3301      	adds	r3, #1
  4024f0:	6013      	str	r3, [r2, #0]
  4024f2:	4b36      	ldr	r3, [pc, #216]	; (4025cc <xTaskIncrementTick+0x124>)
  4024f4:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4024f6:	4b36      	ldr	r3, [pc, #216]	; (4025d0 <xTaskIncrementTick+0x128>)
  4024f8:	681b      	ldr	r3, [r3, #0]
  4024fa:	429e      	cmp	r6, r3
  4024fc:	d218      	bcs.n	402530 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4024fe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402500:	4b34      	ldr	r3, [pc, #208]	; (4025d4 <xTaskIncrementTick+0x12c>)
  402502:	681b      	ldr	r3, [r3, #0]
  402504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40250a:	4a33      	ldr	r2, [pc, #204]	; (4025d8 <xTaskIncrementTick+0x130>)
  40250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402510:	2b02      	cmp	r3, #2
  402512:	bf28      	it	cs
  402514:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402516:	4b31      	ldr	r3, [pc, #196]	; (4025dc <xTaskIncrementTick+0x134>)
  402518:	681b      	ldr	r3, [r3, #0]
  40251a:	b90b      	cbnz	r3, 402520 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40251c:	4b30      	ldr	r3, [pc, #192]	; (4025e0 <xTaskIncrementTick+0x138>)
  40251e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402520:	4b30      	ldr	r3, [pc, #192]	; (4025e4 <xTaskIncrementTick+0x13c>)
  402522:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402524:	2b00      	cmp	r3, #0
}
  402526:	bf0c      	ite	eq
  402528:	4620      	moveq	r0, r4
  40252a:	2001      	movne	r0, #1
  40252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402530:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402532:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4025c0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402536:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4025f0 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40253a:	4f2b      	ldr	r7, [pc, #172]	; (4025e8 <xTaskIncrementTick+0x140>)
  40253c:	e01f      	b.n	40257e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40253e:	f04f 32ff 	mov.w	r2, #4294967295
  402542:	4b23      	ldr	r3, [pc, #140]	; (4025d0 <xTaskIncrementTick+0x128>)
  402544:	601a      	str	r2, [r3, #0]
						break;
  402546:	e7db      	b.n	402500 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402548:	4a21      	ldr	r2, [pc, #132]	; (4025d0 <xTaskIncrementTick+0x128>)
  40254a:	6013      	str	r3, [r2, #0]
							break;
  40254c:	e7d8      	b.n	402500 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40254e:	f105 0018 	add.w	r0, r5, #24
  402552:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402554:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402556:	683a      	ldr	r2, [r7, #0]
  402558:	2301      	movs	r3, #1
  40255a:	4083      	lsls	r3, r0
  40255c:	4313      	orrs	r3, r2
  40255e:	603b      	str	r3, [r7, #0]
  402560:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402564:	4651      	mov	r1, sl
  402566:	4b1c      	ldr	r3, [pc, #112]	; (4025d8 <xTaskIncrementTick+0x130>)
  402568:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40256c:	4b1f      	ldr	r3, [pc, #124]	; (4025ec <xTaskIncrementTick+0x144>)
  40256e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402570:	4b18      	ldr	r3, [pc, #96]	; (4025d4 <xTaskIncrementTick+0x12c>)
  402572:	681b      	ldr	r3, [r3, #0]
  402574:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402578:	429a      	cmp	r2, r3
  40257a:	bf28      	it	cs
  40257c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40257e:	f8d9 3000 	ldr.w	r3, [r9]
  402582:	681b      	ldr	r3, [r3, #0]
  402584:	2b00      	cmp	r3, #0
  402586:	d0da      	beq.n	40253e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402588:	f8d9 3000 	ldr.w	r3, [r9]
  40258c:	68db      	ldr	r3, [r3, #12]
  40258e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402590:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402592:	429e      	cmp	r6, r3
  402594:	d3d8      	bcc.n	402548 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402596:	f105 0a04 	add.w	sl, r5, #4
  40259a:	4650      	mov	r0, sl
  40259c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40259e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4025a0:	2b00      	cmp	r3, #0
  4025a2:	d1d4      	bne.n	40254e <xTaskIncrementTick+0xa6>
  4025a4:	e7d6      	b.n	402554 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4025a6:	4a0d      	ldr	r2, [pc, #52]	; (4025dc <xTaskIncrementTick+0x134>)
  4025a8:	6813      	ldr	r3, [r2, #0]
  4025aa:	3301      	adds	r3, #1
  4025ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4025ae:	4b0c      	ldr	r3, [pc, #48]	; (4025e0 <xTaskIncrementTick+0x138>)
  4025b0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4025b2:	2400      	movs	r4, #0
  4025b4:	e7b4      	b.n	402520 <xTaskIncrementTick+0x78>
  4025b6:	bf00      	nop
  4025b8:	20400ce0 	.word	0x20400ce0
  4025bc:	20400d60 	.word	0x20400d60
  4025c0:	20400c6c 	.word	0x20400c6c
  4025c4:	20400c70 	.word	0x20400c70
  4025c8:	20400d1c 	.word	0x20400d1c
  4025cc:	00402149 	.word	0x00402149
  4025d0:	20400d18 	.word	0x20400d18
  4025d4:	20400c68 	.word	0x20400c68
  4025d8:	20400c74 	.word	0x20400c74
  4025dc:	20400cdc 	.word	0x20400cdc
  4025e0:	00403445 	.word	0x00403445
  4025e4:	20400d64 	.word	0x20400d64
  4025e8:	20400cec 	.word	0x20400cec
  4025ec:	0040145d 	.word	0x0040145d
  4025f0:	004014a9 	.word	0x004014a9

004025f4 <xTaskResumeAll>:
{
  4025f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4025f8:	4b38      	ldr	r3, [pc, #224]	; (4026dc <xTaskResumeAll+0xe8>)
  4025fa:	681b      	ldr	r3, [r3, #0]
  4025fc:	b953      	cbnz	r3, 402614 <xTaskResumeAll+0x20>
  4025fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402602:	b672      	cpsid	i
  402604:	f383 8811 	msr	BASEPRI, r3
  402608:	f3bf 8f6f 	isb	sy
  40260c:	f3bf 8f4f 	dsb	sy
  402610:	b662      	cpsie	i
  402612:	e7fe      	b.n	402612 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402614:	4b32      	ldr	r3, [pc, #200]	; (4026e0 <xTaskResumeAll+0xec>)
  402616:	4798      	blx	r3
		--uxSchedulerSuspended;
  402618:	4b30      	ldr	r3, [pc, #192]	; (4026dc <xTaskResumeAll+0xe8>)
  40261a:	681a      	ldr	r2, [r3, #0]
  40261c:	3a01      	subs	r2, #1
  40261e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402620:	681b      	ldr	r3, [r3, #0]
  402622:	2b00      	cmp	r3, #0
  402624:	d155      	bne.n	4026d2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402626:	4b2f      	ldr	r3, [pc, #188]	; (4026e4 <xTaskResumeAll+0xf0>)
  402628:	681b      	ldr	r3, [r3, #0]
  40262a:	2b00      	cmp	r3, #0
  40262c:	d132      	bne.n	402694 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40262e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402630:	4b2d      	ldr	r3, [pc, #180]	; (4026e8 <xTaskResumeAll+0xf4>)
  402632:	4798      	blx	r3
}
  402634:	4620      	mov	r0, r4
  402636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40263a:	68fb      	ldr	r3, [r7, #12]
  40263c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40263e:	f104 0018 	add.w	r0, r4, #24
  402642:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402644:	f104 0804 	add.w	r8, r4, #4
  402648:	4640      	mov	r0, r8
  40264a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40264c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40264e:	682a      	ldr	r2, [r5, #0]
  402650:	2301      	movs	r3, #1
  402652:	4083      	lsls	r3, r0
  402654:	4313      	orrs	r3, r2
  402656:	602b      	str	r3, [r5, #0]
  402658:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40265c:	4641      	mov	r1, r8
  40265e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402662:	4b22      	ldr	r3, [pc, #136]	; (4026ec <xTaskResumeAll+0xf8>)
  402664:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402666:	4b22      	ldr	r3, [pc, #136]	; (4026f0 <xTaskResumeAll+0xfc>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40266e:	429a      	cmp	r2, r3
  402670:	d20c      	bcs.n	40268c <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402672:	683b      	ldr	r3, [r7, #0]
  402674:	2b00      	cmp	r3, #0
  402676:	d1e0      	bne.n	40263a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402678:	4b1e      	ldr	r3, [pc, #120]	; (4026f4 <xTaskResumeAll+0x100>)
  40267a:	681b      	ldr	r3, [r3, #0]
  40267c:	b1db      	cbz	r3, 4026b6 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40267e:	4b1d      	ldr	r3, [pc, #116]	; (4026f4 <xTaskResumeAll+0x100>)
  402680:	681b      	ldr	r3, [r3, #0]
  402682:	b1c3      	cbz	r3, 4026b6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402684:	4e1c      	ldr	r6, [pc, #112]	; (4026f8 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402686:	4d1d      	ldr	r5, [pc, #116]	; (4026fc <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402688:	4c1a      	ldr	r4, [pc, #104]	; (4026f4 <xTaskResumeAll+0x100>)
  40268a:	e00e      	b.n	4026aa <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  40268c:	2201      	movs	r2, #1
  40268e:	4b1b      	ldr	r3, [pc, #108]	; (4026fc <xTaskResumeAll+0x108>)
  402690:	601a      	str	r2, [r3, #0]
  402692:	e7ee      	b.n	402672 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402694:	4f1a      	ldr	r7, [pc, #104]	; (402700 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402696:	4e1b      	ldr	r6, [pc, #108]	; (402704 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402698:	4d1b      	ldr	r5, [pc, #108]	; (402708 <xTaskResumeAll+0x114>)
  40269a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402710 <xTaskResumeAll+0x11c>
  40269e:	e7e8      	b.n	402672 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4026a0:	6823      	ldr	r3, [r4, #0]
  4026a2:	3b01      	subs	r3, #1
  4026a4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4026a6:	6823      	ldr	r3, [r4, #0]
  4026a8:	b12b      	cbz	r3, 4026b6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4026aa:	47b0      	blx	r6
  4026ac:	2800      	cmp	r0, #0
  4026ae:	d0f7      	beq.n	4026a0 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4026b0:	2301      	movs	r3, #1
  4026b2:	602b      	str	r3, [r5, #0]
  4026b4:	e7f4      	b.n	4026a0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4026b6:	4b11      	ldr	r3, [pc, #68]	; (4026fc <xTaskResumeAll+0x108>)
  4026b8:	681b      	ldr	r3, [r3, #0]
  4026ba:	2b01      	cmp	r3, #1
  4026bc:	d10b      	bne.n	4026d6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026c2:	4b12      	ldr	r3, [pc, #72]	; (40270c <xTaskResumeAll+0x118>)
  4026c4:	601a      	str	r2, [r3, #0]
  4026c6:	f3bf 8f4f 	dsb	sy
  4026ca:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4026ce:	2401      	movs	r4, #1
  4026d0:	e7ae      	b.n	402630 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4026d2:	2400      	movs	r4, #0
  4026d4:	e7ac      	b.n	402630 <xTaskResumeAll+0x3c>
  4026d6:	2400      	movs	r4, #0
  4026d8:	e7aa      	b.n	402630 <xTaskResumeAll+0x3c>
  4026da:	bf00      	nop
  4026dc:	20400ce0 	.word	0x20400ce0
  4026e0:	0040158d 	.word	0x0040158d
  4026e4:	20400cd8 	.word	0x20400cd8
  4026e8:	004015d9 	.word	0x004015d9
  4026ec:	0040145d 	.word	0x0040145d
  4026f0:	20400c68 	.word	0x20400c68
  4026f4:	20400cdc 	.word	0x20400cdc
  4026f8:	004024a9 	.word	0x004024a9
  4026fc:	20400d64 	.word	0x20400d64
  402700:	20400d20 	.word	0x20400d20
  402704:	004014a9 	.word	0x004014a9
  402708:	20400cec 	.word	0x20400cec
  40270c:	e000ed04 	.word	0xe000ed04
  402710:	20400c74 	.word	0x20400c74

00402714 <vTaskDelay>:
	{
  402714:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402716:	2800      	cmp	r0, #0
  402718:	d029      	beq.n	40276e <vTaskDelay+0x5a>
  40271a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40271c:	4b18      	ldr	r3, [pc, #96]	; (402780 <vTaskDelay+0x6c>)
  40271e:	681b      	ldr	r3, [r3, #0]
  402720:	b153      	cbz	r3, 402738 <vTaskDelay+0x24>
  402722:	f04f 0380 	mov.w	r3, #128	; 0x80
  402726:	b672      	cpsid	i
  402728:	f383 8811 	msr	BASEPRI, r3
  40272c:	f3bf 8f6f 	isb	sy
  402730:	f3bf 8f4f 	dsb	sy
  402734:	b662      	cpsie	i
  402736:	e7fe      	b.n	402736 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402738:	4b12      	ldr	r3, [pc, #72]	; (402784 <vTaskDelay+0x70>)
  40273a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  40273c:	4b12      	ldr	r3, [pc, #72]	; (402788 <vTaskDelay+0x74>)
  40273e:	681b      	ldr	r3, [r3, #0]
  402740:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402742:	4b12      	ldr	r3, [pc, #72]	; (40278c <vTaskDelay+0x78>)
  402744:	6818      	ldr	r0, [r3, #0]
  402746:	3004      	adds	r0, #4
  402748:	4b11      	ldr	r3, [pc, #68]	; (402790 <vTaskDelay+0x7c>)
  40274a:	4798      	blx	r3
  40274c:	b948      	cbnz	r0, 402762 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40274e:	4b0f      	ldr	r3, [pc, #60]	; (40278c <vTaskDelay+0x78>)
  402750:	681a      	ldr	r2, [r3, #0]
  402752:	4910      	ldr	r1, [pc, #64]	; (402794 <vTaskDelay+0x80>)
  402754:	680b      	ldr	r3, [r1, #0]
  402756:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402758:	2201      	movs	r2, #1
  40275a:	4082      	lsls	r2, r0
  40275c:	ea23 0302 	bic.w	r3, r3, r2
  402760:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402762:	4620      	mov	r0, r4
  402764:	4b0c      	ldr	r3, [pc, #48]	; (402798 <vTaskDelay+0x84>)
  402766:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402768:	4b0c      	ldr	r3, [pc, #48]	; (40279c <vTaskDelay+0x88>)
  40276a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40276c:	b938      	cbnz	r0, 40277e <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402772:	4b0b      	ldr	r3, [pc, #44]	; (4027a0 <vTaskDelay+0x8c>)
  402774:	601a      	str	r2, [r3, #0]
  402776:	f3bf 8f4f 	dsb	sy
  40277a:	f3bf 8f6f 	isb	sy
  40277e:	bd10      	pop	{r4, pc}
  402780:	20400ce0 	.word	0x20400ce0
  402784:	0040248d 	.word	0x0040248d
  402788:	20400d60 	.word	0x20400d60
  40278c:	20400c68 	.word	0x20400c68
  402790:	004014a9 	.word	0x004014a9
  402794:	20400cec 	.word	0x20400cec
  402798:	00402175 	.word	0x00402175
  40279c:	004025f5 	.word	0x004025f5
  4027a0:	e000ed04 	.word	0xe000ed04

004027a4 <prvIdleTask>:
{
  4027a4:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4027a6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402830 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027aa:	4e19      	ldr	r6, [pc, #100]	; (402810 <prvIdleTask+0x6c>)
				taskYIELD();
  4027ac:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402834 <prvIdleTask+0x90>
  4027b0:	e02a      	b.n	402808 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027b2:	4b18      	ldr	r3, [pc, #96]	; (402814 <prvIdleTask+0x70>)
  4027b4:	681b      	ldr	r3, [r3, #0]
  4027b6:	2b01      	cmp	r3, #1
  4027b8:	d81e      	bhi.n	4027f8 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4027ba:	682b      	ldr	r3, [r5, #0]
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d0f8      	beq.n	4027b2 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4027c0:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027c2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4027c4:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4027c6:	2c00      	cmp	r4, #0
  4027c8:	d0f7      	beq.n	4027ba <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4027ca:	4b13      	ldr	r3, [pc, #76]	; (402818 <prvIdleTask+0x74>)
  4027cc:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4027ce:	68f3      	ldr	r3, [r6, #12]
  4027d0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027d2:	1d20      	adds	r0, r4, #4
  4027d4:	4b11      	ldr	r3, [pc, #68]	; (40281c <prvIdleTask+0x78>)
  4027d6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4027d8:	4a11      	ldr	r2, [pc, #68]	; (402820 <prvIdleTask+0x7c>)
  4027da:	6813      	ldr	r3, [r2, #0]
  4027dc:	3b01      	subs	r3, #1
  4027de:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4027e0:	682b      	ldr	r3, [r5, #0]
  4027e2:	3b01      	subs	r3, #1
  4027e4:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4027e6:	4b0f      	ldr	r3, [pc, #60]	; (402824 <prvIdleTask+0x80>)
  4027e8:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4027ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4027ec:	f8df a048 	ldr.w	sl, [pc, #72]	; 402838 <prvIdleTask+0x94>
  4027f0:	47d0      	blx	sl
		vPortFree( pxTCB );
  4027f2:	4620      	mov	r0, r4
  4027f4:	47d0      	blx	sl
  4027f6:	e7e0      	b.n	4027ba <prvIdleTask+0x16>
				taskYIELD();
  4027f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4027fc:	f8c9 3000 	str.w	r3, [r9]
  402800:	f3bf 8f4f 	dsb	sy
  402804:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402808:	4d07      	ldr	r5, [pc, #28]	; (402828 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40280a:	4f08      	ldr	r7, [pc, #32]	; (40282c <prvIdleTask+0x88>)
  40280c:	e7d5      	b.n	4027ba <prvIdleTask+0x16>
  40280e:	bf00      	nop
  402810:	20400d4c 	.word	0x20400d4c
  402814:	20400c74 	.word	0x20400c74
  402818:	0040158d 	.word	0x0040158d
  40281c:	004014a9 	.word	0x004014a9
  402820:	20400cd8 	.word	0x20400cd8
  402824:	004015d9 	.word	0x004015d9
  402828:	20400ce8 	.word	0x20400ce8
  40282c:	004025f5 	.word	0x004025f5
  402830:	0040248d 	.word	0x0040248d
  402834:	e000ed04 	.word	0xe000ed04
  402838:	00401819 	.word	0x00401819

0040283c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40283c:	4b2d      	ldr	r3, [pc, #180]	; (4028f4 <vTaskSwitchContext+0xb8>)
  40283e:	681b      	ldr	r3, [r3, #0]
  402840:	2b00      	cmp	r3, #0
  402842:	d12c      	bne.n	40289e <vTaskSwitchContext+0x62>
{
  402844:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402846:	2200      	movs	r2, #0
  402848:	4b2b      	ldr	r3, [pc, #172]	; (4028f8 <vTaskSwitchContext+0xbc>)
  40284a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40284c:	4b2b      	ldr	r3, [pc, #172]	; (4028fc <vTaskSwitchContext+0xc0>)
  40284e:	681b      	ldr	r3, [r3, #0]
  402850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402852:	681a      	ldr	r2, [r3, #0]
  402854:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402858:	d103      	bne.n	402862 <vTaskSwitchContext+0x26>
  40285a:	685a      	ldr	r2, [r3, #4]
  40285c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402860:	d021      	beq.n	4028a6 <vTaskSwitchContext+0x6a>
  402862:	4b26      	ldr	r3, [pc, #152]	; (4028fc <vTaskSwitchContext+0xc0>)
  402864:	6818      	ldr	r0, [r3, #0]
  402866:	6819      	ldr	r1, [r3, #0]
  402868:	3134      	adds	r1, #52	; 0x34
  40286a:	4b25      	ldr	r3, [pc, #148]	; (402900 <vTaskSwitchContext+0xc4>)
  40286c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40286e:	4b25      	ldr	r3, [pc, #148]	; (402904 <vTaskSwitchContext+0xc8>)
  402870:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402872:	fab3 f383 	clz	r3, r3
  402876:	b2db      	uxtb	r3, r3
  402878:	f1c3 031f 	rsb	r3, r3, #31
  40287c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402880:	4a21      	ldr	r2, [pc, #132]	; (402908 <vTaskSwitchContext+0xcc>)
  402882:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402886:	b9ba      	cbnz	r2, 4028b8 <vTaskSwitchContext+0x7c>
	__asm volatile
  402888:	f04f 0380 	mov.w	r3, #128	; 0x80
  40288c:	b672      	cpsid	i
  40288e:	f383 8811 	msr	BASEPRI, r3
  402892:	f3bf 8f6f 	isb	sy
  402896:	f3bf 8f4f 	dsb	sy
  40289a:	b662      	cpsie	i
  40289c:	e7fe      	b.n	40289c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40289e:	2201      	movs	r2, #1
  4028a0:	4b15      	ldr	r3, [pc, #84]	; (4028f8 <vTaskSwitchContext+0xbc>)
  4028a2:	601a      	str	r2, [r3, #0]
  4028a4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4028a6:	689a      	ldr	r2, [r3, #8]
  4028a8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4028ac:	d1d9      	bne.n	402862 <vTaskSwitchContext+0x26>
  4028ae:	68db      	ldr	r3, [r3, #12]
  4028b0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4028b4:	d1d5      	bne.n	402862 <vTaskSwitchContext+0x26>
  4028b6:	e7da      	b.n	40286e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4028b8:	4a13      	ldr	r2, [pc, #76]	; (402908 <vTaskSwitchContext+0xcc>)
  4028ba:	0099      	lsls	r1, r3, #2
  4028bc:	18c8      	adds	r0, r1, r3
  4028be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4028c2:	6844      	ldr	r4, [r0, #4]
  4028c4:	6864      	ldr	r4, [r4, #4]
  4028c6:	6044      	str	r4, [r0, #4]
  4028c8:	4419      	add	r1, r3
  4028ca:	4602      	mov	r2, r0
  4028cc:	3208      	adds	r2, #8
  4028ce:	4294      	cmp	r4, r2
  4028d0:	d009      	beq.n	4028e6 <vTaskSwitchContext+0xaa>
  4028d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028d6:	4a0c      	ldr	r2, [pc, #48]	; (402908 <vTaskSwitchContext+0xcc>)
  4028d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028dc:	685b      	ldr	r3, [r3, #4]
  4028de:	68da      	ldr	r2, [r3, #12]
  4028e0:	4b06      	ldr	r3, [pc, #24]	; (4028fc <vTaskSwitchContext+0xc0>)
  4028e2:	601a      	str	r2, [r3, #0]
  4028e4:	bd10      	pop	{r4, pc}
  4028e6:	6860      	ldr	r0, [r4, #4]
  4028e8:	4a07      	ldr	r2, [pc, #28]	; (402908 <vTaskSwitchContext+0xcc>)
  4028ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4028ee:	6050      	str	r0, [r2, #4]
  4028f0:	e7ef      	b.n	4028d2 <vTaskSwitchContext+0x96>
  4028f2:	bf00      	nop
  4028f4:	20400ce0 	.word	0x20400ce0
  4028f8:	20400d64 	.word	0x20400d64
  4028fc:	20400c68 	.word	0x20400c68
  402900:	0040342d 	.word	0x0040342d
  402904:	20400cec 	.word	0x20400cec
  402908:	20400c74 	.word	0x20400c74

0040290c <vTaskPlaceOnEventList>:
{
  40290c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40290e:	b1e0      	cbz	r0, 40294a <vTaskPlaceOnEventList+0x3e>
  402910:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402912:	4d17      	ldr	r5, [pc, #92]	; (402970 <vTaskPlaceOnEventList+0x64>)
  402914:	6829      	ldr	r1, [r5, #0]
  402916:	3118      	adds	r1, #24
  402918:	4b16      	ldr	r3, [pc, #88]	; (402974 <vTaskPlaceOnEventList+0x68>)
  40291a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40291c:	6828      	ldr	r0, [r5, #0]
  40291e:	3004      	adds	r0, #4
  402920:	4b15      	ldr	r3, [pc, #84]	; (402978 <vTaskPlaceOnEventList+0x6c>)
  402922:	4798      	blx	r3
  402924:	b940      	cbnz	r0, 402938 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402926:	682a      	ldr	r2, [r5, #0]
  402928:	4914      	ldr	r1, [pc, #80]	; (40297c <vTaskPlaceOnEventList+0x70>)
  40292a:	680b      	ldr	r3, [r1, #0]
  40292c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40292e:	2201      	movs	r2, #1
  402930:	4082      	lsls	r2, r0
  402932:	ea23 0302 	bic.w	r3, r3, r2
  402936:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402938:	f1b4 3fff 	cmp.w	r4, #4294967295
  40293c:	d010      	beq.n	402960 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40293e:	4b10      	ldr	r3, [pc, #64]	; (402980 <vTaskPlaceOnEventList+0x74>)
  402940:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402942:	4420      	add	r0, r4
  402944:	4b0f      	ldr	r3, [pc, #60]	; (402984 <vTaskPlaceOnEventList+0x78>)
  402946:	4798      	blx	r3
  402948:	bd38      	pop	{r3, r4, r5, pc}
  40294a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294e:	b672      	cpsid	i
  402950:	f383 8811 	msr	BASEPRI, r3
  402954:	f3bf 8f6f 	isb	sy
  402958:	f3bf 8f4f 	dsb	sy
  40295c:	b662      	cpsie	i
  40295e:	e7fe      	b.n	40295e <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402960:	4b03      	ldr	r3, [pc, #12]	; (402970 <vTaskPlaceOnEventList+0x64>)
  402962:	6819      	ldr	r1, [r3, #0]
  402964:	3104      	adds	r1, #4
  402966:	4808      	ldr	r0, [pc, #32]	; (402988 <vTaskPlaceOnEventList+0x7c>)
  402968:	4b08      	ldr	r3, [pc, #32]	; (40298c <vTaskPlaceOnEventList+0x80>)
  40296a:	4798      	blx	r3
  40296c:	bd38      	pop	{r3, r4, r5, pc}
  40296e:	bf00      	nop
  402970:	20400c68 	.word	0x20400c68
  402974:	00401475 	.word	0x00401475
  402978:	004014a9 	.word	0x004014a9
  40297c:	20400cec 	.word	0x20400cec
  402980:	20400d60 	.word	0x20400d60
  402984:	00402175 	.word	0x00402175
  402988:	20400d38 	.word	0x20400d38
  40298c:	0040145d 	.word	0x0040145d

00402990 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402990:	b1e8      	cbz	r0, 4029ce <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402992:	b570      	push	{r4, r5, r6, lr}
  402994:	4615      	mov	r5, r2
  402996:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402998:	4e16      	ldr	r6, [pc, #88]	; (4029f4 <vTaskPlaceOnEventListRestricted+0x64>)
  40299a:	6831      	ldr	r1, [r6, #0]
  40299c:	3118      	adds	r1, #24
  40299e:	4b16      	ldr	r3, [pc, #88]	; (4029f8 <vTaskPlaceOnEventListRestricted+0x68>)
  4029a0:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029a2:	6830      	ldr	r0, [r6, #0]
  4029a4:	3004      	adds	r0, #4
  4029a6:	4b15      	ldr	r3, [pc, #84]	; (4029fc <vTaskPlaceOnEventListRestricted+0x6c>)
  4029a8:	4798      	blx	r3
  4029aa:	b940      	cbnz	r0, 4029be <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029ac:	6832      	ldr	r2, [r6, #0]
  4029ae:	4914      	ldr	r1, [pc, #80]	; (402a00 <vTaskPlaceOnEventListRestricted+0x70>)
  4029b0:	680b      	ldr	r3, [r1, #0]
  4029b2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4029b4:	2201      	movs	r2, #1
  4029b6:	4082      	lsls	r2, r0
  4029b8:	ea23 0302 	bic.w	r3, r3, r2
  4029bc:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4029be:	2d01      	cmp	r5, #1
  4029c0:	d010      	beq.n	4029e4 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4029c2:	4b10      	ldr	r3, [pc, #64]	; (402a04 <vTaskPlaceOnEventListRestricted+0x74>)
  4029c4:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029c6:	4420      	add	r0, r4
  4029c8:	4b0f      	ldr	r3, [pc, #60]	; (402a08 <vTaskPlaceOnEventListRestricted+0x78>)
  4029ca:	4798      	blx	r3
  4029cc:	bd70      	pop	{r4, r5, r6, pc}
  4029ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029d2:	b672      	cpsid	i
  4029d4:	f383 8811 	msr	BASEPRI, r3
  4029d8:	f3bf 8f6f 	isb	sy
  4029dc:	f3bf 8f4f 	dsb	sy
  4029e0:	b662      	cpsie	i
  4029e2:	e7fe      	b.n	4029e2 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4029e4:	4b03      	ldr	r3, [pc, #12]	; (4029f4 <vTaskPlaceOnEventListRestricted+0x64>)
  4029e6:	6819      	ldr	r1, [r3, #0]
  4029e8:	3104      	adds	r1, #4
  4029ea:	4808      	ldr	r0, [pc, #32]	; (402a0c <vTaskPlaceOnEventListRestricted+0x7c>)
  4029ec:	4b02      	ldr	r3, [pc, #8]	; (4029f8 <vTaskPlaceOnEventListRestricted+0x68>)
  4029ee:	4798      	blx	r3
  4029f0:	bd70      	pop	{r4, r5, r6, pc}
  4029f2:	bf00      	nop
  4029f4:	20400c68 	.word	0x20400c68
  4029f8:	0040145d 	.word	0x0040145d
  4029fc:	004014a9 	.word	0x004014a9
  402a00:	20400cec 	.word	0x20400cec
  402a04:	20400d60 	.word	0x20400d60
  402a08:	00402175 	.word	0x00402175
  402a0c:	20400d38 	.word	0x20400d38

00402a10 <xTaskRemoveFromEventList>:
{
  402a10:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402a12:	68c3      	ldr	r3, [r0, #12]
  402a14:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402a16:	b324      	cbz	r4, 402a62 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402a18:	f104 0518 	add.w	r5, r4, #24
  402a1c:	4628      	mov	r0, r5
  402a1e:	4b1a      	ldr	r3, [pc, #104]	; (402a88 <xTaskRemoveFromEventList+0x78>)
  402a20:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a22:	4b1a      	ldr	r3, [pc, #104]	; (402a8c <xTaskRemoveFromEventList+0x7c>)
  402a24:	681b      	ldr	r3, [r3, #0]
  402a26:	bb3b      	cbnz	r3, 402a78 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402a28:	1d25      	adds	r5, r4, #4
  402a2a:	4628      	mov	r0, r5
  402a2c:	4b16      	ldr	r3, [pc, #88]	; (402a88 <xTaskRemoveFromEventList+0x78>)
  402a2e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402a30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a32:	4a17      	ldr	r2, [pc, #92]	; (402a90 <xTaskRemoveFromEventList+0x80>)
  402a34:	6811      	ldr	r1, [r2, #0]
  402a36:	2301      	movs	r3, #1
  402a38:	4083      	lsls	r3, r0
  402a3a:	430b      	orrs	r3, r1
  402a3c:	6013      	str	r3, [r2, #0]
  402a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a42:	4629      	mov	r1, r5
  402a44:	4b13      	ldr	r3, [pc, #76]	; (402a94 <xTaskRemoveFromEventList+0x84>)
  402a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a4a:	4b13      	ldr	r3, [pc, #76]	; (402a98 <xTaskRemoveFromEventList+0x88>)
  402a4c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a4e:	4b13      	ldr	r3, [pc, #76]	; (402a9c <xTaskRemoveFromEventList+0x8c>)
  402a50:	681b      	ldr	r3, [r3, #0]
  402a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a56:	429a      	cmp	r2, r3
  402a58:	d913      	bls.n	402a82 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a5a:	2001      	movs	r0, #1
  402a5c:	4b10      	ldr	r3, [pc, #64]	; (402aa0 <xTaskRemoveFromEventList+0x90>)
  402a5e:	6018      	str	r0, [r3, #0]
  402a60:	bd38      	pop	{r3, r4, r5, pc}
  402a62:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a66:	b672      	cpsid	i
  402a68:	f383 8811 	msr	BASEPRI, r3
  402a6c:	f3bf 8f6f 	isb	sy
  402a70:	f3bf 8f4f 	dsb	sy
  402a74:	b662      	cpsie	i
  402a76:	e7fe      	b.n	402a76 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a78:	4629      	mov	r1, r5
  402a7a:	480a      	ldr	r0, [pc, #40]	; (402aa4 <xTaskRemoveFromEventList+0x94>)
  402a7c:	4b06      	ldr	r3, [pc, #24]	; (402a98 <xTaskRemoveFromEventList+0x88>)
  402a7e:	4798      	blx	r3
  402a80:	e7e5      	b.n	402a4e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402a82:	2000      	movs	r0, #0
}
  402a84:	bd38      	pop	{r3, r4, r5, pc}
  402a86:	bf00      	nop
  402a88:	004014a9 	.word	0x004014a9
  402a8c:	20400ce0 	.word	0x20400ce0
  402a90:	20400cec 	.word	0x20400cec
  402a94:	20400c74 	.word	0x20400c74
  402a98:	0040145d 	.word	0x0040145d
  402a9c:	20400c68 	.word	0x20400c68
  402aa0:	20400d64 	.word	0x20400d64
  402aa4:	20400d20 	.word	0x20400d20

00402aa8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402aa8:	b130      	cbz	r0, 402ab8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402aaa:	4a09      	ldr	r2, [pc, #36]	; (402ad0 <vTaskSetTimeOutState+0x28>)
  402aac:	6812      	ldr	r2, [r2, #0]
  402aae:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ab0:	4a08      	ldr	r2, [pc, #32]	; (402ad4 <vTaskSetTimeOutState+0x2c>)
  402ab2:	6812      	ldr	r2, [r2, #0]
  402ab4:	6042      	str	r2, [r0, #4]
  402ab6:	4770      	bx	lr
  402ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402abc:	b672      	cpsid	i
  402abe:	f383 8811 	msr	BASEPRI, r3
  402ac2:	f3bf 8f6f 	isb	sy
  402ac6:	f3bf 8f4f 	dsb	sy
  402aca:	b662      	cpsie	i
  402acc:	e7fe      	b.n	402acc <vTaskSetTimeOutState+0x24>
  402ace:	bf00      	nop
  402ad0:	20400d1c 	.word	0x20400d1c
  402ad4:	20400d60 	.word	0x20400d60

00402ad8 <xTaskCheckForTimeOut>:
{
  402ad8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402ada:	b1c0      	cbz	r0, 402b0e <xTaskCheckForTimeOut+0x36>
  402adc:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ade:	b309      	cbz	r1, 402b24 <xTaskCheckForTimeOut+0x4c>
  402ae0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402ae2:	4b1d      	ldr	r3, [pc, #116]	; (402b58 <xTaskCheckForTimeOut+0x80>)
  402ae4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402ae6:	4b1d      	ldr	r3, [pc, #116]	; (402b5c <xTaskCheckForTimeOut+0x84>)
  402ae8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402aea:	682b      	ldr	r3, [r5, #0]
  402aec:	f1b3 3fff 	cmp.w	r3, #4294967295
  402af0:	d02e      	beq.n	402b50 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402af2:	491b      	ldr	r1, [pc, #108]	; (402b60 <xTaskCheckForTimeOut+0x88>)
  402af4:	6809      	ldr	r1, [r1, #0]
  402af6:	6820      	ldr	r0, [r4, #0]
  402af8:	4288      	cmp	r0, r1
  402afa:	d002      	beq.n	402b02 <xTaskCheckForTimeOut+0x2a>
  402afc:	6861      	ldr	r1, [r4, #4]
  402afe:	428a      	cmp	r2, r1
  402b00:	d228      	bcs.n	402b54 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402b02:	6861      	ldr	r1, [r4, #4]
  402b04:	1a50      	subs	r0, r2, r1
  402b06:	4283      	cmp	r3, r0
  402b08:	d817      	bhi.n	402b3a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402b0a:	2401      	movs	r4, #1
  402b0c:	e01c      	b.n	402b48 <xTaskCheckForTimeOut+0x70>
  402b0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b12:	b672      	cpsid	i
  402b14:	f383 8811 	msr	BASEPRI, r3
  402b18:	f3bf 8f6f 	isb	sy
  402b1c:	f3bf 8f4f 	dsb	sy
  402b20:	b662      	cpsie	i
  402b22:	e7fe      	b.n	402b22 <xTaskCheckForTimeOut+0x4a>
  402b24:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b28:	b672      	cpsid	i
  402b2a:	f383 8811 	msr	BASEPRI, r3
  402b2e:	f3bf 8f6f 	isb	sy
  402b32:	f3bf 8f4f 	dsb	sy
  402b36:	b662      	cpsie	i
  402b38:	e7fe      	b.n	402b38 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402b3a:	1a9b      	subs	r3, r3, r2
  402b3c:	440b      	add	r3, r1
  402b3e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402b40:	4620      	mov	r0, r4
  402b42:	4b08      	ldr	r3, [pc, #32]	; (402b64 <xTaskCheckForTimeOut+0x8c>)
  402b44:	4798      	blx	r3
			xReturn = pdFALSE;
  402b46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b48:	4b07      	ldr	r3, [pc, #28]	; (402b68 <xTaskCheckForTimeOut+0x90>)
  402b4a:	4798      	blx	r3
}
  402b4c:	4620      	mov	r0, r4
  402b4e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b50:	2400      	movs	r4, #0
  402b52:	e7f9      	b.n	402b48 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b54:	2401      	movs	r4, #1
  402b56:	e7f7      	b.n	402b48 <xTaskCheckForTimeOut+0x70>
  402b58:	0040158d 	.word	0x0040158d
  402b5c:	20400d60 	.word	0x20400d60
  402b60:	20400d1c 	.word	0x20400d1c
  402b64:	00402aa9 	.word	0x00402aa9
  402b68:	004015d9 	.word	0x004015d9

00402b6c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b6c:	2201      	movs	r2, #1
  402b6e:	4b01      	ldr	r3, [pc, #4]	; (402b74 <vTaskMissedYield+0x8>)
  402b70:	601a      	str	r2, [r3, #0]
  402b72:	4770      	bx	lr
  402b74:	20400d64 	.word	0x20400d64

00402b78 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b78:	4b05      	ldr	r3, [pc, #20]	; (402b90 <xTaskGetSchedulerState+0x18>)
  402b7a:	681b      	ldr	r3, [r3, #0]
  402b7c:	b133      	cbz	r3, 402b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b7e:	4b05      	ldr	r3, [pc, #20]	; (402b94 <xTaskGetSchedulerState+0x1c>)
  402b80:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402b82:	2b00      	cmp	r3, #0
  402b84:	bf0c      	ite	eq
  402b86:	2002      	moveq	r0, #2
  402b88:	2000      	movne	r0, #0
  402b8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402b8c:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402b8e:	4770      	bx	lr
  402b90:	20400d34 	.word	0x20400d34
  402b94:	20400ce0 	.word	0x20400ce0

00402b98 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402b98:	2800      	cmp	r0, #0
  402b9a:	d044      	beq.n	402c26 <vTaskPriorityInherit+0x8e>
	{
  402b9c:	b538      	push	{r3, r4, r5, lr}
  402b9e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402ba0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402ba2:	4921      	ldr	r1, [pc, #132]	; (402c28 <vTaskPriorityInherit+0x90>)
  402ba4:	6809      	ldr	r1, [r1, #0]
  402ba6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402ba8:	428a      	cmp	r2, r1
  402baa:	d214      	bcs.n	402bd6 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402bac:	6981      	ldr	r1, [r0, #24]
  402bae:	2900      	cmp	r1, #0
  402bb0:	db05      	blt.n	402bbe <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bb2:	491d      	ldr	r1, [pc, #116]	; (402c28 <vTaskPriorityInherit+0x90>)
  402bb4:	6809      	ldr	r1, [r1, #0]
  402bb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bb8:	f1c1 0105 	rsb	r1, r1, #5
  402bbc:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402bbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402bc2:	491a      	ldr	r1, [pc, #104]	; (402c2c <vTaskPriorityInherit+0x94>)
  402bc4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402bc8:	6961      	ldr	r1, [r4, #20]
  402bca:	4291      	cmp	r1, r2
  402bcc:	d004      	beq.n	402bd8 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bce:	4a16      	ldr	r2, [pc, #88]	; (402c28 <vTaskPriorityInherit+0x90>)
  402bd0:	6812      	ldr	r2, [r2, #0]
  402bd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402bd4:	62e2      	str	r2, [r4, #44]	; 0x2c
  402bd6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402bd8:	1d25      	adds	r5, r4, #4
  402bda:	4628      	mov	r0, r5
  402bdc:	4b14      	ldr	r3, [pc, #80]	; (402c30 <vTaskPriorityInherit+0x98>)
  402bde:	4798      	blx	r3
  402be0:	b970      	cbnz	r0, 402c00 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402be4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402be8:	4a10      	ldr	r2, [pc, #64]	; (402c2c <vTaskPriorityInherit+0x94>)
  402bea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402bee:	b93a      	cbnz	r2, 402c00 <vTaskPriorityInherit+0x68>
  402bf0:	4810      	ldr	r0, [pc, #64]	; (402c34 <vTaskPriorityInherit+0x9c>)
  402bf2:	6802      	ldr	r2, [r0, #0]
  402bf4:	2101      	movs	r1, #1
  402bf6:	fa01 f303 	lsl.w	r3, r1, r3
  402bfa:	ea22 0303 	bic.w	r3, r2, r3
  402bfe:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402c00:	4b09      	ldr	r3, [pc, #36]	; (402c28 <vTaskPriorityInherit+0x90>)
  402c02:	681b      	ldr	r3, [r3, #0]
  402c04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402c06:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402c08:	4a0a      	ldr	r2, [pc, #40]	; (402c34 <vTaskPriorityInherit+0x9c>)
  402c0a:	6811      	ldr	r1, [r2, #0]
  402c0c:	2301      	movs	r3, #1
  402c0e:	4083      	lsls	r3, r0
  402c10:	430b      	orrs	r3, r1
  402c12:	6013      	str	r3, [r2, #0]
  402c14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c18:	4629      	mov	r1, r5
  402c1a:	4b04      	ldr	r3, [pc, #16]	; (402c2c <vTaskPriorityInherit+0x94>)
  402c1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c20:	4b05      	ldr	r3, [pc, #20]	; (402c38 <vTaskPriorityInherit+0xa0>)
  402c22:	4798      	blx	r3
  402c24:	bd38      	pop	{r3, r4, r5, pc}
  402c26:	4770      	bx	lr
  402c28:	20400c68 	.word	0x20400c68
  402c2c:	20400c74 	.word	0x20400c74
  402c30:	004014a9 	.word	0x004014a9
  402c34:	20400cec 	.word	0x20400cec
  402c38:	0040145d 	.word	0x0040145d

00402c3c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402c3c:	2800      	cmp	r0, #0
  402c3e:	d04d      	beq.n	402cdc <xTaskPriorityDisinherit+0xa0>
	{
  402c40:	b538      	push	{r3, r4, r5, lr}
  402c42:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c44:	4a27      	ldr	r2, [pc, #156]	; (402ce4 <xTaskPriorityDisinherit+0xa8>)
  402c46:	6812      	ldr	r2, [r2, #0]
  402c48:	4290      	cmp	r0, r2
  402c4a:	d00a      	beq.n	402c62 <xTaskPriorityDisinherit+0x26>
  402c4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c50:	b672      	cpsid	i
  402c52:	f383 8811 	msr	BASEPRI, r3
  402c56:	f3bf 8f6f 	isb	sy
  402c5a:	f3bf 8f4f 	dsb	sy
  402c5e:	b662      	cpsie	i
  402c60:	e7fe      	b.n	402c60 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c62:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c64:	b952      	cbnz	r2, 402c7c <xTaskPriorityDisinherit+0x40>
  402c66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6a:	b672      	cpsid	i
  402c6c:	f383 8811 	msr	BASEPRI, r3
  402c70:	f3bf 8f6f 	isb	sy
  402c74:	f3bf 8f4f 	dsb	sy
  402c78:	b662      	cpsie	i
  402c7a:	e7fe      	b.n	402c7a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402c7c:	3a01      	subs	r2, #1
  402c7e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402c80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c82:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402c84:	4288      	cmp	r0, r1
  402c86:	d02b      	beq.n	402ce0 <xTaskPriorityDisinherit+0xa4>
  402c88:	bb52      	cbnz	r2, 402ce0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c8a:	1d25      	adds	r5, r4, #4
  402c8c:	4628      	mov	r0, r5
  402c8e:	4b16      	ldr	r3, [pc, #88]	; (402ce8 <xTaskPriorityDisinherit+0xac>)
  402c90:	4798      	blx	r3
  402c92:	b968      	cbnz	r0, 402cb0 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402c96:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402c9a:	4b14      	ldr	r3, [pc, #80]	; (402cec <xTaskPriorityDisinherit+0xb0>)
  402c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402ca0:	b933      	cbnz	r3, 402cb0 <xTaskPriorityDisinherit+0x74>
  402ca2:	4813      	ldr	r0, [pc, #76]	; (402cf0 <xTaskPriorityDisinherit+0xb4>)
  402ca4:	6803      	ldr	r3, [r0, #0]
  402ca6:	2201      	movs	r2, #1
  402ca8:	408a      	lsls	r2, r1
  402caa:	ea23 0302 	bic.w	r3, r3, r2
  402cae:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402cb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402cb2:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402cb4:	f1c0 0305 	rsb	r3, r0, #5
  402cb8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402cba:	4a0d      	ldr	r2, [pc, #52]	; (402cf0 <xTaskPriorityDisinherit+0xb4>)
  402cbc:	6811      	ldr	r1, [r2, #0]
  402cbe:	2401      	movs	r4, #1
  402cc0:	fa04 f300 	lsl.w	r3, r4, r0
  402cc4:	430b      	orrs	r3, r1
  402cc6:	6013      	str	r3, [r2, #0]
  402cc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ccc:	4629      	mov	r1, r5
  402cce:	4b07      	ldr	r3, [pc, #28]	; (402cec <xTaskPriorityDisinherit+0xb0>)
  402cd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cd4:	4b07      	ldr	r3, [pc, #28]	; (402cf4 <xTaskPriorityDisinherit+0xb8>)
  402cd6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402cd8:	4620      	mov	r0, r4
  402cda:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402cdc:	2000      	movs	r0, #0
  402cde:	4770      	bx	lr
  402ce0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402ce2:	bd38      	pop	{r3, r4, r5, pc}
  402ce4:	20400c68 	.word	0x20400c68
  402ce8:	004014a9 	.word	0x004014a9
  402cec:	20400c74 	.word	0x20400c74
  402cf0:	20400cec 	.word	0x20400cec
  402cf4:	0040145d 	.word	0x0040145d

00402cf8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402cf8:	4b05      	ldr	r3, [pc, #20]	; (402d10 <pvTaskIncrementMutexHeldCount+0x18>)
  402cfa:	681b      	ldr	r3, [r3, #0]
  402cfc:	b123      	cbz	r3, 402d08 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402cfe:	4b04      	ldr	r3, [pc, #16]	; (402d10 <pvTaskIncrementMutexHeldCount+0x18>)
  402d00:	681a      	ldr	r2, [r3, #0]
  402d02:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402d04:	3301      	adds	r3, #1
  402d06:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402d08:	4b01      	ldr	r3, [pc, #4]	; (402d10 <pvTaskIncrementMutexHeldCount+0x18>)
  402d0a:	6818      	ldr	r0, [r3, #0]
	}
  402d0c:	4770      	bx	lr
  402d0e:	bf00      	nop
  402d10:	20400c68 	.word	0x20400c68

00402d14 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402d14:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402d16:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d18:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402d1a:	4291      	cmp	r1, r2
  402d1c:	d80c      	bhi.n	402d38 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402d1e:	1ad2      	subs	r2, r2, r3
  402d20:	6983      	ldr	r3, [r0, #24]
  402d22:	429a      	cmp	r2, r3
  402d24:	d301      	bcc.n	402d2a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d26:	2001      	movs	r0, #1
  402d28:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d2a:	1d01      	adds	r1, r0, #4
  402d2c:	4b09      	ldr	r3, [pc, #36]	; (402d54 <prvInsertTimerInActiveList+0x40>)
  402d2e:	6818      	ldr	r0, [r3, #0]
  402d30:	4b09      	ldr	r3, [pc, #36]	; (402d58 <prvInsertTimerInActiveList+0x44>)
  402d32:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d34:	2000      	movs	r0, #0
  402d36:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d38:	429a      	cmp	r2, r3
  402d3a:	d203      	bcs.n	402d44 <prvInsertTimerInActiveList+0x30>
  402d3c:	4299      	cmp	r1, r3
  402d3e:	d301      	bcc.n	402d44 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d40:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d42:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d44:	1d01      	adds	r1, r0, #4
  402d46:	4b05      	ldr	r3, [pc, #20]	; (402d5c <prvInsertTimerInActiveList+0x48>)
  402d48:	6818      	ldr	r0, [r3, #0]
  402d4a:	4b03      	ldr	r3, [pc, #12]	; (402d58 <prvInsertTimerInActiveList+0x44>)
  402d4c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d4e:	2000      	movs	r0, #0
  402d50:	bd08      	pop	{r3, pc}
  402d52:	bf00      	nop
  402d54:	20400d6c 	.word	0x20400d6c
  402d58:	00401475 	.word	0x00401475
  402d5c:	20400d68 	.word	0x20400d68

00402d60 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d60:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d62:	4b15      	ldr	r3, [pc, #84]	; (402db8 <prvCheckForValidListAndQueue+0x58>)
  402d64:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d66:	4b15      	ldr	r3, [pc, #84]	; (402dbc <prvCheckForValidListAndQueue+0x5c>)
  402d68:	681b      	ldr	r3, [r3, #0]
  402d6a:	b113      	cbz	r3, 402d72 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d6c:	4b14      	ldr	r3, [pc, #80]	; (402dc0 <prvCheckForValidListAndQueue+0x60>)
  402d6e:	4798      	blx	r3
  402d70:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d72:	4d14      	ldr	r5, [pc, #80]	; (402dc4 <prvCheckForValidListAndQueue+0x64>)
  402d74:	4628      	mov	r0, r5
  402d76:	4e14      	ldr	r6, [pc, #80]	; (402dc8 <prvCheckForValidListAndQueue+0x68>)
  402d78:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d7a:	4c14      	ldr	r4, [pc, #80]	; (402dcc <prvCheckForValidListAndQueue+0x6c>)
  402d7c:	4620      	mov	r0, r4
  402d7e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402d80:	4b13      	ldr	r3, [pc, #76]	; (402dd0 <prvCheckForValidListAndQueue+0x70>)
  402d82:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d84:	4b13      	ldr	r3, [pc, #76]	; (402dd4 <prvCheckForValidListAndQueue+0x74>)
  402d86:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d88:	2200      	movs	r2, #0
  402d8a:	2110      	movs	r1, #16
  402d8c:	2005      	movs	r0, #5
  402d8e:	4b12      	ldr	r3, [pc, #72]	; (402dd8 <prvCheckForValidListAndQueue+0x78>)
  402d90:	4798      	blx	r3
  402d92:	4b0a      	ldr	r3, [pc, #40]	; (402dbc <prvCheckForValidListAndQueue+0x5c>)
  402d94:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402d96:	b118      	cbz	r0, 402da0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d98:	4910      	ldr	r1, [pc, #64]	; (402ddc <prvCheckForValidListAndQueue+0x7c>)
  402d9a:	4b11      	ldr	r3, [pc, #68]	; (402de0 <prvCheckForValidListAndQueue+0x80>)
  402d9c:	4798      	blx	r3
  402d9e:	e7e5      	b.n	402d6c <prvCheckForValidListAndQueue+0xc>
  402da0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402da4:	b672      	cpsid	i
  402da6:	f383 8811 	msr	BASEPRI, r3
  402daa:	f3bf 8f6f 	isb	sy
  402dae:	f3bf 8f4f 	dsb	sy
  402db2:	b662      	cpsie	i
  402db4:	e7fe      	b.n	402db4 <prvCheckForValidListAndQueue+0x54>
  402db6:	bf00      	nop
  402db8:	0040158d 	.word	0x0040158d
  402dbc:	20400d9c 	.word	0x20400d9c
  402dc0:	004015d9 	.word	0x004015d9
  402dc4:	20400d70 	.word	0x20400d70
  402dc8:	00401441 	.word	0x00401441
  402dcc:	20400d84 	.word	0x20400d84
  402dd0:	20400d68 	.word	0x20400d68
  402dd4:	20400d6c 	.word	0x20400d6c
  402dd8:	00401aad 	.word	0x00401aad
  402ddc:	00409154 	.word	0x00409154
  402de0:	004020bd 	.word	0x004020bd

00402de4 <xTimerCreateTimerTask>:
{
  402de4:	b510      	push	{r4, lr}
  402de6:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402de8:	4b0f      	ldr	r3, [pc, #60]	; (402e28 <xTimerCreateTimerTask+0x44>)
  402dea:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402dec:	4b0f      	ldr	r3, [pc, #60]	; (402e2c <xTimerCreateTimerTask+0x48>)
  402dee:	681b      	ldr	r3, [r3, #0]
  402df0:	b173      	cbz	r3, 402e10 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402df2:	2300      	movs	r3, #0
  402df4:	9303      	str	r3, [sp, #12]
  402df6:	9302      	str	r3, [sp, #8]
  402df8:	9301      	str	r3, [sp, #4]
  402dfa:	2204      	movs	r2, #4
  402dfc:	9200      	str	r2, [sp, #0]
  402dfe:	f44f 7282 	mov.w	r2, #260	; 0x104
  402e02:	490b      	ldr	r1, [pc, #44]	; (402e30 <xTimerCreateTimerTask+0x4c>)
  402e04:	480b      	ldr	r0, [pc, #44]	; (402e34 <xTimerCreateTimerTask+0x50>)
  402e06:	4c0c      	ldr	r4, [pc, #48]	; (402e38 <xTimerCreateTimerTask+0x54>)
  402e08:	47a0      	blx	r4
	configASSERT( xReturn );
  402e0a:	b108      	cbz	r0, 402e10 <xTimerCreateTimerTask+0x2c>
}
  402e0c:	b004      	add	sp, #16
  402e0e:	bd10      	pop	{r4, pc}
  402e10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e14:	b672      	cpsid	i
  402e16:	f383 8811 	msr	BASEPRI, r3
  402e1a:	f3bf 8f6f 	isb	sy
  402e1e:	f3bf 8f4f 	dsb	sy
  402e22:	b662      	cpsie	i
  402e24:	e7fe      	b.n	402e24 <xTimerCreateTimerTask+0x40>
  402e26:	bf00      	nop
  402e28:	00402d61 	.word	0x00402d61
  402e2c:	20400d9c 	.word	0x20400d9c
  402e30:	0040915c 	.word	0x0040915c
  402e34:	00402f65 	.word	0x00402f65
  402e38:	004021cd 	.word	0x004021cd

00402e3c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e3c:	b1d8      	cbz	r0, 402e76 <xTimerGenericCommand+0x3a>
{
  402e3e:	b530      	push	{r4, r5, lr}
  402e40:	b085      	sub	sp, #20
  402e42:	4615      	mov	r5, r2
  402e44:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e46:	4a15      	ldr	r2, [pc, #84]	; (402e9c <xTimerGenericCommand+0x60>)
  402e48:	6810      	ldr	r0, [r2, #0]
  402e4a:	b320      	cbz	r0, 402e96 <xTimerGenericCommand+0x5a>
  402e4c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402e4e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402e50:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402e52:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402e54:	2905      	cmp	r1, #5
  402e56:	dc19      	bgt.n	402e8c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402e58:	4b11      	ldr	r3, [pc, #68]	; (402ea0 <xTimerGenericCommand+0x64>)
  402e5a:	4798      	blx	r3
  402e5c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402e5e:	f04f 0300 	mov.w	r3, #0
  402e62:	bf0c      	ite	eq
  402e64:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402e66:	461a      	movne	r2, r3
  402e68:	4669      	mov	r1, sp
  402e6a:	480c      	ldr	r0, [pc, #48]	; (402e9c <xTimerGenericCommand+0x60>)
  402e6c:	6800      	ldr	r0, [r0, #0]
  402e6e:	4c0d      	ldr	r4, [pc, #52]	; (402ea4 <xTimerGenericCommand+0x68>)
  402e70:	47a0      	blx	r4
}
  402e72:	b005      	add	sp, #20
  402e74:	bd30      	pop	{r4, r5, pc}
  402e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7a:	b672      	cpsid	i
  402e7c:	f383 8811 	msr	BASEPRI, r3
  402e80:	f3bf 8f6f 	isb	sy
  402e84:	f3bf 8f4f 	dsb	sy
  402e88:	b662      	cpsie	i
  402e8a:	e7fe      	b.n	402e8a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402e8c:	2300      	movs	r3, #0
  402e8e:	4669      	mov	r1, sp
  402e90:	4c05      	ldr	r4, [pc, #20]	; (402ea8 <xTimerGenericCommand+0x6c>)
  402e92:	47a0      	blx	r4
  402e94:	e7ed      	b.n	402e72 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402e96:	2000      	movs	r0, #0
	return xReturn;
  402e98:	e7eb      	b.n	402e72 <xTimerGenericCommand+0x36>
  402e9a:	bf00      	nop
  402e9c:	20400d9c 	.word	0x20400d9c
  402ea0:	00402b79 	.word	0x00402b79
  402ea4:	00401b29 	.word	0x00401b29
  402ea8:	00401d0d 	.word	0x00401d0d

00402eac <prvSampleTimeNow>:
{
  402eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402eb0:	b082      	sub	sp, #8
  402eb2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402eb4:	4b24      	ldr	r3, [pc, #144]	; (402f48 <prvSampleTimeNow+0x9c>)
  402eb6:	4798      	blx	r3
  402eb8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402eba:	4b24      	ldr	r3, [pc, #144]	; (402f4c <prvSampleTimeNow+0xa0>)
  402ebc:	681b      	ldr	r3, [r3, #0]
  402ebe:	4298      	cmp	r0, r3
  402ec0:	d31b      	bcc.n	402efa <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402ec2:	2300      	movs	r3, #0
  402ec4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402ec8:	4b20      	ldr	r3, [pc, #128]	; (402f4c <prvSampleTimeNow+0xa0>)
  402eca:	601f      	str	r7, [r3, #0]
}
  402ecc:	4638      	mov	r0, r7
  402ece:	b002      	add	sp, #8
  402ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ed4:	2100      	movs	r1, #0
  402ed6:	9100      	str	r1, [sp, #0]
  402ed8:	460b      	mov	r3, r1
  402eda:	4652      	mov	r2, sl
  402edc:	4620      	mov	r0, r4
  402ede:	4c1c      	ldr	r4, [pc, #112]	; (402f50 <prvSampleTimeNow+0xa4>)
  402ee0:	47a0      	blx	r4
				configASSERT( xResult );
  402ee2:	b960      	cbnz	r0, 402efe <prvSampleTimeNow+0x52>
  402ee4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ee8:	b672      	cpsid	i
  402eea:	f383 8811 	msr	BASEPRI, r3
  402eee:	f3bf 8f6f 	isb	sy
  402ef2:	f3bf 8f4f 	dsb	sy
  402ef6:	b662      	cpsie	i
  402ef8:	e7fe      	b.n	402ef8 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402efa:	4d16      	ldr	r5, [pc, #88]	; (402f54 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402efc:	4e16      	ldr	r6, [pc, #88]	; (402f58 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402efe:	682b      	ldr	r3, [r5, #0]
  402f00:	681a      	ldr	r2, [r3, #0]
  402f02:	b1c2      	cbz	r2, 402f36 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f04:	68db      	ldr	r3, [r3, #12]
  402f06:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f0a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f0c:	f104 0904 	add.w	r9, r4, #4
  402f10:	4648      	mov	r0, r9
  402f12:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f16:	4620      	mov	r0, r4
  402f18:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f1a:	69e3      	ldr	r3, [r4, #28]
  402f1c:	2b01      	cmp	r3, #1
  402f1e:	d1ee      	bne.n	402efe <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402f20:	69a3      	ldr	r3, [r4, #24]
  402f22:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402f24:	459a      	cmp	sl, r3
  402f26:	d2d5      	bcs.n	402ed4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f28:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f2a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f2c:	4649      	mov	r1, r9
  402f2e:	6828      	ldr	r0, [r5, #0]
  402f30:	4b0a      	ldr	r3, [pc, #40]	; (402f5c <prvSampleTimeNow+0xb0>)
  402f32:	4798      	blx	r3
  402f34:	e7e3      	b.n	402efe <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402f36:	4a0a      	ldr	r2, [pc, #40]	; (402f60 <prvSampleTimeNow+0xb4>)
  402f38:	6810      	ldr	r0, [r2, #0]
  402f3a:	4906      	ldr	r1, [pc, #24]	; (402f54 <prvSampleTimeNow+0xa8>)
  402f3c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f3e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402f40:	2301      	movs	r3, #1
  402f42:	f8c8 3000 	str.w	r3, [r8]
  402f46:	e7bf      	b.n	402ec8 <prvSampleTimeNow+0x1c>
  402f48:	0040249d 	.word	0x0040249d
  402f4c:	20400d98 	.word	0x20400d98
  402f50:	00402e3d 	.word	0x00402e3d
  402f54:	20400d68 	.word	0x20400d68
  402f58:	004014a9 	.word	0x004014a9
  402f5c:	00401475 	.word	0x00401475
  402f60:	20400d6c 	.word	0x20400d6c

00402f64 <prvTimerTask>:
{
  402f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f68:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f6a:	4e75      	ldr	r6, [pc, #468]	; (403140 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402f6c:	4f75      	ldr	r7, [pc, #468]	; (403144 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402f6e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 40316c <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f72:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403170 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f76:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402f78:	681a      	ldr	r2, [r3, #0]
  402f7a:	2a00      	cmp	r2, #0
  402f7c:	f000 80ce 	beq.w	40311c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f80:	68db      	ldr	r3, [r3, #12]
  402f82:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402f84:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402f86:	a804      	add	r0, sp, #16
  402f88:	4b6f      	ldr	r3, [pc, #444]	; (403148 <prvTimerTask+0x1e4>)
  402f8a:	4798      	blx	r3
  402f8c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402f8e:	9b04      	ldr	r3, [sp, #16]
  402f90:	2b00      	cmp	r3, #0
  402f92:	d144      	bne.n	40301e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402f94:	42a0      	cmp	r0, r4
  402f96:	d212      	bcs.n	402fbe <prvTimerTask+0x5a>
  402f98:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402f9a:	1b61      	subs	r1, r4, r5
  402f9c:	4b6b      	ldr	r3, [pc, #428]	; (40314c <prvTimerTask+0x1e8>)
  402f9e:	6818      	ldr	r0, [r3, #0]
  402fa0:	4b6b      	ldr	r3, [pc, #428]	; (403150 <prvTimerTask+0x1ec>)
  402fa2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402fa4:	4b6b      	ldr	r3, [pc, #428]	; (403154 <prvTimerTask+0x1f0>)
  402fa6:	4798      	blx	r3
  402fa8:	2800      	cmp	r0, #0
  402faa:	d13a      	bne.n	403022 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402fb0:	f8c9 3000 	str.w	r3, [r9]
  402fb4:	f3bf 8f4f 	dsb	sy
  402fb8:	f3bf 8f6f 	isb	sy
  402fbc:	e031      	b.n	403022 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402fbe:	4b65      	ldr	r3, [pc, #404]	; (403154 <prvTimerTask+0x1f0>)
  402fc0:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fc2:	6833      	ldr	r3, [r6, #0]
  402fc4:	68db      	ldr	r3, [r3, #12]
  402fc6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fca:	f10a 0004 	add.w	r0, sl, #4
  402fce:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fd0:	f8da 301c 	ldr.w	r3, [sl, #28]
  402fd4:	2b01      	cmp	r3, #1
  402fd6:	d004      	beq.n	402fe2 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fd8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402fdc:	4650      	mov	r0, sl
  402fde:	4798      	blx	r3
  402fe0:	e01f      	b.n	403022 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402fe2:	f8da 1018 	ldr.w	r1, [sl, #24]
  402fe6:	4623      	mov	r3, r4
  402fe8:	462a      	mov	r2, r5
  402fea:	4421      	add	r1, r4
  402fec:	4650      	mov	r0, sl
  402fee:	4d5a      	ldr	r5, [pc, #360]	; (403158 <prvTimerTask+0x1f4>)
  402ff0:	47a8      	blx	r5
  402ff2:	2801      	cmp	r0, #1
  402ff4:	d1f0      	bne.n	402fd8 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ff6:	2100      	movs	r1, #0
  402ff8:	9100      	str	r1, [sp, #0]
  402ffa:	460b      	mov	r3, r1
  402ffc:	4622      	mov	r2, r4
  402ffe:	4650      	mov	r0, sl
  403000:	4c56      	ldr	r4, [pc, #344]	; (40315c <prvTimerTask+0x1f8>)
  403002:	47a0      	blx	r4
			configASSERT( xResult );
  403004:	2800      	cmp	r0, #0
  403006:	d1e7      	bne.n	402fd8 <prvTimerTask+0x74>
  403008:	f04f 0380 	mov.w	r3, #128	; 0x80
  40300c:	b672      	cpsid	i
  40300e:	f383 8811 	msr	BASEPRI, r3
  403012:	f3bf 8f6f 	isb	sy
  403016:	f3bf 8f4f 	dsb	sy
  40301a:	b662      	cpsie	i
  40301c:	e7fe      	b.n	40301c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40301e:	4b4d      	ldr	r3, [pc, #308]	; (403154 <prvTimerTask+0x1f0>)
  403020:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403022:	4d4a      	ldr	r5, [pc, #296]	; (40314c <prvTimerTask+0x1e8>)
  403024:	4c4e      	ldr	r4, [pc, #312]	; (403160 <prvTimerTask+0x1fc>)
  403026:	e006      	b.n	403036 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403028:	9907      	ldr	r1, [sp, #28]
  40302a:	9806      	ldr	r0, [sp, #24]
  40302c:	9b05      	ldr	r3, [sp, #20]
  40302e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403030:	9b04      	ldr	r3, [sp, #16]
  403032:	2b00      	cmp	r3, #0
  403034:	da09      	bge.n	40304a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403036:	2300      	movs	r3, #0
  403038:	461a      	mov	r2, r3
  40303a:	a904      	add	r1, sp, #16
  40303c:	6828      	ldr	r0, [r5, #0]
  40303e:	47a0      	blx	r4
  403040:	2800      	cmp	r0, #0
  403042:	d098      	beq.n	402f76 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403044:	9b04      	ldr	r3, [sp, #16]
  403046:	2b00      	cmp	r3, #0
  403048:	dbee      	blt.n	403028 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40304a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40304e:	f8da 3014 	ldr.w	r3, [sl, #20]
  403052:	b113      	cbz	r3, 40305a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403054:	f10a 0004 	add.w	r0, sl, #4
  403058:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40305a:	a803      	add	r0, sp, #12
  40305c:	4b3a      	ldr	r3, [pc, #232]	; (403148 <prvTimerTask+0x1e4>)
  40305e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403060:	9b04      	ldr	r3, [sp, #16]
  403062:	2b09      	cmp	r3, #9
  403064:	d8e7      	bhi.n	403036 <prvTimerTask+0xd2>
  403066:	a201      	add	r2, pc, #4	; (adr r2, 40306c <prvTimerTask+0x108>)
  403068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40306c:	00403095 	.word	0x00403095
  403070:	00403095 	.word	0x00403095
  403074:	00403095 	.word	0x00403095
  403078:	00403037 	.word	0x00403037
  40307c:	004030e9 	.word	0x004030e9
  403080:	00403115 	.word	0x00403115
  403084:	00403095 	.word	0x00403095
  403088:	00403095 	.word	0x00403095
  40308c:	00403037 	.word	0x00403037
  403090:	004030e9 	.word	0x004030e9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403094:	9c05      	ldr	r4, [sp, #20]
  403096:	f8da 1018 	ldr.w	r1, [sl, #24]
  40309a:	4623      	mov	r3, r4
  40309c:	4602      	mov	r2, r0
  40309e:	4421      	add	r1, r4
  4030a0:	4650      	mov	r0, sl
  4030a2:	4c2d      	ldr	r4, [pc, #180]	; (403158 <prvTimerTask+0x1f4>)
  4030a4:	47a0      	blx	r4
  4030a6:	2801      	cmp	r0, #1
  4030a8:	d1bc      	bne.n	403024 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4030aa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4030ae:	4650      	mov	r0, sl
  4030b0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4030b2:	f8da 301c 	ldr.w	r3, [sl, #28]
  4030b6:	2b01      	cmp	r3, #1
  4030b8:	d1b4      	bne.n	403024 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4030ba:	f8da 2018 	ldr.w	r2, [sl, #24]
  4030be:	2100      	movs	r1, #0
  4030c0:	9100      	str	r1, [sp, #0]
  4030c2:	460b      	mov	r3, r1
  4030c4:	9805      	ldr	r0, [sp, #20]
  4030c6:	4402      	add	r2, r0
  4030c8:	4650      	mov	r0, sl
  4030ca:	4c24      	ldr	r4, [pc, #144]	; (40315c <prvTimerTask+0x1f8>)
  4030cc:	47a0      	blx	r4
							configASSERT( xResult );
  4030ce:	2800      	cmp	r0, #0
  4030d0:	d1a8      	bne.n	403024 <prvTimerTask+0xc0>
  4030d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030d6:	b672      	cpsid	i
  4030d8:	f383 8811 	msr	BASEPRI, r3
  4030dc:	f3bf 8f6f 	isb	sy
  4030e0:	f3bf 8f4f 	dsb	sy
  4030e4:	b662      	cpsie	i
  4030e6:	e7fe      	b.n	4030e6 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4030e8:	9905      	ldr	r1, [sp, #20]
  4030ea:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4030ee:	b131      	cbz	r1, 4030fe <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4030f0:	4603      	mov	r3, r0
  4030f2:	4602      	mov	r2, r0
  4030f4:	4401      	add	r1, r0
  4030f6:	4650      	mov	r0, sl
  4030f8:	4c17      	ldr	r4, [pc, #92]	; (403158 <prvTimerTask+0x1f4>)
  4030fa:	47a0      	blx	r4
  4030fc:	e792      	b.n	403024 <prvTimerTask+0xc0>
  4030fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  403102:	b672      	cpsid	i
  403104:	f383 8811 	msr	BASEPRI, r3
  403108:	f3bf 8f6f 	isb	sy
  40310c:	f3bf 8f4f 	dsb	sy
  403110:	b662      	cpsie	i
  403112:	e7fe      	b.n	403112 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403114:	4650      	mov	r0, sl
  403116:	4b13      	ldr	r3, [pc, #76]	; (403164 <prvTimerTask+0x200>)
  403118:	4798      	blx	r3
  40311a:	e783      	b.n	403024 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40311c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40311e:	a804      	add	r0, sp, #16
  403120:	4b09      	ldr	r3, [pc, #36]	; (403148 <prvTimerTask+0x1e4>)
  403122:	4798      	blx	r3
  403124:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403126:	9b04      	ldr	r3, [sp, #16]
  403128:	2b00      	cmp	r3, #0
  40312a:	f47f af78 	bne.w	40301e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40312e:	4b0e      	ldr	r3, [pc, #56]	; (403168 <prvTimerTask+0x204>)
  403130:	681b      	ldr	r3, [r3, #0]
  403132:	681a      	ldr	r2, [r3, #0]
  403134:	fab2 f282 	clz	r2, r2
  403138:	0952      	lsrs	r2, r2, #5
  40313a:	2400      	movs	r4, #0
  40313c:	e72d      	b.n	402f9a <prvTimerTask+0x36>
  40313e:	bf00      	nop
  403140:	20400d68 	.word	0x20400d68
  403144:	0040248d 	.word	0x0040248d
  403148:	00402ead 	.word	0x00402ead
  40314c:	20400d9c 	.word	0x20400d9c
  403150:	004020f1 	.word	0x004020f1
  403154:	004025f5 	.word	0x004025f5
  403158:	00402d15 	.word	0x00402d15
  40315c:	00402e3d 	.word	0x00402e3d
  403160:	00401eed 	.word	0x00401eed
  403164:	00401819 	.word	0x00401819
  403168:	20400d6c 	.word	0x20400d6c
  40316c:	e000ed04 	.word	0xe000ed04
  403170:	004014a9 	.word	0x004014a9

00403174 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  403174:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xBtnSemaphore, 0);
  403176:	2100      	movs	r1, #0
  403178:	4b02      	ldr	r3, [pc, #8]	; (403184 <but_callback+0x10>)
  40317a:	6818      	ldr	r0, [r3, #0]
  40317c:	4b02      	ldr	r3, [pc, #8]	; (403188 <but_callback+0x14>)
  40317e:	4798      	blx	r3
  403180:	bd08      	pop	{r3, pc}
  403182:	bf00      	nop
  403184:	20400e24 	.word	0x20400e24
  403188:	00401e0d 	.word	0x00401e0d

0040318c <task_coins>:
/************************************************************************/
/* TASKS                                                                */
/************************************************************************/

static void task_coins(void *pvParameters)
{	
  40318c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40318e:	b083      	sub	sp, #12
	for (;;)  {
		if (xSemaphoreTake(xBtnSemaphore, 1)) {
  403190:	4c1b      	ldr	r4, [pc, #108]	; (403200 <task_coins+0x74>)
				uint32_t tempo = rtt_read_timer_value(RTT);
				srand(tempo);
				printf("Seed: %d\n", tempo);
				flag_rtt = 1;
			}
			int coins = rand() % 3 + 1;
  403192:	4d1c      	ldr	r5, [pc, #112]	; (403204 <task_coins+0x78>)
				uint32_t tempo = rtt_read_timer_value(RTT);
  403194:	4e1c      	ldr	r6, [pc, #112]	; (403208 <task_coins+0x7c>)
  403196:	e019      	b.n	4031cc <task_coins+0x40>
			int coins = rand() % 3 + 1;
  403198:	4b1c      	ldr	r3, [pc, #112]	; (40320c <task_coins+0x80>)
  40319a:	4798      	blx	r3
  40319c:	fb85 3100 	smull	r3, r1, r5, r0
  4031a0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  4031a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4031a8:	1a40      	subs	r0, r0, r1
  4031aa:	1c41      	adds	r1, r0, #1
  4031ac:	af02      	add	r7, sp, #8
  4031ae:	f847 1d04 	str.w	r1, [r7, #-4]!
			printf("Coins: %d\n", coins);
  4031b2:	4817      	ldr	r0, [pc, #92]	; (403210 <task_coins+0x84>)
  4031b4:	4b17      	ldr	r3, [pc, #92]	; (403214 <task_coins+0x88>)
  4031b6:	4798      	blx	r3
			xQueueSend(xQueueCoins, (void *)&coins, 1);
  4031b8:	2300      	movs	r3, #0
  4031ba:	2201      	movs	r2, #1
  4031bc:	4639      	mov	r1, r7
  4031be:	4816      	ldr	r0, [pc, #88]	; (403218 <task_coins+0x8c>)
  4031c0:	6800      	ldr	r0, [r0, #0]
  4031c2:	4f16      	ldr	r7, [pc, #88]	; (40321c <task_coins+0x90>)
  4031c4:	47b8      	blx	r7
		}
		vTaskDelay(1);
  4031c6:	2001      	movs	r0, #1
  4031c8:	4b15      	ldr	r3, [pc, #84]	; (403220 <task_coins+0x94>)
  4031ca:	4798      	blx	r3
		if (xSemaphoreTake(xBtnSemaphore, 1)) {
  4031cc:	2300      	movs	r3, #0
  4031ce:	2201      	movs	r2, #1
  4031d0:	4619      	mov	r1, r3
  4031d2:	6820      	ldr	r0, [r4, #0]
  4031d4:	4f13      	ldr	r7, [pc, #76]	; (403224 <task_coins+0x98>)
  4031d6:	47b8      	blx	r7
  4031d8:	2800      	cmp	r0, #0
  4031da:	d0f4      	beq.n	4031c6 <task_coins+0x3a>
			if (flag_rtt == 0) {
  4031dc:	4b12      	ldr	r3, [pc, #72]	; (403228 <task_coins+0x9c>)
  4031de:	681b      	ldr	r3, [r3, #0]
  4031e0:	2b00      	cmp	r3, #0
  4031e2:	d1d9      	bne.n	403198 <task_coins+0xc>
				uint32_t tempo = rtt_read_timer_value(RTT);
  4031e4:	4630      	mov	r0, r6
  4031e6:	4b11      	ldr	r3, [pc, #68]	; (40322c <task_coins+0xa0>)
  4031e8:	4798      	blx	r3
  4031ea:	4607      	mov	r7, r0
				srand(tempo);
  4031ec:	4b10      	ldr	r3, [pc, #64]	; (403230 <task_coins+0xa4>)
  4031ee:	4798      	blx	r3
				printf("Seed: %d\n", tempo);
  4031f0:	4639      	mov	r1, r7
  4031f2:	4810      	ldr	r0, [pc, #64]	; (403234 <task_coins+0xa8>)
  4031f4:	4b07      	ldr	r3, [pc, #28]	; (403214 <task_coins+0x88>)
  4031f6:	4798      	blx	r3
				flag_rtt = 1;
  4031f8:	2201      	movs	r2, #1
  4031fa:	4b0b      	ldr	r3, [pc, #44]	; (403228 <task_coins+0x9c>)
  4031fc:	601a      	str	r2, [r3, #0]
  4031fe:	e7cb      	b.n	403198 <task_coins+0xc>
  403200:	20400e24 	.word	0x20400e24
  403204:	55555556 	.word	0x55555556
  403208:	400e1830 	.word	0x400e1830
  40320c:	00404d09 	.word	0x00404d09
  403210:	00409228 	.word	0x00409228
  403214:	00404c21 	.word	0x00404c21
  403218:	20400e20 	.word	0x20400e20
  40321c:	00401b29 	.word	0x00401b29
  403220:	00402715 	.word	0x00402715
  403224:	00401eed 	.word	0x00401eed
  403228:	20400e28 	.word	0x20400e28
  40322c:	00400215 	.word	0x00400215
  403230:	00404cf5 	.word	0x00404cf5
  403234:	0040921c 	.word	0x0040921c

00403238 <task_debug>:
		}
		vTaskDelay(1);
	}
}

static void task_debug(void *pvParameters) {
  403238:	b580      	push	{r7, lr}
  40323a:	b082      	sub	sp, #8
	gfx_mono_ssd1306_init();
  40323c:	4b0c      	ldr	r3, [pc, #48]	; (403270 <task_debug+0x38>)
  40323e:	4798      	blx	r3

	for (;;) {
		gfx_mono_draw_filled_circle(10,10,4,1,GFX_WHOLE);
  403240:	f04f 0804 	mov.w	r8, #4
  403244:	270a      	movs	r7, #10
  403246:	4e0b      	ldr	r6, [pc, #44]	; (403274 <task_debug+0x3c>)
  403248:	25ff      	movs	r5, #255	; 0xff
  40324a:	9500      	str	r5, [sp, #0]
  40324c:	2301      	movs	r3, #1
  40324e:	4642      	mov	r2, r8
  403250:	4639      	mov	r1, r7
  403252:	4638      	mov	r0, r7
  403254:	47b0      	blx	r6
		vTaskDelay(150);
  403256:	2096      	movs	r0, #150	; 0x96
  403258:	4c07      	ldr	r4, [pc, #28]	; (403278 <task_debug+0x40>)
  40325a:	47a0      	blx	r4
		gfx_mono_draw_filled_circle(10,10,4,0,GFX_WHOLE);
  40325c:	9500      	str	r5, [sp, #0]
  40325e:	2300      	movs	r3, #0
  403260:	4642      	mov	r2, r8
  403262:	4639      	mov	r1, r7
  403264:	4638      	mov	r0, r7
  403266:	47b0      	blx	r6
		vTaskDelay(150);
  403268:	2096      	movs	r0, #150	; 0x96
  40326a:	47a0      	blx	r4
  40326c:	e7ec      	b.n	403248 <task_debug+0x10>
  40326e:	bf00      	nop
  403270:	004005f1 	.word	0x004005f1
  403274:	00400485 	.word	0x00400485
  403278:	00402715 	.word	0x00402715

0040327c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40327c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40327e:	b083      	sub	sp, #12
  403280:	4605      	mov	r5, r0
  403282:	460c      	mov	r4, r1
	uint32_t val = 0;
  403284:	2300      	movs	r3, #0
  403286:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403288:	4b2a      	ldr	r3, [pc, #168]	; (403334 <usart_serial_getchar+0xb8>)
  40328a:	4298      	cmp	r0, r3
  40328c:	d013      	beq.n	4032b6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40328e:	4b2a      	ldr	r3, [pc, #168]	; (403338 <usart_serial_getchar+0xbc>)
  403290:	4298      	cmp	r0, r3
  403292:	d018      	beq.n	4032c6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403294:	4b29      	ldr	r3, [pc, #164]	; (40333c <usart_serial_getchar+0xc0>)
  403296:	4298      	cmp	r0, r3
  403298:	d01d      	beq.n	4032d6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40329a:	4b29      	ldr	r3, [pc, #164]	; (403340 <usart_serial_getchar+0xc4>)
  40329c:	429d      	cmp	r5, r3
  40329e:	d022      	beq.n	4032e6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4032a0:	4b28      	ldr	r3, [pc, #160]	; (403344 <usart_serial_getchar+0xc8>)
  4032a2:	429d      	cmp	r5, r3
  4032a4:	d027      	beq.n	4032f6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4032a6:	4b28      	ldr	r3, [pc, #160]	; (403348 <usart_serial_getchar+0xcc>)
  4032a8:	429d      	cmp	r5, r3
  4032aa:	d02e      	beq.n	40330a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4032ac:	4b27      	ldr	r3, [pc, #156]	; (40334c <usart_serial_getchar+0xd0>)
  4032ae:	429d      	cmp	r5, r3
  4032b0:	d035      	beq.n	40331e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4032b2:	b003      	add	sp, #12
  4032b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4032b6:	461f      	mov	r7, r3
  4032b8:	4e25      	ldr	r6, [pc, #148]	; (403350 <usart_serial_getchar+0xd4>)
  4032ba:	4621      	mov	r1, r4
  4032bc:	4638      	mov	r0, r7
  4032be:	47b0      	blx	r6
  4032c0:	2800      	cmp	r0, #0
  4032c2:	d1fa      	bne.n	4032ba <usart_serial_getchar+0x3e>
  4032c4:	e7e9      	b.n	40329a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4032c6:	461f      	mov	r7, r3
  4032c8:	4e21      	ldr	r6, [pc, #132]	; (403350 <usart_serial_getchar+0xd4>)
  4032ca:	4621      	mov	r1, r4
  4032cc:	4638      	mov	r0, r7
  4032ce:	47b0      	blx	r6
  4032d0:	2800      	cmp	r0, #0
  4032d2:	d1fa      	bne.n	4032ca <usart_serial_getchar+0x4e>
  4032d4:	e7e4      	b.n	4032a0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4032d6:	461f      	mov	r7, r3
  4032d8:	4e1d      	ldr	r6, [pc, #116]	; (403350 <usart_serial_getchar+0xd4>)
  4032da:	4621      	mov	r1, r4
  4032dc:	4638      	mov	r0, r7
  4032de:	47b0      	blx	r6
  4032e0:	2800      	cmp	r0, #0
  4032e2:	d1fa      	bne.n	4032da <usart_serial_getchar+0x5e>
  4032e4:	e7df      	b.n	4032a6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4032e6:	461f      	mov	r7, r3
  4032e8:	4e19      	ldr	r6, [pc, #100]	; (403350 <usart_serial_getchar+0xd4>)
  4032ea:	4621      	mov	r1, r4
  4032ec:	4638      	mov	r0, r7
  4032ee:	47b0      	blx	r6
  4032f0:	2800      	cmp	r0, #0
  4032f2:	d1fa      	bne.n	4032ea <usart_serial_getchar+0x6e>
  4032f4:	e7da      	b.n	4032ac <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4032f6:	461e      	mov	r6, r3
  4032f8:	4d16      	ldr	r5, [pc, #88]	; (403354 <usart_serial_getchar+0xd8>)
  4032fa:	a901      	add	r1, sp, #4
  4032fc:	4630      	mov	r0, r6
  4032fe:	47a8      	blx	r5
  403300:	2800      	cmp	r0, #0
  403302:	d1fa      	bne.n	4032fa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403304:	9b01      	ldr	r3, [sp, #4]
  403306:	7023      	strb	r3, [r4, #0]
  403308:	e7d3      	b.n	4032b2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40330a:	461e      	mov	r6, r3
  40330c:	4d11      	ldr	r5, [pc, #68]	; (403354 <usart_serial_getchar+0xd8>)
  40330e:	a901      	add	r1, sp, #4
  403310:	4630      	mov	r0, r6
  403312:	47a8      	blx	r5
  403314:	2800      	cmp	r0, #0
  403316:	d1fa      	bne.n	40330e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403318:	9b01      	ldr	r3, [sp, #4]
  40331a:	7023      	strb	r3, [r4, #0]
  40331c:	e7c9      	b.n	4032b2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40331e:	461e      	mov	r6, r3
  403320:	4d0c      	ldr	r5, [pc, #48]	; (403354 <usart_serial_getchar+0xd8>)
  403322:	a901      	add	r1, sp, #4
  403324:	4630      	mov	r0, r6
  403326:	47a8      	blx	r5
  403328:	2800      	cmp	r0, #0
  40332a:	d1fa      	bne.n	403322 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40332c:	9b01      	ldr	r3, [sp, #4]
  40332e:	7023      	strb	r3, [r4, #0]
}
  403330:	e7bf      	b.n	4032b2 <usart_serial_getchar+0x36>
  403332:	bf00      	nop
  403334:	400e0800 	.word	0x400e0800
  403338:	400e0a00 	.word	0x400e0a00
  40333c:	400e1a00 	.word	0x400e1a00
  403340:	400e1c00 	.word	0x400e1c00
  403344:	40024000 	.word	0x40024000
  403348:	40028000 	.word	0x40028000
  40334c:	4002c000 	.word	0x4002c000
  403350:	0040106b 	.word	0x0040106b
  403354:	00401177 	.word	0x00401177

00403358 <usart_serial_putchar>:
{
  403358:	b570      	push	{r4, r5, r6, lr}
  40335a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40335c:	4b2a      	ldr	r3, [pc, #168]	; (403408 <usart_serial_putchar+0xb0>)
  40335e:	4298      	cmp	r0, r3
  403360:	d013      	beq.n	40338a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403362:	4b2a      	ldr	r3, [pc, #168]	; (40340c <usart_serial_putchar+0xb4>)
  403364:	4298      	cmp	r0, r3
  403366:	d019      	beq.n	40339c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403368:	4b29      	ldr	r3, [pc, #164]	; (403410 <usart_serial_putchar+0xb8>)
  40336a:	4298      	cmp	r0, r3
  40336c:	d01f      	beq.n	4033ae <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40336e:	4b29      	ldr	r3, [pc, #164]	; (403414 <usart_serial_putchar+0xbc>)
  403370:	4298      	cmp	r0, r3
  403372:	d025      	beq.n	4033c0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403374:	4b28      	ldr	r3, [pc, #160]	; (403418 <usart_serial_putchar+0xc0>)
  403376:	4298      	cmp	r0, r3
  403378:	d02b      	beq.n	4033d2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40337a:	4b28      	ldr	r3, [pc, #160]	; (40341c <usart_serial_putchar+0xc4>)
  40337c:	4298      	cmp	r0, r3
  40337e:	d031      	beq.n	4033e4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403380:	4b27      	ldr	r3, [pc, #156]	; (403420 <usart_serial_putchar+0xc8>)
  403382:	4298      	cmp	r0, r3
  403384:	d037      	beq.n	4033f6 <usart_serial_putchar+0x9e>
	return 0;
  403386:	2000      	movs	r0, #0
}
  403388:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40338a:	461e      	mov	r6, r3
  40338c:	4d25      	ldr	r5, [pc, #148]	; (403424 <usart_serial_putchar+0xcc>)
  40338e:	4621      	mov	r1, r4
  403390:	4630      	mov	r0, r6
  403392:	47a8      	blx	r5
  403394:	2800      	cmp	r0, #0
  403396:	d1fa      	bne.n	40338e <usart_serial_putchar+0x36>
		return 1;
  403398:	2001      	movs	r0, #1
  40339a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40339c:	461e      	mov	r6, r3
  40339e:	4d21      	ldr	r5, [pc, #132]	; (403424 <usart_serial_putchar+0xcc>)
  4033a0:	4621      	mov	r1, r4
  4033a2:	4630      	mov	r0, r6
  4033a4:	47a8      	blx	r5
  4033a6:	2800      	cmp	r0, #0
  4033a8:	d1fa      	bne.n	4033a0 <usart_serial_putchar+0x48>
		return 1;
  4033aa:	2001      	movs	r0, #1
  4033ac:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033ae:	461e      	mov	r6, r3
  4033b0:	4d1c      	ldr	r5, [pc, #112]	; (403424 <usart_serial_putchar+0xcc>)
  4033b2:	4621      	mov	r1, r4
  4033b4:	4630      	mov	r0, r6
  4033b6:	47a8      	blx	r5
  4033b8:	2800      	cmp	r0, #0
  4033ba:	d1fa      	bne.n	4033b2 <usart_serial_putchar+0x5a>
		return 1;
  4033bc:	2001      	movs	r0, #1
  4033be:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4033c0:	461e      	mov	r6, r3
  4033c2:	4d18      	ldr	r5, [pc, #96]	; (403424 <usart_serial_putchar+0xcc>)
  4033c4:	4621      	mov	r1, r4
  4033c6:	4630      	mov	r0, r6
  4033c8:	47a8      	blx	r5
  4033ca:	2800      	cmp	r0, #0
  4033cc:	d1fa      	bne.n	4033c4 <usart_serial_putchar+0x6c>
		return 1;
  4033ce:	2001      	movs	r0, #1
  4033d0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033d2:	461e      	mov	r6, r3
  4033d4:	4d14      	ldr	r5, [pc, #80]	; (403428 <usart_serial_putchar+0xd0>)
  4033d6:	4621      	mov	r1, r4
  4033d8:	4630      	mov	r0, r6
  4033da:	47a8      	blx	r5
  4033dc:	2800      	cmp	r0, #0
  4033de:	d1fa      	bne.n	4033d6 <usart_serial_putchar+0x7e>
		return 1;
  4033e0:	2001      	movs	r0, #1
  4033e2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033e4:	461e      	mov	r6, r3
  4033e6:	4d10      	ldr	r5, [pc, #64]	; (403428 <usart_serial_putchar+0xd0>)
  4033e8:	4621      	mov	r1, r4
  4033ea:	4630      	mov	r0, r6
  4033ec:	47a8      	blx	r5
  4033ee:	2800      	cmp	r0, #0
  4033f0:	d1fa      	bne.n	4033e8 <usart_serial_putchar+0x90>
		return 1;
  4033f2:	2001      	movs	r0, #1
  4033f4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033f6:	461e      	mov	r6, r3
  4033f8:	4d0b      	ldr	r5, [pc, #44]	; (403428 <usart_serial_putchar+0xd0>)
  4033fa:	4621      	mov	r1, r4
  4033fc:	4630      	mov	r0, r6
  4033fe:	47a8      	blx	r5
  403400:	2800      	cmp	r0, #0
  403402:	d1fa      	bne.n	4033fa <usart_serial_putchar+0xa2>
		return 1;
  403404:	2001      	movs	r0, #1
  403406:	bd70      	pop	{r4, r5, r6, pc}
  403408:	400e0800 	.word	0x400e0800
  40340c:	400e0a00 	.word	0x400e0a00
  403410:	400e1a00 	.word	0x400e1a00
  403414:	400e1c00 	.word	0x400e1c00
  403418:	40024000 	.word	0x40024000
  40341c:	40028000 	.word	0x40028000
  403420:	4002c000 	.word	0x4002c000
  403424:	00401059 	.word	0x00401059
  403428:	00401161 	.word	0x00401161

0040342c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  40342c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40342e:	460a      	mov	r2, r1
  403430:	4601      	mov	r1, r0
  403432:	4802      	ldr	r0, [pc, #8]	; (40343c <vApplicationStackOverflowHook+0x10>)
  403434:	4b02      	ldr	r3, [pc, #8]	; (403440 <vApplicationStackOverflowHook+0x14>)
  403436:	4798      	blx	r3
  403438:	e7fe      	b.n	403438 <vApplicationStackOverflowHook+0xc>
  40343a:	bf00      	nop
  40343c:	00409234 	.word	0x00409234
  403440:	00404c21 	.word	0x00404c21

00403444 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403444:	4770      	bx	lr

00403446 <vApplicationMallocFailedHook>:
  403446:	f04f 0380 	mov.w	r3, #128	; 0x80
  40344a:	b672      	cpsid	i
  40344c:	f383 8811 	msr	BASEPRI, r3
  403450:	f3bf 8f6f 	isb	sy
  403454:	f3bf 8f4f 	dsb	sy
  403458:	b662      	cpsie	i
  40345a:	e7fe      	b.n	40345a <vApplicationMallocFailedHook+0x14>
  40345c:	0000      	movs	r0, r0
	...

00403460 <tone>:
	if (frequency != 0){
  403460:	2800      	cmp	r0, #0
  403462:	d051      	beq.n	403508 <tone+0xa8>
void tone(int frequency, int duration) {
  403464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403468:	4605      	mov	r5, r0
  40346a:	4608      	mov	r0, r1
		int duracao = (1000000 / (2*frequency));
  40346c:	006d      	lsls	r5, r5, #1
  40346e:	4b2a      	ldr	r3, [pc, #168]	; (403518 <tone+0xb8>)
  403470:	fb93 f5f5 	sdiv	r5, r3, r5
		while (tempo < duration * 0.9 * 1000){
  403474:	4b29      	ldr	r3, [pc, #164]	; (40351c <tone+0xbc>)
  403476:	4798      	blx	r3
  403478:	4c29      	ldr	r4, [pc, #164]	; (403520 <tone+0xc0>)
  40347a:	a325      	add	r3, pc, #148	; (adr r3, 403510 <tone+0xb0>)
  40347c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403480:	47a0      	blx	r4
  403482:	2200      	movs	r2, #0
  403484:	4b27      	ldr	r3, [pc, #156]	; (403524 <tone+0xc4>)
  403486:	47a0      	blx	r4
  403488:	4682      	mov	sl, r0
  40348a:	468b      	mov	fp, r1
  40348c:	2200      	movs	r2, #0
  40348e:	2300      	movs	r3, #0
  403490:	4c25      	ldr	r4, [pc, #148]	; (403528 <tone+0xc8>)
  403492:	47a0      	blx	r4
  403494:	2800      	cmp	r0, #0
  403496:	d035      	beq.n	403504 <tone+0xa4>
			delay_us(duracao);
  403498:	4c24      	ldr	r4, [pc, #144]	; (40352c <tone+0xcc>)
  40349a:	fba5 0104 	umull	r0, r1, r5, r4
  40349e:	17eb      	asrs	r3, r5, #31
  4034a0:	fb04 1103 	mla	r1, r4, r3, r1
  4034a4:	4a22      	ldr	r2, [pc, #136]	; (403530 <tone+0xd0>)
  4034a6:	2300      	movs	r3, #0
  4034a8:	4e22      	ldr	r6, [pc, #136]	; (403534 <tone+0xd4>)
  4034aa:	2700      	movs	r7, #0
  4034ac:	1980      	adds	r0, r0, r6
  4034ae:	4179      	adcs	r1, r7
  4034b0:	4c21      	ldr	r4, [pc, #132]	; (403538 <tone+0xd8>)
  4034b2:	47a0      	blx	r4
  4034b4:	4680      	mov	r8, r0
  4034b6:	2400      	movs	r4, #0
			pio_set(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  4034b8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 40354c <tone+0xec>
			delay_us(duracao);
  4034bc:	4e1f      	ldr	r6, [pc, #124]	; (40353c <tone+0xdc>)
  4034be:	e011      	b.n	4034e4 <tone+0x84>
  4034c0:	2033      	movs	r0, #51	; 0x33
  4034c2:	47b0      	blx	r6
			pio_clear(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  4034c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4034c8:	481d      	ldr	r0, [pc, #116]	; (403540 <tone+0xe0>)
  4034ca:	4b1e      	ldr	r3, [pc, #120]	; (403544 <tone+0xe4>)
  4034cc:	4798      	blx	r3
			delay_us(duracao);
  4034ce:	2033      	movs	r0, #51	; 0x33
  4034d0:	47b0      	blx	r6
			tempo += duracao;
  4034d2:	442c      	add	r4, r5
		while (tempo < duration * 0.9 * 1000){
  4034d4:	4620      	mov	r0, r4
  4034d6:	4b11      	ldr	r3, [pc, #68]	; (40351c <tone+0xbc>)
  4034d8:	4798      	blx	r3
  4034da:	4652      	mov	r2, sl
  4034dc:	465b      	mov	r3, fp
  4034de:	4f1a      	ldr	r7, [pc, #104]	; (403548 <tone+0xe8>)
  4034e0:	47b8      	blx	r7
  4034e2:	b178      	cbz	r0, 403504 <tone+0xa4>
			pio_set(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  4034e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4034e8:	4815      	ldr	r0, [pc, #84]	; (403540 <tone+0xe0>)
  4034ea:	47c8      	blx	r9
			delay_us(duracao);
  4034ec:	2d00      	cmp	r5, #0
  4034ee:	d0e7      	beq.n	4034c0 <tone+0x60>
  4034f0:	4640      	mov	r0, r8
  4034f2:	47b0      	blx	r6
			pio_clear(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  4034f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4034f8:	4811      	ldr	r0, [pc, #68]	; (403540 <tone+0xe0>)
  4034fa:	4b12      	ldr	r3, [pc, #72]	; (403544 <tone+0xe4>)
  4034fc:	4798      	blx	r3
			delay_us(duracao);
  4034fe:	4640      	mov	r0, r8
  403500:	47b0      	blx	r6
  403502:	e7e6      	b.n	4034d2 <tone+0x72>
  403504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403508:	4770      	bx	lr
  40350a:	bf00      	nop
  40350c:	f3af 8000 	nop.w
  403510:	cccccccd 	.word	0xcccccccd
  403514:	3feccccc 	.word	0x3feccccc
  403518:	000f4240 	.word	0x000f4240
  40351c:	00403b59 	.word	0x00403b59
  403520:	00403c25 	.word	0x00403c25
  403524:	408f4000 	.word	0x408f4000
  403528:	00404145 	.word	0x00404145
  40352c:	11e1a300 	.word	0x11e1a300
  403530:	005a83e0 	.word	0x005a83e0
  403534:	005a83df 	.word	0x005a83df
  403538:	00404159 	.word	0x00404159
  40353c:	20400001 	.word	0x20400001
  403540:	400e1200 	.word	0x400e1200
  403544:	00400bfb 	.word	0x00400bfb
  403548:	00404109 	.word	0x00404109
  40354c:	00400bf7 	.word	0x00400bf7

00403550 <task_play>:
{
  403550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403554:	b082      	sub	sp, #8
		if (xQueueReceive(xQueueCoins, &coins, 1)) {
  403556:	f8df a054 	ldr.w	sl, [pc, #84]	; 4035ac <task_play+0x5c>
  40355a:	f04f 0801 	mov.w	r8, #1
  40355e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4035b0 <task_play+0x60>
  403562:	e002      	b.n	40356a <task_play+0x1a>
		vTaskDelay(1);
  403564:	4640      	mov	r0, r8
  403566:	4b0f      	ldr	r3, [pc, #60]	; (4035a4 <task_play+0x54>)
  403568:	4798      	blx	r3
		if (xQueueReceive(xQueueCoins, &coins, 1)) {
  40356a:	2300      	movs	r3, #0
  40356c:	4642      	mov	r2, r8
  40356e:	a901      	add	r1, sp, #4
  403570:	f8da 0000 	ldr.w	r0, [sl]
  403574:	47c8      	blx	r9
  403576:	2800      	cmp	r0, #0
  403578:	d0f4      	beq.n	403564 <task_play+0x14>
			for (int i = 0; i < coins; i++){
  40357a:	9b01      	ldr	r3, [sp, #4]
  40357c:	2b00      	cmp	r3, #0
  40357e:	ddf1      	ble.n	403564 <task_play+0x14>
  403580:	2400      	movs	r4, #0
				tone(NOTE_B5,  80);
  403582:	2750      	movs	r7, #80	; 0x50
  403584:	f44f 7677 	mov.w	r6, #988	; 0x3dc
  403588:	4d07      	ldr	r5, [pc, #28]	; (4035a8 <task_play+0x58>)
  40358a:	4639      	mov	r1, r7
  40358c:	4630      	mov	r0, r6
  40358e:	47a8      	blx	r5
				tone(NOTE_E6, 640);
  403590:	f44f 7120 	mov.w	r1, #640	; 0x280
  403594:	f240 5027 	movw	r0, #1319	; 0x527
  403598:	47a8      	blx	r5
			for (int i = 0; i < coins; i++){
  40359a:	3401      	adds	r4, #1
  40359c:	9b01      	ldr	r3, [sp, #4]
  40359e:	42a3      	cmp	r3, r4
  4035a0:	dcf3      	bgt.n	40358a <task_play+0x3a>
  4035a2:	e7df      	b.n	403564 <task_play+0x14>
  4035a4:	00402715 	.word	0x00402715
  4035a8:	00403461 	.word	0x00403461
  4035ac:	20400e20 	.word	0x20400e20
  4035b0:	00401eed 	.word	0x00401eed

004035b4 <btn_init>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void btn_init(void) {
  4035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035b6:	b083      	sub	sp, #12
	// Inicializa clock do periférico PIO responsavel pelo botao
	pmc_enable_periph_clk(BTN_PIO_ID);
  4035b8:	200a      	movs	r0, #10
  4035ba:	4e1c      	ldr	r6, [pc, #112]	; (40362c <btn_init+0x78>)
  4035bc:	47b0      	blx	r6

	// Configura PIO para lidar com o pino do botão como entrada
	// com pull-up
	pio_configure(BTN_PIO, PIO_INPUT, BTN_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4035be:	4c1c      	ldr	r4, [pc, #112]	; (403630 <btn_init+0x7c>)
  4035c0:	2309      	movs	r3, #9
  4035c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4035c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4035ca:	4620      	mov	r0, r4
  4035cc:	4d19      	ldr	r5, [pc, #100]	; (403634 <btn_init+0x80>)
  4035ce:	47a8      	blx	r5
	pio_set_debounce_filter(BTN_PIO, BTN_PIO_PIN_MASK, 60);
  4035d0:	223c      	movs	r2, #60	; 0x3c
  4035d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4035d6:	4620      	mov	r0, r4
  4035d8:	4b17      	ldr	r3, [pc, #92]	; (403638 <btn_init+0x84>)
  4035da:	4798      	blx	r3
	
	// Configura interrupção no pino referente ao botao e associa
	// função de callback caso uma interrupção for gerada
	// a função de callback é a: but_callback()
	pio_handler_set(BTN_PIO,
  4035dc:	4b17      	ldr	r3, [pc, #92]	; (40363c <btn_init+0x88>)
  4035de:	9300      	str	r3, [sp, #0]
  4035e0:	2350      	movs	r3, #80	; 0x50
  4035e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4035e6:	210a      	movs	r1, #10
  4035e8:	4620      	mov	r0, r4
  4035ea:	4f15      	ldr	r7, [pc, #84]	; (403640 <btn_init+0x8c>)
  4035ec:	47b8      	blx	r7
	BTN_PIO_PIN_MASK,
	PIO_IT_FALL_EDGE,
	but_callback);

	// Ativa interrupção e limpa primeira IRQ gerada na ativacao
	pio_enable_interrupt(BTN_PIO, BTN_PIO_PIN_MASK);
  4035ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4035f2:	4620      	mov	r0, r4
  4035f4:	4b13      	ldr	r3, [pc, #76]	; (403644 <btn_init+0x90>)
  4035f6:	4798      	blx	r3
	pio_get_interrupt_status(BTN_PIO);
  4035f8:	4620      	mov	r0, r4
  4035fa:	4b13      	ldr	r3, [pc, #76]	; (403648 <btn_init+0x94>)
  4035fc:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035fe:	4b13      	ldr	r3, [pc, #76]	; (40364c <btn_init+0x98>)
  403600:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403604:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403606:	2280      	movs	r2, #128	; 0x80
  403608:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais próximo de 0 maior)
	NVIC_EnableIRQ(BTN_PIO_ID);
	NVIC_SetPriority(BTN_PIO_ID, 4); // Prioridade 4
	
	WDT->WDT_MR = WDT_MR_WDDIS;
  40360c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403610:	4b0f      	ldr	r3, [pc, #60]	; (403650 <btn_init+0x9c>)
  403612:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(BUZZER_PIO_ID);
  403614:	200c      	movs	r0, #12
  403616:	47b0      	blx	r6
	pio_configure(BUZZER_PIO, PIO_OUTPUT_0, BUZZER_PIO_IDX_MASK, PIO_DEFAULT);
  403618:	2300      	movs	r3, #0
  40361a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40361e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403622:	480c      	ldr	r0, [pc, #48]	; (403654 <btn_init+0xa0>)
  403624:	47a8      	blx	r5
}
  403626:	b003      	add	sp, #12
  403628:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40362a:	bf00      	nop
  40362c:	00401005 	.word	0x00401005
  403630:	400e0e00 	.word	0x400e0e00
  403634:	00400cf1 	.word	0x00400cf1
  403638:	00400bdd 	.word	0x00400bdd
  40363c:	00403175 	.word	0x00403175
  403640:	00400e11 	.word	0x00400e11
  403644:	00400db3 	.word	0x00400db3
  403648:	00400db7 	.word	0x00400db7
  40364c:	e000e100 	.word	0xe000e100
  403650:	400e1850 	.word	0x400e1850
  403654:	400e1200 	.word	0x400e1200

00403658 <RTT_init>:


void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  403658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40365c:	ed2d 8b02 	vpush	{d8}
  403660:	b082      	sub	sp, #8
  403662:	ee08 0a10 	vmov	s16, r0
  403666:	4688      	mov	r8, r1
  403668:	4617      	mov	r7, r2

	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  40366a:	4c20      	ldr	r4, [pc, #128]	; (4036ec <RTT_init+0x94>)
  40366c:	2100      	movs	r1, #0
  40366e:	4620      	mov	r0, r4
  403670:	4b1f      	ldr	r3, [pc, #124]	; (4036f0 <RTT_init+0x98>)
  403672:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  403674:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4036f4 <RTT_init+0x9c>
  403678:	eec7 7a08 	vdiv.f32	s15, s14, s16
  40367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  403680:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  403684:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  403688:	4620      	mov	r0, r4
  40368a:	4b1b      	ldr	r3, [pc, #108]	; (4036f8 <RTT_init+0xa0>)
  40368c:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN) {
  40368e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  403692:	d116      	bne.n	4036c2 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403694:	4b19      	ldr	r3, [pc, #100]	; (4036fc <RTT_init+0xa4>)
  403696:	2208      	movs	r2, #8
  403698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40369c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4036a0:	2180      	movs	r1, #128	; 0x80
  4036a2:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4036a6:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4036a8:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4036ac:	d119      	bne.n	4036e2 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4036ae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4036b2:	480e      	ldr	r0, [pc, #56]	; (4036ec <RTT_init+0x94>)
  4036b4:	4b12      	ldr	r3, [pc, #72]	; (403700 <RTT_init+0xa8>)
  4036b6:	4798      	blx	r3
}
  4036b8:	b002      	add	sp, #8
  4036ba:	ecbd 8b02 	vpop	{d8}
  4036be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  4036c2:	4620      	mov	r0, r4
  4036c4:	4b0f      	ldr	r3, [pc, #60]	; (403704 <RTT_init+0xac>)
  4036c6:	4798      	blx	r3
  4036c8:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  4036ca:	4e08      	ldr	r6, [pc, #32]	; (4036ec <RTT_init+0x94>)
  4036cc:	4d0d      	ldr	r5, [pc, #52]	; (403704 <RTT_init+0xac>)
  4036ce:	4630      	mov	r0, r6
  4036d0:	47a8      	blx	r5
  4036d2:	4284      	cmp	r4, r0
  4036d4:	d0fb      	beq.n	4036ce <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  4036d6:	eb04 0108 	add.w	r1, r4, r8
  4036da:	4804      	ldr	r0, [pc, #16]	; (4036ec <RTT_init+0x94>)
  4036dc:	4b0a      	ldr	r3, [pc, #40]	; (403708 <RTT_init+0xb0>)
  4036de:	4798      	blx	r3
  4036e0:	e7d8      	b.n	403694 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  4036e2:	4639      	mov	r1, r7
  4036e4:	4801      	ldr	r0, [pc, #4]	; (4036ec <RTT_init+0x94>)
  4036e6:	4b09      	ldr	r3, [pc, #36]	; (40370c <RTT_init+0xb4>)
  4036e8:	4798      	blx	r3
  4036ea:	e7e5      	b.n	4036b8 <RTT_init+0x60>
  4036ec:	400e1830 	.word	0x400e1830
  4036f0:	004001c1 	.word	0x004001c1
  4036f4:	47000000 	.word	0x47000000
  4036f8:	004001ad 	.word	0x004001ad
  4036fc:	e000e100 	.word	0xe000e100
  403700:	00400201 	.word	0x00400201
  403704:	00400215 	.word	0x00400215
  403708:	00400229 	.word	0x00400229
  40370c:	004001ed 	.word	0x004001ed

00403710 <main>:
}

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  403710:	b500      	push	{lr}
  403712:	b08b      	sub	sp, #44	; 0x2c
	
	// CRIANDO SEMAPHORE
	xBtnSemaphore = xSemaphoreCreateBinary();
  403714:	2203      	movs	r2, #3
  403716:	2100      	movs	r1, #0
  403718:	2001      	movs	r0, #1
  40371a:	4b43      	ldr	r3, [pc, #268]	; (403828 <main+0x118>)
  40371c:	4798      	blx	r3
  40371e:	4b43      	ldr	r3, [pc, #268]	; (40382c <main+0x11c>)
  403720:	6018      	str	r0, [r3, #0]
	if (xBtnSemaphore == NULL)
  403722:	2800      	cmp	r0, #0
  403724:	d077      	beq.n	403816 <main+0x106>
	printf("falha em criar o semaforo btn \n");
	
	// CRIANDO QUEUE
	xQueueCoins = xQueueCreate(100, sizeof(int));
  403726:	2200      	movs	r2, #0
  403728:	2104      	movs	r1, #4
  40372a:	2064      	movs	r0, #100	; 0x64
  40372c:	4b3e      	ldr	r3, [pc, #248]	; (403828 <main+0x118>)
  40372e:	4798      	blx	r3
  403730:	4b3f      	ldr	r3, [pc, #252]	; (403830 <main+0x120>)
  403732:	6018      	str	r0, [r3, #0]
	if (xQueueCoins == NULL)
  403734:	2800      	cmp	r0, #0
  403736:	d072      	beq.n	40381e <main+0x10e>
	printf("falha em criar a queue xQueueProc \n");
	
	/* Initialize the SAM system */
	sysclk_init();
  403738:	4b3e      	ldr	r3, [pc, #248]	; (403834 <main+0x124>)
  40373a:	4798      	blx	r3
	board_init();
  40373c:	4b3e      	ldr	r3, [pc, #248]	; (403838 <main+0x128>)
  40373e:	4798      	blx	r3
	btn_init();
  403740:	4b3e      	ldr	r3, [pc, #248]	; (40383c <main+0x12c>)
  403742:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403744:	4d3e      	ldr	r5, [pc, #248]	; (403840 <main+0x130>)
  403746:	4b3f      	ldr	r3, [pc, #252]	; (403844 <main+0x134>)
  403748:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40374a:	4a3f      	ldr	r2, [pc, #252]	; (403848 <main+0x138>)
  40374c:	4b3f      	ldr	r3, [pc, #252]	; (40384c <main+0x13c>)
  40374e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403750:	4a3f      	ldr	r2, [pc, #252]	; (403850 <main+0x140>)
  403752:	4b40      	ldr	r3, [pc, #256]	; (403854 <main+0x144>)
  403754:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403756:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40375a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40375c:	23c0      	movs	r3, #192	; 0xc0
  40375e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403760:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403764:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403766:	2400      	movs	r4, #0
  403768:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40376a:	9408      	str	r4, [sp, #32]
  40376c:	200e      	movs	r0, #14
  40376e:	4b3a      	ldr	r3, [pc, #232]	; (403858 <main+0x148>)
  403770:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403772:	4a3a      	ldr	r2, [pc, #232]	; (40385c <main+0x14c>)
  403774:	a904      	add	r1, sp, #16
  403776:	4628      	mov	r0, r5
  403778:	4b39      	ldr	r3, [pc, #228]	; (403860 <main+0x150>)
  40377a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40377c:	4628      	mov	r0, r5
  40377e:	4b39      	ldr	r3, [pc, #228]	; (403864 <main+0x154>)
  403780:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403782:	4628      	mov	r0, r5
  403784:	4b38      	ldr	r3, [pc, #224]	; (403868 <main+0x158>)
  403786:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403788:	4e38      	ldr	r6, [pc, #224]	; (40386c <main+0x15c>)
  40378a:	6833      	ldr	r3, [r6, #0]
  40378c:	4621      	mov	r1, r4
  40378e:	6898      	ldr	r0, [r3, #8]
  403790:	4d37      	ldr	r5, [pc, #220]	; (403870 <main+0x160>)
  403792:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403794:	6833      	ldr	r3, [r6, #0]
  403796:	4621      	mov	r1, r4
  403798:	6858      	ldr	r0, [r3, #4]
  40379a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  40379c:	6833      	ldr	r3, [r6, #0]
  40379e:	4621      	mov	r1, r4
  4037a0:	6898      	ldr	r0, [r3, #8]
  4037a2:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();
	
	if (xTaskCreate(task_debug, "debug", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4037a4:	9403      	str	r4, [sp, #12]
  4037a6:	9402      	str	r4, [sp, #8]
  4037a8:	9401      	str	r4, [sp, #4]
  4037aa:	9400      	str	r4, [sp, #0]
  4037ac:	4623      	mov	r3, r4
  4037ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4037b2:	4930      	ldr	r1, [pc, #192]	; (403874 <main+0x164>)
  4037b4:	4830      	ldr	r0, [pc, #192]	; (403878 <main+0x168>)
  4037b6:	4c31      	ldr	r4, [pc, #196]	; (40387c <main+0x16c>)
  4037b8:	47a0      	blx	r4
  4037ba:	2801      	cmp	r0, #1
  4037bc:	d002      	beq.n	4037c4 <main+0xb4>
		printf("Failed to create debug task\r\n");
  4037be:	4830      	ldr	r0, [pc, #192]	; (403880 <main+0x170>)
  4037c0:	4b30      	ldr	r3, [pc, #192]	; (403884 <main+0x174>)
  4037c2:	4798      	blx	r3
	}
	
	// CRIANDO TASKS
	if (xTaskCreate(task_coins, "coins", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4037c4:	2300      	movs	r3, #0
  4037c6:	9303      	str	r3, [sp, #12]
  4037c8:	9302      	str	r3, [sp, #8]
  4037ca:	9301      	str	r3, [sp, #4]
  4037cc:	9300      	str	r3, [sp, #0]
  4037ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4037d2:	492d      	ldr	r1, [pc, #180]	; (403888 <main+0x178>)
  4037d4:	482d      	ldr	r0, [pc, #180]	; (40388c <main+0x17c>)
  4037d6:	4c29      	ldr	r4, [pc, #164]	; (40387c <main+0x16c>)
  4037d8:	47a0      	blx	r4
  4037da:	2801      	cmp	r0, #1
  4037dc:	d002      	beq.n	4037e4 <main+0xd4>
		printf("Failed to create coins task\r\n");
  4037de:	482c      	ldr	r0, [pc, #176]	; (403890 <main+0x180>)
  4037e0:	4b28      	ldr	r3, [pc, #160]	; (403884 <main+0x174>)
  4037e2:	4798      	blx	r3
	}

	if (xTaskCreate(task_play, "play", TASK_PLAY_STACK_SIZE, NULL, TASK_PLAY_STACK_PRIORITY, NULL) != pdPASS) {
  4037e4:	2300      	movs	r3, #0
  4037e6:	9303      	str	r3, [sp, #12]
  4037e8:	9302      	str	r3, [sp, #8]
  4037ea:	9301      	str	r3, [sp, #4]
  4037ec:	2201      	movs	r2, #1
  4037ee:	9200      	str	r2, [sp, #0]
  4037f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4037f4:	4927      	ldr	r1, [pc, #156]	; (403894 <main+0x184>)
  4037f6:	4828      	ldr	r0, [pc, #160]	; (403898 <main+0x188>)
  4037f8:	4c20      	ldr	r4, [pc, #128]	; (40387c <main+0x16c>)
  4037fa:	47a0      	blx	r4
  4037fc:	2801      	cmp	r0, #1
  4037fe:	d002      	beq.n	403806 <main+0xf6>
		printf("Failed to create play task\r\n");
  403800:	4826      	ldr	r0, [pc, #152]	; (40389c <main+0x18c>)
  403802:	4b20      	ldr	r3, [pc, #128]	; (403884 <main+0x174>)
  403804:	4798      	blx	r3
	}
	
	// INICIALIZANDO O RTT
	RTT_init(1000, 0, 0);
  403806:	2200      	movs	r2, #0
  403808:	4611      	mov	r1, r2
  40380a:	4825      	ldr	r0, [pc, #148]	; (4038a0 <main+0x190>)
  40380c:	4b25      	ldr	r3, [pc, #148]	; (4038a4 <main+0x194>)
  40380e:	4798      	blx	r3
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  403810:	4b25      	ldr	r3, [pc, #148]	; (4038a8 <main+0x198>)
  403812:	4798      	blx	r3
  403814:	e7fe      	b.n	403814 <main+0x104>
	printf("falha em criar o semaforo btn \n");
  403816:	4825      	ldr	r0, [pc, #148]	; (4038ac <main+0x19c>)
  403818:	4b1a      	ldr	r3, [pc, #104]	; (403884 <main+0x174>)
  40381a:	4798      	blx	r3
  40381c:	e783      	b.n	403726 <main+0x16>
	printf("falha em criar a queue xQueueProc \n");
  40381e:	4824      	ldr	r0, [pc, #144]	; (4038b0 <main+0x1a0>)
  403820:	4b18      	ldr	r3, [pc, #96]	; (403884 <main+0x174>)
  403822:	4798      	blx	r3
  403824:	e788      	b.n	403738 <main+0x28>
  403826:	bf00      	nop
  403828:	00401aad 	.word	0x00401aad
  40382c:	20400e24 	.word	0x20400e24
  403830:	20400e20 	.word	0x20400e20
  403834:	00400949 	.word	0x00400949
  403838:	00400a45 	.word	0x00400a45
  40383c:	004035b5 	.word	0x004035b5
  403840:	40028000 	.word	0x40028000
  403844:	20400ddc 	.word	0x20400ddc
  403848:	00403359 	.word	0x00403359
  40384c:	20400dd8 	.word	0x20400dd8
  403850:	0040327d 	.word	0x0040327d
  403854:	20400dd4 	.word	0x20400dd4
  403858:	00401005 	.word	0x00401005
  40385c:	08f0d180 	.word	0x08f0d180
  403860:	00401101 	.word	0x00401101
  403864:	00401155 	.word	0x00401155
  403868:	0040115b 	.word	0x0040115b
  40386c:	20400014 	.word	0x20400014
  403870:	00404d6d 	.word	0x00404d6d
  403874:	004091a8 	.word	0x004091a8
  403878:	00403239 	.word	0x00403239
  40387c:	004021cd 	.word	0x004021cd
  403880:	004091b0 	.word	0x004091b0
  403884:	00404ce5 	.word	0x00404ce5
  403888:	004091d0 	.word	0x004091d0
  40388c:	0040318d 	.word	0x0040318d
  403890:	004091d8 	.word	0x004091d8
  403894:	004091f8 	.word	0x004091f8
  403898:	00403551 	.word	0x00403551
  40389c:	00409200 	.word	0x00409200
  4038a0:	447a0000 	.word	0x447a0000
  4038a4:	00403659 	.word	0x00403659
  4038a8:	00402401 	.word	0x00402401
  4038ac:	00409164 	.word	0x00409164
  4038b0:	00409184 	.word	0x00409184

004038b4 <__aeabi_drsub>:
  4038b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4038b8:	e002      	b.n	4038c0 <__adddf3>
  4038ba:	bf00      	nop

004038bc <__aeabi_dsub>:
  4038bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004038c0 <__adddf3>:
  4038c0:	b530      	push	{r4, r5, lr}
  4038c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4038c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4038ca:	ea94 0f05 	teq	r4, r5
  4038ce:	bf08      	it	eq
  4038d0:	ea90 0f02 	teqeq	r0, r2
  4038d4:	bf1f      	itttt	ne
  4038d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4038da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4038de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4038e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4038e6:	f000 80e2 	beq.w	403aae <__adddf3+0x1ee>
  4038ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4038ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4038f2:	bfb8      	it	lt
  4038f4:	426d      	neglt	r5, r5
  4038f6:	dd0c      	ble.n	403912 <__adddf3+0x52>
  4038f8:	442c      	add	r4, r5
  4038fa:	ea80 0202 	eor.w	r2, r0, r2
  4038fe:	ea81 0303 	eor.w	r3, r1, r3
  403902:	ea82 0000 	eor.w	r0, r2, r0
  403906:	ea83 0101 	eor.w	r1, r3, r1
  40390a:	ea80 0202 	eor.w	r2, r0, r2
  40390e:	ea81 0303 	eor.w	r3, r1, r3
  403912:	2d36      	cmp	r5, #54	; 0x36
  403914:	bf88      	it	hi
  403916:	bd30      	pophi	{r4, r5, pc}
  403918:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40391c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403920:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403924:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403928:	d002      	beq.n	403930 <__adddf3+0x70>
  40392a:	4240      	negs	r0, r0
  40392c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403930:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403934:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403938:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40393c:	d002      	beq.n	403944 <__adddf3+0x84>
  40393e:	4252      	negs	r2, r2
  403940:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403944:	ea94 0f05 	teq	r4, r5
  403948:	f000 80a7 	beq.w	403a9a <__adddf3+0x1da>
  40394c:	f1a4 0401 	sub.w	r4, r4, #1
  403950:	f1d5 0e20 	rsbs	lr, r5, #32
  403954:	db0d      	blt.n	403972 <__adddf3+0xb2>
  403956:	fa02 fc0e 	lsl.w	ip, r2, lr
  40395a:	fa22 f205 	lsr.w	r2, r2, r5
  40395e:	1880      	adds	r0, r0, r2
  403960:	f141 0100 	adc.w	r1, r1, #0
  403964:	fa03 f20e 	lsl.w	r2, r3, lr
  403968:	1880      	adds	r0, r0, r2
  40396a:	fa43 f305 	asr.w	r3, r3, r5
  40396e:	4159      	adcs	r1, r3
  403970:	e00e      	b.n	403990 <__adddf3+0xd0>
  403972:	f1a5 0520 	sub.w	r5, r5, #32
  403976:	f10e 0e20 	add.w	lr, lr, #32
  40397a:	2a01      	cmp	r2, #1
  40397c:	fa03 fc0e 	lsl.w	ip, r3, lr
  403980:	bf28      	it	cs
  403982:	f04c 0c02 	orrcs.w	ip, ip, #2
  403986:	fa43 f305 	asr.w	r3, r3, r5
  40398a:	18c0      	adds	r0, r0, r3
  40398c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403994:	d507      	bpl.n	4039a6 <__adddf3+0xe6>
  403996:	f04f 0e00 	mov.w	lr, #0
  40399a:	f1dc 0c00 	rsbs	ip, ip, #0
  40399e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4039a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4039a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4039aa:	d31b      	bcc.n	4039e4 <__adddf3+0x124>
  4039ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4039b0:	d30c      	bcc.n	4039cc <__adddf3+0x10c>
  4039b2:	0849      	lsrs	r1, r1, #1
  4039b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4039b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4039bc:	f104 0401 	add.w	r4, r4, #1
  4039c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4039c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4039c8:	f080 809a 	bcs.w	403b00 <__adddf3+0x240>
  4039cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4039d0:	bf08      	it	eq
  4039d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4039d6:	f150 0000 	adcs.w	r0, r0, #0
  4039da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4039de:	ea41 0105 	orr.w	r1, r1, r5
  4039e2:	bd30      	pop	{r4, r5, pc}
  4039e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4039e8:	4140      	adcs	r0, r0
  4039ea:	eb41 0101 	adc.w	r1, r1, r1
  4039ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4039f2:	f1a4 0401 	sub.w	r4, r4, #1
  4039f6:	d1e9      	bne.n	4039cc <__adddf3+0x10c>
  4039f8:	f091 0f00 	teq	r1, #0
  4039fc:	bf04      	itt	eq
  4039fe:	4601      	moveq	r1, r0
  403a00:	2000      	moveq	r0, #0
  403a02:	fab1 f381 	clz	r3, r1
  403a06:	bf08      	it	eq
  403a08:	3320      	addeq	r3, #32
  403a0a:	f1a3 030b 	sub.w	r3, r3, #11
  403a0e:	f1b3 0220 	subs.w	r2, r3, #32
  403a12:	da0c      	bge.n	403a2e <__adddf3+0x16e>
  403a14:	320c      	adds	r2, #12
  403a16:	dd08      	ble.n	403a2a <__adddf3+0x16a>
  403a18:	f102 0c14 	add.w	ip, r2, #20
  403a1c:	f1c2 020c 	rsb	r2, r2, #12
  403a20:	fa01 f00c 	lsl.w	r0, r1, ip
  403a24:	fa21 f102 	lsr.w	r1, r1, r2
  403a28:	e00c      	b.n	403a44 <__adddf3+0x184>
  403a2a:	f102 0214 	add.w	r2, r2, #20
  403a2e:	bfd8      	it	le
  403a30:	f1c2 0c20 	rsble	ip, r2, #32
  403a34:	fa01 f102 	lsl.w	r1, r1, r2
  403a38:	fa20 fc0c 	lsr.w	ip, r0, ip
  403a3c:	bfdc      	itt	le
  403a3e:	ea41 010c 	orrle.w	r1, r1, ip
  403a42:	4090      	lslle	r0, r2
  403a44:	1ae4      	subs	r4, r4, r3
  403a46:	bfa2      	ittt	ge
  403a48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403a4c:	4329      	orrge	r1, r5
  403a4e:	bd30      	popge	{r4, r5, pc}
  403a50:	ea6f 0404 	mvn.w	r4, r4
  403a54:	3c1f      	subs	r4, #31
  403a56:	da1c      	bge.n	403a92 <__adddf3+0x1d2>
  403a58:	340c      	adds	r4, #12
  403a5a:	dc0e      	bgt.n	403a7a <__adddf3+0x1ba>
  403a5c:	f104 0414 	add.w	r4, r4, #20
  403a60:	f1c4 0220 	rsb	r2, r4, #32
  403a64:	fa20 f004 	lsr.w	r0, r0, r4
  403a68:	fa01 f302 	lsl.w	r3, r1, r2
  403a6c:	ea40 0003 	orr.w	r0, r0, r3
  403a70:	fa21 f304 	lsr.w	r3, r1, r4
  403a74:	ea45 0103 	orr.w	r1, r5, r3
  403a78:	bd30      	pop	{r4, r5, pc}
  403a7a:	f1c4 040c 	rsb	r4, r4, #12
  403a7e:	f1c4 0220 	rsb	r2, r4, #32
  403a82:	fa20 f002 	lsr.w	r0, r0, r2
  403a86:	fa01 f304 	lsl.w	r3, r1, r4
  403a8a:	ea40 0003 	orr.w	r0, r0, r3
  403a8e:	4629      	mov	r1, r5
  403a90:	bd30      	pop	{r4, r5, pc}
  403a92:	fa21 f004 	lsr.w	r0, r1, r4
  403a96:	4629      	mov	r1, r5
  403a98:	bd30      	pop	{r4, r5, pc}
  403a9a:	f094 0f00 	teq	r4, #0
  403a9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403aa2:	bf06      	itte	eq
  403aa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403aa8:	3401      	addeq	r4, #1
  403aaa:	3d01      	subne	r5, #1
  403aac:	e74e      	b.n	40394c <__adddf3+0x8c>
  403aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403ab2:	bf18      	it	ne
  403ab4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403ab8:	d029      	beq.n	403b0e <__adddf3+0x24e>
  403aba:	ea94 0f05 	teq	r4, r5
  403abe:	bf08      	it	eq
  403ac0:	ea90 0f02 	teqeq	r0, r2
  403ac4:	d005      	beq.n	403ad2 <__adddf3+0x212>
  403ac6:	ea54 0c00 	orrs.w	ip, r4, r0
  403aca:	bf04      	itt	eq
  403acc:	4619      	moveq	r1, r3
  403ace:	4610      	moveq	r0, r2
  403ad0:	bd30      	pop	{r4, r5, pc}
  403ad2:	ea91 0f03 	teq	r1, r3
  403ad6:	bf1e      	ittt	ne
  403ad8:	2100      	movne	r1, #0
  403ada:	2000      	movne	r0, #0
  403adc:	bd30      	popne	{r4, r5, pc}
  403ade:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403ae2:	d105      	bne.n	403af0 <__adddf3+0x230>
  403ae4:	0040      	lsls	r0, r0, #1
  403ae6:	4149      	adcs	r1, r1
  403ae8:	bf28      	it	cs
  403aea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403aee:	bd30      	pop	{r4, r5, pc}
  403af0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403af4:	bf3c      	itt	cc
  403af6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403afa:	bd30      	popcc	{r4, r5, pc}
  403afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403b00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403b04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403b08:	f04f 0000 	mov.w	r0, #0
  403b0c:	bd30      	pop	{r4, r5, pc}
  403b0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403b12:	bf1a      	itte	ne
  403b14:	4619      	movne	r1, r3
  403b16:	4610      	movne	r0, r2
  403b18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403b1c:	bf1c      	itt	ne
  403b1e:	460b      	movne	r3, r1
  403b20:	4602      	movne	r2, r0
  403b22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403b26:	bf06      	itte	eq
  403b28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403b2c:	ea91 0f03 	teqeq	r1, r3
  403b30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403b34:	bd30      	pop	{r4, r5, pc}
  403b36:	bf00      	nop

00403b38 <__aeabi_ui2d>:
  403b38:	f090 0f00 	teq	r0, #0
  403b3c:	bf04      	itt	eq
  403b3e:	2100      	moveq	r1, #0
  403b40:	4770      	bxeq	lr
  403b42:	b530      	push	{r4, r5, lr}
  403b44:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403b48:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403b4c:	f04f 0500 	mov.w	r5, #0
  403b50:	f04f 0100 	mov.w	r1, #0
  403b54:	e750      	b.n	4039f8 <__adddf3+0x138>
  403b56:	bf00      	nop

00403b58 <__aeabi_i2d>:
  403b58:	f090 0f00 	teq	r0, #0
  403b5c:	bf04      	itt	eq
  403b5e:	2100      	moveq	r1, #0
  403b60:	4770      	bxeq	lr
  403b62:	b530      	push	{r4, r5, lr}
  403b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403b6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403b70:	bf48      	it	mi
  403b72:	4240      	negmi	r0, r0
  403b74:	f04f 0100 	mov.w	r1, #0
  403b78:	e73e      	b.n	4039f8 <__adddf3+0x138>
  403b7a:	bf00      	nop

00403b7c <__aeabi_f2d>:
  403b7c:	0042      	lsls	r2, r0, #1
  403b7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403b82:	ea4f 0131 	mov.w	r1, r1, rrx
  403b86:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403b8a:	bf1f      	itttt	ne
  403b8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403b90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403b94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403b98:	4770      	bxne	lr
  403b9a:	f092 0f00 	teq	r2, #0
  403b9e:	bf14      	ite	ne
  403ba0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403ba4:	4770      	bxeq	lr
  403ba6:	b530      	push	{r4, r5, lr}
  403ba8:	f44f 7460 	mov.w	r4, #896	; 0x380
  403bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403bb4:	e720      	b.n	4039f8 <__adddf3+0x138>
  403bb6:	bf00      	nop

00403bb8 <__aeabi_ul2d>:
  403bb8:	ea50 0201 	orrs.w	r2, r0, r1
  403bbc:	bf08      	it	eq
  403bbe:	4770      	bxeq	lr
  403bc0:	b530      	push	{r4, r5, lr}
  403bc2:	f04f 0500 	mov.w	r5, #0
  403bc6:	e00a      	b.n	403bde <__aeabi_l2d+0x16>

00403bc8 <__aeabi_l2d>:
  403bc8:	ea50 0201 	orrs.w	r2, r0, r1
  403bcc:	bf08      	it	eq
  403bce:	4770      	bxeq	lr
  403bd0:	b530      	push	{r4, r5, lr}
  403bd2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403bd6:	d502      	bpl.n	403bde <__aeabi_l2d+0x16>
  403bd8:	4240      	negs	r0, r0
  403bda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403bde:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403be2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403be6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403bea:	f43f aedc 	beq.w	4039a6 <__adddf3+0xe6>
  403bee:	f04f 0203 	mov.w	r2, #3
  403bf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403bf6:	bf18      	it	ne
  403bf8:	3203      	addne	r2, #3
  403bfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403bfe:	bf18      	it	ne
  403c00:	3203      	addne	r2, #3
  403c02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403c06:	f1c2 0320 	rsb	r3, r2, #32
  403c0a:	fa00 fc03 	lsl.w	ip, r0, r3
  403c0e:	fa20 f002 	lsr.w	r0, r0, r2
  403c12:	fa01 fe03 	lsl.w	lr, r1, r3
  403c16:	ea40 000e 	orr.w	r0, r0, lr
  403c1a:	fa21 f102 	lsr.w	r1, r1, r2
  403c1e:	4414      	add	r4, r2
  403c20:	e6c1      	b.n	4039a6 <__adddf3+0xe6>
  403c22:	bf00      	nop

00403c24 <__aeabi_dmul>:
  403c24:	b570      	push	{r4, r5, r6, lr}
  403c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403c2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403c2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403c32:	bf1d      	ittte	ne
  403c34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403c38:	ea94 0f0c 	teqne	r4, ip
  403c3c:	ea95 0f0c 	teqne	r5, ip
  403c40:	f000 f8de 	bleq	403e00 <__aeabi_dmul+0x1dc>
  403c44:	442c      	add	r4, r5
  403c46:	ea81 0603 	eor.w	r6, r1, r3
  403c4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403c4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403c52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403c56:	bf18      	it	ne
  403c58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403c5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403c64:	d038      	beq.n	403cd8 <__aeabi_dmul+0xb4>
  403c66:	fba0 ce02 	umull	ip, lr, r0, r2
  403c6a:	f04f 0500 	mov.w	r5, #0
  403c6e:	fbe1 e502 	umlal	lr, r5, r1, r2
  403c72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403c76:	fbe0 e503 	umlal	lr, r5, r0, r3
  403c7a:	f04f 0600 	mov.w	r6, #0
  403c7e:	fbe1 5603 	umlal	r5, r6, r1, r3
  403c82:	f09c 0f00 	teq	ip, #0
  403c86:	bf18      	it	ne
  403c88:	f04e 0e01 	orrne.w	lr, lr, #1
  403c8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403c90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403c94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403c98:	d204      	bcs.n	403ca4 <__aeabi_dmul+0x80>
  403c9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403c9e:	416d      	adcs	r5, r5
  403ca0:	eb46 0606 	adc.w	r6, r6, r6
  403ca4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403ca8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403cac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403cb0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403cb4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403cb8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403cbc:	bf88      	it	hi
  403cbe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403cc2:	d81e      	bhi.n	403d02 <__aeabi_dmul+0xde>
  403cc4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403cc8:	bf08      	it	eq
  403cca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403cce:	f150 0000 	adcs.w	r0, r0, #0
  403cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403cd6:	bd70      	pop	{r4, r5, r6, pc}
  403cd8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403cdc:	ea46 0101 	orr.w	r1, r6, r1
  403ce0:	ea40 0002 	orr.w	r0, r0, r2
  403ce4:	ea81 0103 	eor.w	r1, r1, r3
  403ce8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403cec:	bfc2      	ittt	gt
  403cee:	ebd4 050c 	rsbsgt	r5, r4, ip
  403cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403cf6:	bd70      	popgt	{r4, r5, r6, pc}
  403cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403cfc:	f04f 0e00 	mov.w	lr, #0
  403d00:	3c01      	subs	r4, #1
  403d02:	f300 80ab 	bgt.w	403e5c <__aeabi_dmul+0x238>
  403d06:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403d0a:	bfde      	ittt	le
  403d0c:	2000      	movle	r0, #0
  403d0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403d12:	bd70      	pople	{r4, r5, r6, pc}
  403d14:	f1c4 0400 	rsb	r4, r4, #0
  403d18:	3c20      	subs	r4, #32
  403d1a:	da35      	bge.n	403d88 <__aeabi_dmul+0x164>
  403d1c:	340c      	adds	r4, #12
  403d1e:	dc1b      	bgt.n	403d58 <__aeabi_dmul+0x134>
  403d20:	f104 0414 	add.w	r4, r4, #20
  403d24:	f1c4 0520 	rsb	r5, r4, #32
  403d28:	fa00 f305 	lsl.w	r3, r0, r5
  403d2c:	fa20 f004 	lsr.w	r0, r0, r4
  403d30:	fa01 f205 	lsl.w	r2, r1, r5
  403d34:	ea40 0002 	orr.w	r0, r0, r2
  403d38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403d40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403d44:	fa21 f604 	lsr.w	r6, r1, r4
  403d48:	eb42 0106 	adc.w	r1, r2, r6
  403d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403d50:	bf08      	it	eq
  403d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403d56:	bd70      	pop	{r4, r5, r6, pc}
  403d58:	f1c4 040c 	rsb	r4, r4, #12
  403d5c:	f1c4 0520 	rsb	r5, r4, #32
  403d60:	fa00 f304 	lsl.w	r3, r0, r4
  403d64:	fa20 f005 	lsr.w	r0, r0, r5
  403d68:	fa01 f204 	lsl.w	r2, r1, r4
  403d6c:	ea40 0002 	orr.w	r0, r0, r2
  403d70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403d78:	f141 0100 	adc.w	r1, r1, #0
  403d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403d80:	bf08      	it	eq
  403d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403d86:	bd70      	pop	{r4, r5, r6, pc}
  403d88:	f1c4 0520 	rsb	r5, r4, #32
  403d8c:	fa00 f205 	lsl.w	r2, r0, r5
  403d90:	ea4e 0e02 	orr.w	lr, lr, r2
  403d94:	fa20 f304 	lsr.w	r3, r0, r4
  403d98:	fa01 f205 	lsl.w	r2, r1, r5
  403d9c:	ea43 0302 	orr.w	r3, r3, r2
  403da0:	fa21 f004 	lsr.w	r0, r1, r4
  403da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403da8:	fa21 f204 	lsr.w	r2, r1, r4
  403dac:	ea20 0002 	bic.w	r0, r0, r2
  403db0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403db4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403db8:	bf08      	it	eq
  403dba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403dbe:	bd70      	pop	{r4, r5, r6, pc}
  403dc0:	f094 0f00 	teq	r4, #0
  403dc4:	d10f      	bne.n	403de6 <__aeabi_dmul+0x1c2>
  403dc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403dca:	0040      	lsls	r0, r0, #1
  403dcc:	eb41 0101 	adc.w	r1, r1, r1
  403dd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403dd4:	bf08      	it	eq
  403dd6:	3c01      	subeq	r4, #1
  403dd8:	d0f7      	beq.n	403dca <__aeabi_dmul+0x1a6>
  403dda:	ea41 0106 	orr.w	r1, r1, r6
  403dde:	f095 0f00 	teq	r5, #0
  403de2:	bf18      	it	ne
  403de4:	4770      	bxne	lr
  403de6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403dea:	0052      	lsls	r2, r2, #1
  403dec:	eb43 0303 	adc.w	r3, r3, r3
  403df0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403df4:	bf08      	it	eq
  403df6:	3d01      	subeq	r5, #1
  403df8:	d0f7      	beq.n	403dea <__aeabi_dmul+0x1c6>
  403dfa:	ea43 0306 	orr.w	r3, r3, r6
  403dfe:	4770      	bx	lr
  403e00:	ea94 0f0c 	teq	r4, ip
  403e04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403e08:	bf18      	it	ne
  403e0a:	ea95 0f0c 	teqne	r5, ip
  403e0e:	d00c      	beq.n	403e2a <__aeabi_dmul+0x206>
  403e10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403e14:	bf18      	it	ne
  403e16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403e1a:	d1d1      	bne.n	403dc0 <__aeabi_dmul+0x19c>
  403e1c:	ea81 0103 	eor.w	r1, r1, r3
  403e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403e24:	f04f 0000 	mov.w	r0, #0
  403e28:	bd70      	pop	{r4, r5, r6, pc}
  403e2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403e2e:	bf06      	itte	eq
  403e30:	4610      	moveq	r0, r2
  403e32:	4619      	moveq	r1, r3
  403e34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403e38:	d019      	beq.n	403e6e <__aeabi_dmul+0x24a>
  403e3a:	ea94 0f0c 	teq	r4, ip
  403e3e:	d102      	bne.n	403e46 <__aeabi_dmul+0x222>
  403e40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403e44:	d113      	bne.n	403e6e <__aeabi_dmul+0x24a>
  403e46:	ea95 0f0c 	teq	r5, ip
  403e4a:	d105      	bne.n	403e58 <__aeabi_dmul+0x234>
  403e4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403e50:	bf1c      	itt	ne
  403e52:	4610      	movne	r0, r2
  403e54:	4619      	movne	r1, r3
  403e56:	d10a      	bne.n	403e6e <__aeabi_dmul+0x24a>
  403e58:	ea81 0103 	eor.w	r1, r1, r3
  403e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403e60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403e64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403e68:	f04f 0000 	mov.w	r0, #0
  403e6c:	bd70      	pop	{r4, r5, r6, pc}
  403e6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403e72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403e76:	bd70      	pop	{r4, r5, r6, pc}

00403e78 <__aeabi_ddiv>:
  403e78:	b570      	push	{r4, r5, r6, lr}
  403e7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403e7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403e82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403e86:	bf1d      	ittte	ne
  403e88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403e8c:	ea94 0f0c 	teqne	r4, ip
  403e90:	ea95 0f0c 	teqne	r5, ip
  403e94:	f000 f8a7 	bleq	403fe6 <__aeabi_ddiv+0x16e>
  403e98:	eba4 0405 	sub.w	r4, r4, r5
  403e9c:	ea81 0e03 	eor.w	lr, r1, r3
  403ea0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403ea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403ea8:	f000 8088 	beq.w	403fbc <__aeabi_ddiv+0x144>
  403eac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403eb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403eb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403eb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403ebc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403ec0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403ec4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403ec8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403ecc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403ed0:	429d      	cmp	r5, r3
  403ed2:	bf08      	it	eq
  403ed4:	4296      	cmpeq	r6, r2
  403ed6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403eda:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403ede:	d202      	bcs.n	403ee6 <__aeabi_ddiv+0x6e>
  403ee0:	085b      	lsrs	r3, r3, #1
  403ee2:	ea4f 0232 	mov.w	r2, r2, rrx
  403ee6:	1ab6      	subs	r6, r6, r2
  403ee8:	eb65 0503 	sbc.w	r5, r5, r3
  403eec:	085b      	lsrs	r3, r3, #1
  403eee:	ea4f 0232 	mov.w	r2, r2, rrx
  403ef2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403ef6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403efa:	ebb6 0e02 	subs.w	lr, r6, r2
  403efe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f02:	bf22      	ittt	cs
  403f04:	1ab6      	subcs	r6, r6, r2
  403f06:	4675      	movcs	r5, lr
  403f08:	ea40 000c 	orrcs.w	r0, r0, ip
  403f0c:	085b      	lsrs	r3, r3, #1
  403f0e:	ea4f 0232 	mov.w	r2, r2, rrx
  403f12:	ebb6 0e02 	subs.w	lr, r6, r2
  403f16:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f1a:	bf22      	ittt	cs
  403f1c:	1ab6      	subcs	r6, r6, r2
  403f1e:	4675      	movcs	r5, lr
  403f20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403f24:	085b      	lsrs	r3, r3, #1
  403f26:	ea4f 0232 	mov.w	r2, r2, rrx
  403f2a:	ebb6 0e02 	subs.w	lr, r6, r2
  403f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f32:	bf22      	ittt	cs
  403f34:	1ab6      	subcs	r6, r6, r2
  403f36:	4675      	movcs	r5, lr
  403f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403f3c:	085b      	lsrs	r3, r3, #1
  403f3e:	ea4f 0232 	mov.w	r2, r2, rrx
  403f42:	ebb6 0e02 	subs.w	lr, r6, r2
  403f46:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f4a:	bf22      	ittt	cs
  403f4c:	1ab6      	subcs	r6, r6, r2
  403f4e:	4675      	movcs	r5, lr
  403f50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403f54:	ea55 0e06 	orrs.w	lr, r5, r6
  403f58:	d018      	beq.n	403f8c <__aeabi_ddiv+0x114>
  403f5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403f5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403f62:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403f66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403f6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403f6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403f72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403f76:	d1c0      	bne.n	403efa <__aeabi_ddiv+0x82>
  403f78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403f7c:	d10b      	bne.n	403f96 <__aeabi_ddiv+0x11e>
  403f7e:	ea41 0100 	orr.w	r1, r1, r0
  403f82:	f04f 0000 	mov.w	r0, #0
  403f86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403f8a:	e7b6      	b.n	403efa <__aeabi_ddiv+0x82>
  403f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403f90:	bf04      	itt	eq
  403f92:	4301      	orreq	r1, r0
  403f94:	2000      	moveq	r0, #0
  403f96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403f9a:	bf88      	it	hi
  403f9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403fa0:	f63f aeaf 	bhi.w	403d02 <__aeabi_dmul+0xde>
  403fa4:	ebb5 0c03 	subs.w	ip, r5, r3
  403fa8:	bf04      	itt	eq
  403faa:	ebb6 0c02 	subseq.w	ip, r6, r2
  403fae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403fb2:	f150 0000 	adcs.w	r0, r0, #0
  403fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403fba:	bd70      	pop	{r4, r5, r6, pc}
  403fbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403fc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403fc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403fc8:	bfc2      	ittt	gt
  403fca:	ebd4 050c 	rsbsgt	r5, r4, ip
  403fce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403fd2:	bd70      	popgt	{r4, r5, r6, pc}
  403fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403fd8:	f04f 0e00 	mov.w	lr, #0
  403fdc:	3c01      	subs	r4, #1
  403fde:	e690      	b.n	403d02 <__aeabi_dmul+0xde>
  403fe0:	ea45 0e06 	orr.w	lr, r5, r6
  403fe4:	e68d      	b.n	403d02 <__aeabi_dmul+0xde>
  403fe6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403fea:	ea94 0f0c 	teq	r4, ip
  403fee:	bf08      	it	eq
  403ff0:	ea95 0f0c 	teqeq	r5, ip
  403ff4:	f43f af3b 	beq.w	403e6e <__aeabi_dmul+0x24a>
  403ff8:	ea94 0f0c 	teq	r4, ip
  403ffc:	d10a      	bne.n	404014 <__aeabi_ddiv+0x19c>
  403ffe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404002:	f47f af34 	bne.w	403e6e <__aeabi_dmul+0x24a>
  404006:	ea95 0f0c 	teq	r5, ip
  40400a:	f47f af25 	bne.w	403e58 <__aeabi_dmul+0x234>
  40400e:	4610      	mov	r0, r2
  404010:	4619      	mov	r1, r3
  404012:	e72c      	b.n	403e6e <__aeabi_dmul+0x24a>
  404014:	ea95 0f0c 	teq	r5, ip
  404018:	d106      	bne.n	404028 <__aeabi_ddiv+0x1b0>
  40401a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40401e:	f43f aefd 	beq.w	403e1c <__aeabi_dmul+0x1f8>
  404022:	4610      	mov	r0, r2
  404024:	4619      	mov	r1, r3
  404026:	e722      	b.n	403e6e <__aeabi_dmul+0x24a>
  404028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40402c:	bf18      	it	ne
  40402e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404032:	f47f aec5 	bne.w	403dc0 <__aeabi_dmul+0x19c>
  404036:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40403a:	f47f af0d 	bne.w	403e58 <__aeabi_dmul+0x234>
  40403e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404042:	f47f aeeb 	bne.w	403e1c <__aeabi_dmul+0x1f8>
  404046:	e712      	b.n	403e6e <__aeabi_dmul+0x24a>

00404048 <__gedf2>:
  404048:	f04f 3cff 	mov.w	ip, #4294967295
  40404c:	e006      	b.n	40405c <__cmpdf2+0x4>
  40404e:	bf00      	nop

00404050 <__ledf2>:
  404050:	f04f 0c01 	mov.w	ip, #1
  404054:	e002      	b.n	40405c <__cmpdf2+0x4>
  404056:	bf00      	nop

00404058 <__cmpdf2>:
  404058:	f04f 0c01 	mov.w	ip, #1
  40405c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40406c:	bf18      	it	ne
  40406e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404072:	d01b      	beq.n	4040ac <__cmpdf2+0x54>
  404074:	b001      	add	sp, #4
  404076:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40407a:	bf0c      	ite	eq
  40407c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404080:	ea91 0f03 	teqne	r1, r3
  404084:	bf02      	ittt	eq
  404086:	ea90 0f02 	teqeq	r0, r2
  40408a:	2000      	moveq	r0, #0
  40408c:	4770      	bxeq	lr
  40408e:	f110 0f00 	cmn.w	r0, #0
  404092:	ea91 0f03 	teq	r1, r3
  404096:	bf58      	it	pl
  404098:	4299      	cmppl	r1, r3
  40409a:	bf08      	it	eq
  40409c:	4290      	cmpeq	r0, r2
  40409e:	bf2c      	ite	cs
  4040a0:	17d8      	asrcs	r0, r3, #31
  4040a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4040a6:	f040 0001 	orr.w	r0, r0, #1
  4040aa:	4770      	bx	lr
  4040ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4040b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4040b4:	d102      	bne.n	4040bc <__cmpdf2+0x64>
  4040b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4040ba:	d107      	bne.n	4040cc <__cmpdf2+0x74>
  4040bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4040c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4040c4:	d1d6      	bne.n	404074 <__cmpdf2+0x1c>
  4040c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4040ca:	d0d3      	beq.n	404074 <__cmpdf2+0x1c>
  4040cc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4040d0:	4770      	bx	lr
  4040d2:	bf00      	nop

004040d4 <__aeabi_cdrcmple>:
  4040d4:	4684      	mov	ip, r0
  4040d6:	4610      	mov	r0, r2
  4040d8:	4662      	mov	r2, ip
  4040da:	468c      	mov	ip, r1
  4040dc:	4619      	mov	r1, r3
  4040de:	4663      	mov	r3, ip
  4040e0:	e000      	b.n	4040e4 <__aeabi_cdcmpeq>
  4040e2:	bf00      	nop

004040e4 <__aeabi_cdcmpeq>:
  4040e4:	b501      	push	{r0, lr}
  4040e6:	f7ff ffb7 	bl	404058 <__cmpdf2>
  4040ea:	2800      	cmp	r0, #0
  4040ec:	bf48      	it	mi
  4040ee:	f110 0f00 	cmnmi.w	r0, #0
  4040f2:	bd01      	pop	{r0, pc}

004040f4 <__aeabi_dcmpeq>:
  4040f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4040f8:	f7ff fff4 	bl	4040e4 <__aeabi_cdcmpeq>
  4040fc:	bf0c      	ite	eq
  4040fe:	2001      	moveq	r0, #1
  404100:	2000      	movne	r0, #0
  404102:	f85d fb08 	ldr.w	pc, [sp], #8
  404106:	bf00      	nop

00404108 <__aeabi_dcmplt>:
  404108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40410c:	f7ff ffea 	bl	4040e4 <__aeabi_cdcmpeq>
  404110:	bf34      	ite	cc
  404112:	2001      	movcc	r0, #1
  404114:	2000      	movcs	r0, #0
  404116:	f85d fb08 	ldr.w	pc, [sp], #8
  40411a:	bf00      	nop

0040411c <__aeabi_dcmple>:
  40411c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404120:	f7ff ffe0 	bl	4040e4 <__aeabi_cdcmpeq>
  404124:	bf94      	ite	ls
  404126:	2001      	movls	r0, #1
  404128:	2000      	movhi	r0, #0
  40412a:	f85d fb08 	ldr.w	pc, [sp], #8
  40412e:	bf00      	nop

00404130 <__aeabi_dcmpge>:
  404130:	f84d ed08 	str.w	lr, [sp, #-8]!
  404134:	f7ff ffce 	bl	4040d4 <__aeabi_cdrcmple>
  404138:	bf94      	ite	ls
  40413a:	2001      	movls	r0, #1
  40413c:	2000      	movhi	r0, #0
  40413e:	f85d fb08 	ldr.w	pc, [sp], #8
  404142:	bf00      	nop

00404144 <__aeabi_dcmpgt>:
  404144:	f84d ed08 	str.w	lr, [sp, #-8]!
  404148:	f7ff ffc4 	bl	4040d4 <__aeabi_cdrcmple>
  40414c:	bf34      	ite	cc
  40414e:	2001      	movcc	r0, #1
  404150:	2000      	movcs	r0, #0
  404152:	f85d fb08 	ldr.w	pc, [sp], #8
  404156:	bf00      	nop

00404158 <__aeabi_uldivmod>:
  404158:	b953      	cbnz	r3, 404170 <__aeabi_uldivmod+0x18>
  40415a:	b94a      	cbnz	r2, 404170 <__aeabi_uldivmod+0x18>
  40415c:	2900      	cmp	r1, #0
  40415e:	bf08      	it	eq
  404160:	2800      	cmpeq	r0, #0
  404162:	bf1c      	itt	ne
  404164:	f04f 31ff 	movne.w	r1, #4294967295
  404168:	f04f 30ff 	movne.w	r0, #4294967295
  40416c:	f000 b97a 	b.w	404464 <__aeabi_idiv0>
  404170:	f1ad 0c08 	sub.w	ip, sp, #8
  404174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404178:	f000 f806 	bl	404188 <__udivmoddi4>
  40417c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404184:	b004      	add	sp, #16
  404186:	4770      	bx	lr

00404188 <__udivmoddi4>:
  404188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40418c:	468c      	mov	ip, r1
  40418e:	460d      	mov	r5, r1
  404190:	4604      	mov	r4, r0
  404192:	9e08      	ldr	r6, [sp, #32]
  404194:	2b00      	cmp	r3, #0
  404196:	d151      	bne.n	40423c <__udivmoddi4+0xb4>
  404198:	428a      	cmp	r2, r1
  40419a:	4617      	mov	r7, r2
  40419c:	d96d      	bls.n	40427a <__udivmoddi4+0xf2>
  40419e:	fab2 fe82 	clz	lr, r2
  4041a2:	f1be 0f00 	cmp.w	lr, #0
  4041a6:	d00b      	beq.n	4041c0 <__udivmoddi4+0x38>
  4041a8:	f1ce 0c20 	rsb	ip, lr, #32
  4041ac:	fa01 f50e 	lsl.w	r5, r1, lr
  4041b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4041b4:	fa02 f70e 	lsl.w	r7, r2, lr
  4041b8:	ea4c 0c05 	orr.w	ip, ip, r5
  4041bc:	fa00 f40e 	lsl.w	r4, r0, lr
  4041c0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4041c4:	0c25      	lsrs	r5, r4, #16
  4041c6:	fbbc f8fa 	udiv	r8, ip, sl
  4041ca:	fa1f f987 	uxth.w	r9, r7
  4041ce:	fb0a cc18 	mls	ip, sl, r8, ip
  4041d2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4041d6:	fb08 f309 	mul.w	r3, r8, r9
  4041da:	42ab      	cmp	r3, r5
  4041dc:	d90a      	bls.n	4041f4 <__udivmoddi4+0x6c>
  4041de:	19ed      	adds	r5, r5, r7
  4041e0:	f108 32ff 	add.w	r2, r8, #4294967295
  4041e4:	f080 8123 	bcs.w	40442e <__udivmoddi4+0x2a6>
  4041e8:	42ab      	cmp	r3, r5
  4041ea:	f240 8120 	bls.w	40442e <__udivmoddi4+0x2a6>
  4041ee:	f1a8 0802 	sub.w	r8, r8, #2
  4041f2:	443d      	add	r5, r7
  4041f4:	1aed      	subs	r5, r5, r3
  4041f6:	b2a4      	uxth	r4, r4
  4041f8:	fbb5 f0fa 	udiv	r0, r5, sl
  4041fc:	fb0a 5510 	mls	r5, sl, r0, r5
  404200:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404204:	fb00 f909 	mul.w	r9, r0, r9
  404208:	45a1      	cmp	r9, r4
  40420a:	d909      	bls.n	404220 <__udivmoddi4+0x98>
  40420c:	19e4      	adds	r4, r4, r7
  40420e:	f100 33ff 	add.w	r3, r0, #4294967295
  404212:	f080 810a 	bcs.w	40442a <__udivmoddi4+0x2a2>
  404216:	45a1      	cmp	r9, r4
  404218:	f240 8107 	bls.w	40442a <__udivmoddi4+0x2a2>
  40421c:	3802      	subs	r0, #2
  40421e:	443c      	add	r4, r7
  404220:	eba4 0409 	sub.w	r4, r4, r9
  404224:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404228:	2100      	movs	r1, #0
  40422a:	2e00      	cmp	r6, #0
  40422c:	d061      	beq.n	4042f2 <__udivmoddi4+0x16a>
  40422e:	fa24 f40e 	lsr.w	r4, r4, lr
  404232:	2300      	movs	r3, #0
  404234:	6034      	str	r4, [r6, #0]
  404236:	6073      	str	r3, [r6, #4]
  404238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40423c:	428b      	cmp	r3, r1
  40423e:	d907      	bls.n	404250 <__udivmoddi4+0xc8>
  404240:	2e00      	cmp	r6, #0
  404242:	d054      	beq.n	4042ee <__udivmoddi4+0x166>
  404244:	2100      	movs	r1, #0
  404246:	e886 0021 	stmia.w	r6, {r0, r5}
  40424a:	4608      	mov	r0, r1
  40424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404250:	fab3 f183 	clz	r1, r3
  404254:	2900      	cmp	r1, #0
  404256:	f040 808e 	bne.w	404376 <__udivmoddi4+0x1ee>
  40425a:	42ab      	cmp	r3, r5
  40425c:	d302      	bcc.n	404264 <__udivmoddi4+0xdc>
  40425e:	4282      	cmp	r2, r0
  404260:	f200 80fa 	bhi.w	404458 <__udivmoddi4+0x2d0>
  404264:	1a84      	subs	r4, r0, r2
  404266:	eb65 0503 	sbc.w	r5, r5, r3
  40426a:	2001      	movs	r0, #1
  40426c:	46ac      	mov	ip, r5
  40426e:	2e00      	cmp	r6, #0
  404270:	d03f      	beq.n	4042f2 <__udivmoddi4+0x16a>
  404272:	e886 1010 	stmia.w	r6, {r4, ip}
  404276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40427a:	b912      	cbnz	r2, 404282 <__udivmoddi4+0xfa>
  40427c:	2701      	movs	r7, #1
  40427e:	fbb7 f7f2 	udiv	r7, r7, r2
  404282:	fab7 fe87 	clz	lr, r7
  404286:	f1be 0f00 	cmp.w	lr, #0
  40428a:	d134      	bne.n	4042f6 <__udivmoddi4+0x16e>
  40428c:	1beb      	subs	r3, r5, r7
  40428e:	0c3a      	lsrs	r2, r7, #16
  404290:	fa1f fc87 	uxth.w	ip, r7
  404294:	2101      	movs	r1, #1
  404296:	fbb3 f8f2 	udiv	r8, r3, r2
  40429a:	0c25      	lsrs	r5, r4, #16
  40429c:	fb02 3318 	mls	r3, r2, r8, r3
  4042a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4042a4:	fb0c f308 	mul.w	r3, ip, r8
  4042a8:	42ab      	cmp	r3, r5
  4042aa:	d907      	bls.n	4042bc <__udivmoddi4+0x134>
  4042ac:	19ed      	adds	r5, r5, r7
  4042ae:	f108 30ff 	add.w	r0, r8, #4294967295
  4042b2:	d202      	bcs.n	4042ba <__udivmoddi4+0x132>
  4042b4:	42ab      	cmp	r3, r5
  4042b6:	f200 80d1 	bhi.w	40445c <__udivmoddi4+0x2d4>
  4042ba:	4680      	mov	r8, r0
  4042bc:	1aed      	subs	r5, r5, r3
  4042be:	b2a3      	uxth	r3, r4
  4042c0:	fbb5 f0f2 	udiv	r0, r5, r2
  4042c4:	fb02 5510 	mls	r5, r2, r0, r5
  4042c8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4042cc:	fb0c fc00 	mul.w	ip, ip, r0
  4042d0:	45a4      	cmp	ip, r4
  4042d2:	d907      	bls.n	4042e4 <__udivmoddi4+0x15c>
  4042d4:	19e4      	adds	r4, r4, r7
  4042d6:	f100 33ff 	add.w	r3, r0, #4294967295
  4042da:	d202      	bcs.n	4042e2 <__udivmoddi4+0x15a>
  4042dc:	45a4      	cmp	ip, r4
  4042de:	f200 80b8 	bhi.w	404452 <__udivmoddi4+0x2ca>
  4042e2:	4618      	mov	r0, r3
  4042e4:	eba4 040c 	sub.w	r4, r4, ip
  4042e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4042ec:	e79d      	b.n	40422a <__udivmoddi4+0xa2>
  4042ee:	4631      	mov	r1, r6
  4042f0:	4630      	mov	r0, r6
  4042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042f6:	f1ce 0420 	rsb	r4, lr, #32
  4042fa:	fa05 f30e 	lsl.w	r3, r5, lr
  4042fe:	fa07 f70e 	lsl.w	r7, r7, lr
  404302:	fa20 f804 	lsr.w	r8, r0, r4
  404306:	0c3a      	lsrs	r2, r7, #16
  404308:	fa25 f404 	lsr.w	r4, r5, r4
  40430c:	ea48 0803 	orr.w	r8, r8, r3
  404310:	fbb4 f1f2 	udiv	r1, r4, r2
  404314:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404318:	fb02 4411 	mls	r4, r2, r1, r4
  40431c:	fa1f fc87 	uxth.w	ip, r7
  404320:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404324:	fb01 f30c 	mul.w	r3, r1, ip
  404328:	42ab      	cmp	r3, r5
  40432a:	fa00 f40e 	lsl.w	r4, r0, lr
  40432e:	d909      	bls.n	404344 <__udivmoddi4+0x1bc>
  404330:	19ed      	adds	r5, r5, r7
  404332:	f101 30ff 	add.w	r0, r1, #4294967295
  404336:	f080 808a 	bcs.w	40444e <__udivmoddi4+0x2c6>
  40433a:	42ab      	cmp	r3, r5
  40433c:	f240 8087 	bls.w	40444e <__udivmoddi4+0x2c6>
  404340:	3902      	subs	r1, #2
  404342:	443d      	add	r5, r7
  404344:	1aeb      	subs	r3, r5, r3
  404346:	fa1f f588 	uxth.w	r5, r8
  40434a:	fbb3 f0f2 	udiv	r0, r3, r2
  40434e:	fb02 3310 	mls	r3, r2, r0, r3
  404352:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404356:	fb00 f30c 	mul.w	r3, r0, ip
  40435a:	42ab      	cmp	r3, r5
  40435c:	d907      	bls.n	40436e <__udivmoddi4+0x1e6>
  40435e:	19ed      	adds	r5, r5, r7
  404360:	f100 38ff 	add.w	r8, r0, #4294967295
  404364:	d26f      	bcs.n	404446 <__udivmoddi4+0x2be>
  404366:	42ab      	cmp	r3, r5
  404368:	d96d      	bls.n	404446 <__udivmoddi4+0x2be>
  40436a:	3802      	subs	r0, #2
  40436c:	443d      	add	r5, r7
  40436e:	1aeb      	subs	r3, r5, r3
  404370:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404374:	e78f      	b.n	404296 <__udivmoddi4+0x10e>
  404376:	f1c1 0720 	rsb	r7, r1, #32
  40437a:	fa22 f807 	lsr.w	r8, r2, r7
  40437e:	408b      	lsls	r3, r1
  404380:	fa05 f401 	lsl.w	r4, r5, r1
  404384:	ea48 0303 	orr.w	r3, r8, r3
  404388:	fa20 fe07 	lsr.w	lr, r0, r7
  40438c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404390:	40fd      	lsrs	r5, r7
  404392:	ea4e 0e04 	orr.w	lr, lr, r4
  404396:	fbb5 f9fc 	udiv	r9, r5, ip
  40439a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40439e:	fb0c 5519 	mls	r5, ip, r9, r5
  4043a2:	fa1f f883 	uxth.w	r8, r3
  4043a6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4043aa:	fb09 f408 	mul.w	r4, r9, r8
  4043ae:	42ac      	cmp	r4, r5
  4043b0:	fa02 f201 	lsl.w	r2, r2, r1
  4043b4:	fa00 fa01 	lsl.w	sl, r0, r1
  4043b8:	d908      	bls.n	4043cc <__udivmoddi4+0x244>
  4043ba:	18ed      	adds	r5, r5, r3
  4043bc:	f109 30ff 	add.w	r0, r9, #4294967295
  4043c0:	d243      	bcs.n	40444a <__udivmoddi4+0x2c2>
  4043c2:	42ac      	cmp	r4, r5
  4043c4:	d941      	bls.n	40444a <__udivmoddi4+0x2c2>
  4043c6:	f1a9 0902 	sub.w	r9, r9, #2
  4043ca:	441d      	add	r5, r3
  4043cc:	1b2d      	subs	r5, r5, r4
  4043ce:	fa1f fe8e 	uxth.w	lr, lr
  4043d2:	fbb5 f0fc 	udiv	r0, r5, ip
  4043d6:	fb0c 5510 	mls	r5, ip, r0, r5
  4043da:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4043de:	fb00 f808 	mul.w	r8, r0, r8
  4043e2:	45a0      	cmp	r8, r4
  4043e4:	d907      	bls.n	4043f6 <__udivmoddi4+0x26e>
  4043e6:	18e4      	adds	r4, r4, r3
  4043e8:	f100 35ff 	add.w	r5, r0, #4294967295
  4043ec:	d229      	bcs.n	404442 <__udivmoddi4+0x2ba>
  4043ee:	45a0      	cmp	r8, r4
  4043f0:	d927      	bls.n	404442 <__udivmoddi4+0x2ba>
  4043f2:	3802      	subs	r0, #2
  4043f4:	441c      	add	r4, r3
  4043f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4043fa:	eba4 0408 	sub.w	r4, r4, r8
  4043fe:	fba0 8902 	umull	r8, r9, r0, r2
  404402:	454c      	cmp	r4, r9
  404404:	46c6      	mov	lr, r8
  404406:	464d      	mov	r5, r9
  404408:	d315      	bcc.n	404436 <__udivmoddi4+0x2ae>
  40440a:	d012      	beq.n	404432 <__udivmoddi4+0x2aa>
  40440c:	b156      	cbz	r6, 404424 <__udivmoddi4+0x29c>
  40440e:	ebba 030e 	subs.w	r3, sl, lr
  404412:	eb64 0405 	sbc.w	r4, r4, r5
  404416:	fa04 f707 	lsl.w	r7, r4, r7
  40441a:	40cb      	lsrs	r3, r1
  40441c:	431f      	orrs	r7, r3
  40441e:	40cc      	lsrs	r4, r1
  404420:	6037      	str	r7, [r6, #0]
  404422:	6074      	str	r4, [r6, #4]
  404424:	2100      	movs	r1, #0
  404426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40442a:	4618      	mov	r0, r3
  40442c:	e6f8      	b.n	404220 <__udivmoddi4+0x98>
  40442e:	4690      	mov	r8, r2
  404430:	e6e0      	b.n	4041f4 <__udivmoddi4+0x6c>
  404432:	45c2      	cmp	sl, r8
  404434:	d2ea      	bcs.n	40440c <__udivmoddi4+0x284>
  404436:	ebb8 0e02 	subs.w	lr, r8, r2
  40443a:	eb69 0503 	sbc.w	r5, r9, r3
  40443e:	3801      	subs	r0, #1
  404440:	e7e4      	b.n	40440c <__udivmoddi4+0x284>
  404442:	4628      	mov	r0, r5
  404444:	e7d7      	b.n	4043f6 <__udivmoddi4+0x26e>
  404446:	4640      	mov	r0, r8
  404448:	e791      	b.n	40436e <__udivmoddi4+0x1e6>
  40444a:	4681      	mov	r9, r0
  40444c:	e7be      	b.n	4043cc <__udivmoddi4+0x244>
  40444e:	4601      	mov	r1, r0
  404450:	e778      	b.n	404344 <__udivmoddi4+0x1bc>
  404452:	3802      	subs	r0, #2
  404454:	443c      	add	r4, r7
  404456:	e745      	b.n	4042e4 <__udivmoddi4+0x15c>
  404458:	4608      	mov	r0, r1
  40445a:	e708      	b.n	40426e <__udivmoddi4+0xe6>
  40445c:	f1a8 0802 	sub.w	r8, r8, #2
  404460:	443d      	add	r5, r7
  404462:	e72b      	b.n	4042bc <__udivmoddi4+0x134>

00404464 <__aeabi_idiv0>:
  404464:	4770      	bx	lr
  404466:	bf00      	nop

00404468 <__libc_init_array>:
  404468:	b570      	push	{r4, r5, r6, lr}
  40446a:	4e0f      	ldr	r6, [pc, #60]	; (4044a8 <__libc_init_array+0x40>)
  40446c:	4d0f      	ldr	r5, [pc, #60]	; (4044ac <__libc_init_array+0x44>)
  40446e:	1b76      	subs	r6, r6, r5
  404470:	10b6      	asrs	r6, r6, #2
  404472:	bf18      	it	ne
  404474:	2400      	movne	r4, #0
  404476:	d005      	beq.n	404484 <__libc_init_array+0x1c>
  404478:	3401      	adds	r4, #1
  40447a:	f855 3b04 	ldr.w	r3, [r5], #4
  40447e:	4798      	blx	r3
  404480:	42a6      	cmp	r6, r4
  404482:	d1f9      	bne.n	404478 <__libc_init_array+0x10>
  404484:	4e0a      	ldr	r6, [pc, #40]	; (4044b0 <__libc_init_array+0x48>)
  404486:	4d0b      	ldr	r5, [pc, #44]	; (4044b4 <__libc_init_array+0x4c>)
  404488:	1b76      	subs	r6, r6, r5
  40448a:	f005 f825 	bl	4094d8 <_init>
  40448e:	10b6      	asrs	r6, r6, #2
  404490:	bf18      	it	ne
  404492:	2400      	movne	r4, #0
  404494:	d006      	beq.n	4044a4 <__libc_init_array+0x3c>
  404496:	3401      	adds	r4, #1
  404498:	f855 3b04 	ldr.w	r3, [r5], #4
  40449c:	4798      	blx	r3
  40449e:	42a6      	cmp	r6, r4
  4044a0:	d1f9      	bne.n	404496 <__libc_init_array+0x2e>
  4044a2:	bd70      	pop	{r4, r5, r6, pc}
  4044a4:	bd70      	pop	{r4, r5, r6, pc}
  4044a6:	bf00      	nop
  4044a8:	004094e4 	.word	0x004094e4
  4044ac:	004094e4 	.word	0x004094e4
  4044b0:	004094ec 	.word	0x004094ec
  4044b4:	004094e4 	.word	0x004094e4

004044b8 <malloc>:
  4044b8:	4b02      	ldr	r3, [pc, #8]	; (4044c4 <malloc+0xc>)
  4044ba:	4601      	mov	r1, r0
  4044bc:	6818      	ldr	r0, [r3, #0]
  4044be:	f000 b80b 	b.w	4044d8 <_malloc_r>
  4044c2:	bf00      	nop
  4044c4:	20400014 	.word	0x20400014

004044c8 <free>:
  4044c8:	4b02      	ldr	r3, [pc, #8]	; (4044d4 <free+0xc>)
  4044ca:	4601      	mov	r1, r0
  4044cc:	6818      	ldr	r0, [r3, #0]
  4044ce:	f003 ba5f 	b.w	407990 <_free_r>
  4044d2:	bf00      	nop
  4044d4:	20400014 	.word	0x20400014

004044d8 <_malloc_r>:
  4044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044dc:	f101 060b 	add.w	r6, r1, #11
  4044e0:	2e16      	cmp	r6, #22
  4044e2:	b083      	sub	sp, #12
  4044e4:	4605      	mov	r5, r0
  4044e6:	f240 809e 	bls.w	404626 <_malloc_r+0x14e>
  4044ea:	f036 0607 	bics.w	r6, r6, #7
  4044ee:	f100 80bd 	bmi.w	40466c <_malloc_r+0x194>
  4044f2:	42b1      	cmp	r1, r6
  4044f4:	f200 80ba 	bhi.w	40466c <_malloc_r+0x194>
  4044f8:	f000 fb86 	bl	404c08 <__malloc_lock>
  4044fc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404500:	f0c0 8293 	bcc.w	404a2a <_malloc_r+0x552>
  404504:	0a73      	lsrs	r3, r6, #9
  404506:	f000 80b8 	beq.w	40467a <_malloc_r+0x1a2>
  40450a:	2b04      	cmp	r3, #4
  40450c:	f200 8179 	bhi.w	404802 <_malloc_r+0x32a>
  404510:	09b3      	lsrs	r3, r6, #6
  404512:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404516:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40451a:	00c3      	lsls	r3, r0, #3
  40451c:	4fbf      	ldr	r7, [pc, #764]	; (40481c <_malloc_r+0x344>)
  40451e:	443b      	add	r3, r7
  404520:	f1a3 0108 	sub.w	r1, r3, #8
  404524:	685c      	ldr	r4, [r3, #4]
  404526:	42a1      	cmp	r1, r4
  404528:	d106      	bne.n	404538 <_malloc_r+0x60>
  40452a:	e00c      	b.n	404546 <_malloc_r+0x6e>
  40452c:	2a00      	cmp	r2, #0
  40452e:	f280 80aa 	bge.w	404686 <_malloc_r+0x1ae>
  404532:	68e4      	ldr	r4, [r4, #12]
  404534:	42a1      	cmp	r1, r4
  404536:	d006      	beq.n	404546 <_malloc_r+0x6e>
  404538:	6863      	ldr	r3, [r4, #4]
  40453a:	f023 0303 	bic.w	r3, r3, #3
  40453e:	1b9a      	subs	r2, r3, r6
  404540:	2a0f      	cmp	r2, #15
  404542:	ddf3      	ble.n	40452c <_malloc_r+0x54>
  404544:	4670      	mov	r0, lr
  404546:	693c      	ldr	r4, [r7, #16]
  404548:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404830 <_malloc_r+0x358>
  40454c:	4574      	cmp	r4, lr
  40454e:	f000 81ab 	beq.w	4048a8 <_malloc_r+0x3d0>
  404552:	6863      	ldr	r3, [r4, #4]
  404554:	f023 0303 	bic.w	r3, r3, #3
  404558:	1b9a      	subs	r2, r3, r6
  40455a:	2a0f      	cmp	r2, #15
  40455c:	f300 8190 	bgt.w	404880 <_malloc_r+0x3a8>
  404560:	2a00      	cmp	r2, #0
  404562:	f8c7 e014 	str.w	lr, [r7, #20]
  404566:	f8c7 e010 	str.w	lr, [r7, #16]
  40456a:	f280 809d 	bge.w	4046a8 <_malloc_r+0x1d0>
  40456e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404572:	f080 8161 	bcs.w	404838 <_malloc_r+0x360>
  404576:	08db      	lsrs	r3, r3, #3
  404578:	f103 0c01 	add.w	ip, r3, #1
  40457c:	1099      	asrs	r1, r3, #2
  40457e:	687a      	ldr	r2, [r7, #4]
  404580:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404584:	f8c4 8008 	str.w	r8, [r4, #8]
  404588:	2301      	movs	r3, #1
  40458a:	408b      	lsls	r3, r1
  40458c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404590:	4313      	orrs	r3, r2
  404592:	3908      	subs	r1, #8
  404594:	60e1      	str	r1, [r4, #12]
  404596:	607b      	str	r3, [r7, #4]
  404598:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40459c:	f8c8 400c 	str.w	r4, [r8, #12]
  4045a0:	1082      	asrs	r2, r0, #2
  4045a2:	2401      	movs	r4, #1
  4045a4:	4094      	lsls	r4, r2
  4045a6:	429c      	cmp	r4, r3
  4045a8:	f200 808b 	bhi.w	4046c2 <_malloc_r+0x1ea>
  4045ac:	421c      	tst	r4, r3
  4045ae:	d106      	bne.n	4045be <_malloc_r+0xe6>
  4045b0:	f020 0003 	bic.w	r0, r0, #3
  4045b4:	0064      	lsls	r4, r4, #1
  4045b6:	421c      	tst	r4, r3
  4045b8:	f100 0004 	add.w	r0, r0, #4
  4045bc:	d0fa      	beq.n	4045b4 <_malloc_r+0xdc>
  4045be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4045c2:	46cc      	mov	ip, r9
  4045c4:	4680      	mov	r8, r0
  4045c6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4045ca:	459c      	cmp	ip, r3
  4045cc:	d107      	bne.n	4045de <_malloc_r+0x106>
  4045ce:	e16d      	b.n	4048ac <_malloc_r+0x3d4>
  4045d0:	2a00      	cmp	r2, #0
  4045d2:	f280 817b 	bge.w	4048cc <_malloc_r+0x3f4>
  4045d6:	68db      	ldr	r3, [r3, #12]
  4045d8:	459c      	cmp	ip, r3
  4045da:	f000 8167 	beq.w	4048ac <_malloc_r+0x3d4>
  4045de:	6859      	ldr	r1, [r3, #4]
  4045e0:	f021 0103 	bic.w	r1, r1, #3
  4045e4:	1b8a      	subs	r2, r1, r6
  4045e6:	2a0f      	cmp	r2, #15
  4045e8:	ddf2      	ble.n	4045d0 <_malloc_r+0xf8>
  4045ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4045ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4045f2:	9300      	str	r3, [sp, #0]
  4045f4:	199c      	adds	r4, r3, r6
  4045f6:	4628      	mov	r0, r5
  4045f8:	f046 0601 	orr.w	r6, r6, #1
  4045fc:	f042 0501 	orr.w	r5, r2, #1
  404600:	605e      	str	r6, [r3, #4]
  404602:	f8c8 c00c 	str.w	ip, [r8, #12]
  404606:	f8cc 8008 	str.w	r8, [ip, #8]
  40460a:	617c      	str	r4, [r7, #20]
  40460c:	613c      	str	r4, [r7, #16]
  40460e:	f8c4 e00c 	str.w	lr, [r4, #12]
  404612:	f8c4 e008 	str.w	lr, [r4, #8]
  404616:	6065      	str	r5, [r4, #4]
  404618:	505a      	str	r2, [r3, r1]
  40461a:	f000 fafb 	bl	404c14 <__malloc_unlock>
  40461e:	9b00      	ldr	r3, [sp, #0]
  404620:	f103 0408 	add.w	r4, r3, #8
  404624:	e01e      	b.n	404664 <_malloc_r+0x18c>
  404626:	2910      	cmp	r1, #16
  404628:	d820      	bhi.n	40466c <_malloc_r+0x194>
  40462a:	f000 faed 	bl	404c08 <__malloc_lock>
  40462e:	2610      	movs	r6, #16
  404630:	2318      	movs	r3, #24
  404632:	2002      	movs	r0, #2
  404634:	4f79      	ldr	r7, [pc, #484]	; (40481c <_malloc_r+0x344>)
  404636:	443b      	add	r3, r7
  404638:	f1a3 0208 	sub.w	r2, r3, #8
  40463c:	685c      	ldr	r4, [r3, #4]
  40463e:	4294      	cmp	r4, r2
  404640:	f000 813d 	beq.w	4048be <_malloc_r+0x3e6>
  404644:	6863      	ldr	r3, [r4, #4]
  404646:	68e1      	ldr	r1, [r4, #12]
  404648:	68a6      	ldr	r6, [r4, #8]
  40464a:	f023 0303 	bic.w	r3, r3, #3
  40464e:	4423      	add	r3, r4
  404650:	4628      	mov	r0, r5
  404652:	685a      	ldr	r2, [r3, #4]
  404654:	60f1      	str	r1, [r6, #12]
  404656:	f042 0201 	orr.w	r2, r2, #1
  40465a:	608e      	str	r6, [r1, #8]
  40465c:	605a      	str	r2, [r3, #4]
  40465e:	f000 fad9 	bl	404c14 <__malloc_unlock>
  404662:	3408      	adds	r4, #8
  404664:	4620      	mov	r0, r4
  404666:	b003      	add	sp, #12
  404668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40466c:	2400      	movs	r4, #0
  40466e:	230c      	movs	r3, #12
  404670:	4620      	mov	r0, r4
  404672:	602b      	str	r3, [r5, #0]
  404674:	b003      	add	sp, #12
  404676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40467a:	2040      	movs	r0, #64	; 0x40
  40467c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404680:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404684:	e74a      	b.n	40451c <_malloc_r+0x44>
  404686:	4423      	add	r3, r4
  404688:	68e1      	ldr	r1, [r4, #12]
  40468a:	685a      	ldr	r2, [r3, #4]
  40468c:	68a6      	ldr	r6, [r4, #8]
  40468e:	f042 0201 	orr.w	r2, r2, #1
  404692:	60f1      	str	r1, [r6, #12]
  404694:	4628      	mov	r0, r5
  404696:	608e      	str	r6, [r1, #8]
  404698:	605a      	str	r2, [r3, #4]
  40469a:	f000 fabb 	bl	404c14 <__malloc_unlock>
  40469e:	3408      	adds	r4, #8
  4046a0:	4620      	mov	r0, r4
  4046a2:	b003      	add	sp, #12
  4046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046a8:	4423      	add	r3, r4
  4046aa:	4628      	mov	r0, r5
  4046ac:	685a      	ldr	r2, [r3, #4]
  4046ae:	f042 0201 	orr.w	r2, r2, #1
  4046b2:	605a      	str	r2, [r3, #4]
  4046b4:	f000 faae 	bl	404c14 <__malloc_unlock>
  4046b8:	3408      	adds	r4, #8
  4046ba:	4620      	mov	r0, r4
  4046bc:	b003      	add	sp, #12
  4046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c2:	68bc      	ldr	r4, [r7, #8]
  4046c4:	6863      	ldr	r3, [r4, #4]
  4046c6:	f023 0803 	bic.w	r8, r3, #3
  4046ca:	45b0      	cmp	r8, r6
  4046cc:	d304      	bcc.n	4046d8 <_malloc_r+0x200>
  4046ce:	eba8 0306 	sub.w	r3, r8, r6
  4046d2:	2b0f      	cmp	r3, #15
  4046d4:	f300 8085 	bgt.w	4047e2 <_malloc_r+0x30a>
  4046d8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404834 <_malloc_r+0x35c>
  4046dc:	4b50      	ldr	r3, [pc, #320]	; (404820 <_malloc_r+0x348>)
  4046de:	f8d9 2000 	ldr.w	r2, [r9]
  4046e2:	681b      	ldr	r3, [r3, #0]
  4046e4:	3201      	adds	r2, #1
  4046e6:	4433      	add	r3, r6
  4046e8:	eb04 0a08 	add.w	sl, r4, r8
  4046ec:	f000 8155 	beq.w	40499a <_malloc_r+0x4c2>
  4046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4046f4:	330f      	adds	r3, #15
  4046f6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4046fa:	f02b 0b0f 	bic.w	fp, fp, #15
  4046fe:	4659      	mov	r1, fp
  404700:	4628      	mov	r0, r5
  404702:	f000 fb21 	bl	404d48 <_sbrk_r>
  404706:	1c41      	adds	r1, r0, #1
  404708:	4602      	mov	r2, r0
  40470a:	f000 80fc 	beq.w	404906 <_malloc_r+0x42e>
  40470e:	4582      	cmp	sl, r0
  404710:	f200 80f7 	bhi.w	404902 <_malloc_r+0x42a>
  404714:	4b43      	ldr	r3, [pc, #268]	; (404824 <_malloc_r+0x34c>)
  404716:	6819      	ldr	r1, [r3, #0]
  404718:	4459      	add	r1, fp
  40471a:	6019      	str	r1, [r3, #0]
  40471c:	f000 814d 	beq.w	4049ba <_malloc_r+0x4e2>
  404720:	f8d9 0000 	ldr.w	r0, [r9]
  404724:	3001      	adds	r0, #1
  404726:	bf1b      	ittet	ne
  404728:	eba2 0a0a 	subne.w	sl, r2, sl
  40472c:	4451      	addne	r1, sl
  40472e:	f8c9 2000 	streq.w	r2, [r9]
  404732:	6019      	strne	r1, [r3, #0]
  404734:	f012 0107 	ands.w	r1, r2, #7
  404738:	f000 8115 	beq.w	404966 <_malloc_r+0x48e>
  40473c:	f1c1 0008 	rsb	r0, r1, #8
  404740:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404744:	4402      	add	r2, r0
  404746:	3108      	adds	r1, #8
  404748:	eb02 090b 	add.w	r9, r2, fp
  40474c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404750:	eba1 0909 	sub.w	r9, r1, r9
  404754:	4649      	mov	r1, r9
  404756:	4628      	mov	r0, r5
  404758:	9301      	str	r3, [sp, #4]
  40475a:	9200      	str	r2, [sp, #0]
  40475c:	f000 faf4 	bl	404d48 <_sbrk_r>
  404760:	1c43      	adds	r3, r0, #1
  404762:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404766:	f000 8143 	beq.w	4049f0 <_malloc_r+0x518>
  40476a:	1a80      	subs	r0, r0, r2
  40476c:	4448      	add	r0, r9
  40476e:	f040 0001 	orr.w	r0, r0, #1
  404772:	6819      	ldr	r1, [r3, #0]
  404774:	60ba      	str	r2, [r7, #8]
  404776:	4449      	add	r1, r9
  404778:	42bc      	cmp	r4, r7
  40477a:	6050      	str	r0, [r2, #4]
  40477c:	6019      	str	r1, [r3, #0]
  40477e:	d017      	beq.n	4047b0 <_malloc_r+0x2d8>
  404780:	f1b8 0f0f 	cmp.w	r8, #15
  404784:	f240 80fb 	bls.w	40497e <_malloc_r+0x4a6>
  404788:	6860      	ldr	r0, [r4, #4]
  40478a:	f1a8 020c 	sub.w	r2, r8, #12
  40478e:	f022 0207 	bic.w	r2, r2, #7
  404792:	eb04 0e02 	add.w	lr, r4, r2
  404796:	f000 0001 	and.w	r0, r0, #1
  40479a:	f04f 0c05 	mov.w	ip, #5
  40479e:	4310      	orrs	r0, r2
  4047a0:	2a0f      	cmp	r2, #15
  4047a2:	6060      	str	r0, [r4, #4]
  4047a4:	f8ce c004 	str.w	ip, [lr, #4]
  4047a8:	f8ce c008 	str.w	ip, [lr, #8]
  4047ac:	f200 8117 	bhi.w	4049de <_malloc_r+0x506>
  4047b0:	4b1d      	ldr	r3, [pc, #116]	; (404828 <_malloc_r+0x350>)
  4047b2:	68bc      	ldr	r4, [r7, #8]
  4047b4:	681a      	ldr	r2, [r3, #0]
  4047b6:	4291      	cmp	r1, r2
  4047b8:	bf88      	it	hi
  4047ba:	6019      	strhi	r1, [r3, #0]
  4047bc:	4b1b      	ldr	r3, [pc, #108]	; (40482c <_malloc_r+0x354>)
  4047be:	681a      	ldr	r2, [r3, #0]
  4047c0:	4291      	cmp	r1, r2
  4047c2:	6862      	ldr	r2, [r4, #4]
  4047c4:	bf88      	it	hi
  4047c6:	6019      	strhi	r1, [r3, #0]
  4047c8:	f022 0203 	bic.w	r2, r2, #3
  4047cc:	4296      	cmp	r6, r2
  4047ce:	eba2 0306 	sub.w	r3, r2, r6
  4047d2:	d801      	bhi.n	4047d8 <_malloc_r+0x300>
  4047d4:	2b0f      	cmp	r3, #15
  4047d6:	dc04      	bgt.n	4047e2 <_malloc_r+0x30a>
  4047d8:	4628      	mov	r0, r5
  4047da:	f000 fa1b 	bl	404c14 <__malloc_unlock>
  4047de:	2400      	movs	r4, #0
  4047e0:	e740      	b.n	404664 <_malloc_r+0x18c>
  4047e2:	19a2      	adds	r2, r4, r6
  4047e4:	f043 0301 	orr.w	r3, r3, #1
  4047e8:	f046 0601 	orr.w	r6, r6, #1
  4047ec:	6066      	str	r6, [r4, #4]
  4047ee:	4628      	mov	r0, r5
  4047f0:	60ba      	str	r2, [r7, #8]
  4047f2:	6053      	str	r3, [r2, #4]
  4047f4:	f000 fa0e 	bl	404c14 <__malloc_unlock>
  4047f8:	3408      	adds	r4, #8
  4047fa:	4620      	mov	r0, r4
  4047fc:	b003      	add	sp, #12
  4047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404802:	2b14      	cmp	r3, #20
  404804:	d971      	bls.n	4048ea <_malloc_r+0x412>
  404806:	2b54      	cmp	r3, #84	; 0x54
  404808:	f200 80a3 	bhi.w	404952 <_malloc_r+0x47a>
  40480c:	0b33      	lsrs	r3, r6, #12
  40480e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404812:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404816:	00c3      	lsls	r3, r0, #3
  404818:	e680      	b.n	40451c <_malloc_r+0x44>
  40481a:	bf00      	nop
  40481c:	20400440 	.word	0x20400440
  404820:	20400dd0 	.word	0x20400dd0
  404824:	20400da0 	.word	0x20400da0
  404828:	20400dc8 	.word	0x20400dc8
  40482c:	20400dcc 	.word	0x20400dcc
  404830:	20400448 	.word	0x20400448
  404834:	20400848 	.word	0x20400848
  404838:	0a5a      	lsrs	r2, r3, #9
  40483a:	2a04      	cmp	r2, #4
  40483c:	d95b      	bls.n	4048f6 <_malloc_r+0x41e>
  40483e:	2a14      	cmp	r2, #20
  404840:	f200 80ae 	bhi.w	4049a0 <_malloc_r+0x4c8>
  404844:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404848:	00c9      	lsls	r1, r1, #3
  40484a:	325b      	adds	r2, #91	; 0x5b
  40484c:	eb07 0c01 	add.w	ip, r7, r1
  404850:	5879      	ldr	r1, [r7, r1]
  404852:	f1ac 0c08 	sub.w	ip, ip, #8
  404856:	458c      	cmp	ip, r1
  404858:	f000 8088 	beq.w	40496c <_malloc_r+0x494>
  40485c:	684a      	ldr	r2, [r1, #4]
  40485e:	f022 0203 	bic.w	r2, r2, #3
  404862:	4293      	cmp	r3, r2
  404864:	d273      	bcs.n	40494e <_malloc_r+0x476>
  404866:	6889      	ldr	r1, [r1, #8]
  404868:	458c      	cmp	ip, r1
  40486a:	d1f7      	bne.n	40485c <_malloc_r+0x384>
  40486c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404870:	687b      	ldr	r3, [r7, #4]
  404872:	60e2      	str	r2, [r4, #12]
  404874:	f8c4 c008 	str.w	ip, [r4, #8]
  404878:	6094      	str	r4, [r2, #8]
  40487a:	f8cc 400c 	str.w	r4, [ip, #12]
  40487e:	e68f      	b.n	4045a0 <_malloc_r+0xc8>
  404880:	19a1      	adds	r1, r4, r6
  404882:	f046 0c01 	orr.w	ip, r6, #1
  404886:	f042 0601 	orr.w	r6, r2, #1
  40488a:	f8c4 c004 	str.w	ip, [r4, #4]
  40488e:	4628      	mov	r0, r5
  404890:	6179      	str	r1, [r7, #20]
  404892:	6139      	str	r1, [r7, #16]
  404894:	f8c1 e00c 	str.w	lr, [r1, #12]
  404898:	f8c1 e008 	str.w	lr, [r1, #8]
  40489c:	604e      	str	r6, [r1, #4]
  40489e:	50e2      	str	r2, [r4, r3]
  4048a0:	f000 f9b8 	bl	404c14 <__malloc_unlock>
  4048a4:	3408      	adds	r4, #8
  4048a6:	e6dd      	b.n	404664 <_malloc_r+0x18c>
  4048a8:	687b      	ldr	r3, [r7, #4]
  4048aa:	e679      	b.n	4045a0 <_malloc_r+0xc8>
  4048ac:	f108 0801 	add.w	r8, r8, #1
  4048b0:	f018 0f03 	tst.w	r8, #3
  4048b4:	f10c 0c08 	add.w	ip, ip, #8
  4048b8:	f47f ae85 	bne.w	4045c6 <_malloc_r+0xee>
  4048bc:	e02d      	b.n	40491a <_malloc_r+0x442>
  4048be:	68dc      	ldr	r4, [r3, #12]
  4048c0:	42a3      	cmp	r3, r4
  4048c2:	bf08      	it	eq
  4048c4:	3002      	addeq	r0, #2
  4048c6:	f43f ae3e 	beq.w	404546 <_malloc_r+0x6e>
  4048ca:	e6bb      	b.n	404644 <_malloc_r+0x16c>
  4048cc:	4419      	add	r1, r3
  4048ce:	461c      	mov	r4, r3
  4048d0:	684a      	ldr	r2, [r1, #4]
  4048d2:	68db      	ldr	r3, [r3, #12]
  4048d4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4048d8:	f042 0201 	orr.w	r2, r2, #1
  4048dc:	604a      	str	r2, [r1, #4]
  4048de:	4628      	mov	r0, r5
  4048e0:	60f3      	str	r3, [r6, #12]
  4048e2:	609e      	str	r6, [r3, #8]
  4048e4:	f000 f996 	bl	404c14 <__malloc_unlock>
  4048e8:	e6bc      	b.n	404664 <_malloc_r+0x18c>
  4048ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4048ee:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4048f2:	00c3      	lsls	r3, r0, #3
  4048f4:	e612      	b.n	40451c <_malloc_r+0x44>
  4048f6:	099a      	lsrs	r2, r3, #6
  4048f8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4048fc:	00c9      	lsls	r1, r1, #3
  4048fe:	3238      	adds	r2, #56	; 0x38
  404900:	e7a4      	b.n	40484c <_malloc_r+0x374>
  404902:	42bc      	cmp	r4, r7
  404904:	d054      	beq.n	4049b0 <_malloc_r+0x4d8>
  404906:	68bc      	ldr	r4, [r7, #8]
  404908:	6862      	ldr	r2, [r4, #4]
  40490a:	f022 0203 	bic.w	r2, r2, #3
  40490e:	e75d      	b.n	4047cc <_malloc_r+0x2f4>
  404910:	f859 3908 	ldr.w	r3, [r9], #-8
  404914:	4599      	cmp	r9, r3
  404916:	f040 8086 	bne.w	404a26 <_malloc_r+0x54e>
  40491a:	f010 0f03 	tst.w	r0, #3
  40491e:	f100 30ff 	add.w	r0, r0, #4294967295
  404922:	d1f5      	bne.n	404910 <_malloc_r+0x438>
  404924:	687b      	ldr	r3, [r7, #4]
  404926:	ea23 0304 	bic.w	r3, r3, r4
  40492a:	607b      	str	r3, [r7, #4]
  40492c:	0064      	lsls	r4, r4, #1
  40492e:	429c      	cmp	r4, r3
  404930:	f63f aec7 	bhi.w	4046c2 <_malloc_r+0x1ea>
  404934:	2c00      	cmp	r4, #0
  404936:	f43f aec4 	beq.w	4046c2 <_malloc_r+0x1ea>
  40493a:	421c      	tst	r4, r3
  40493c:	4640      	mov	r0, r8
  40493e:	f47f ae3e 	bne.w	4045be <_malloc_r+0xe6>
  404942:	0064      	lsls	r4, r4, #1
  404944:	421c      	tst	r4, r3
  404946:	f100 0004 	add.w	r0, r0, #4
  40494a:	d0fa      	beq.n	404942 <_malloc_r+0x46a>
  40494c:	e637      	b.n	4045be <_malloc_r+0xe6>
  40494e:	468c      	mov	ip, r1
  404950:	e78c      	b.n	40486c <_malloc_r+0x394>
  404952:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404956:	d815      	bhi.n	404984 <_malloc_r+0x4ac>
  404958:	0bf3      	lsrs	r3, r6, #15
  40495a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40495e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404962:	00c3      	lsls	r3, r0, #3
  404964:	e5da      	b.n	40451c <_malloc_r+0x44>
  404966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40496a:	e6ed      	b.n	404748 <_malloc_r+0x270>
  40496c:	687b      	ldr	r3, [r7, #4]
  40496e:	1092      	asrs	r2, r2, #2
  404970:	2101      	movs	r1, #1
  404972:	fa01 f202 	lsl.w	r2, r1, r2
  404976:	4313      	orrs	r3, r2
  404978:	607b      	str	r3, [r7, #4]
  40497a:	4662      	mov	r2, ip
  40497c:	e779      	b.n	404872 <_malloc_r+0x39a>
  40497e:	2301      	movs	r3, #1
  404980:	6053      	str	r3, [r2, #4]
  404982:	e729      	b.n	4047d8 <_malloc_r+0x300>
  404984:	f240 5254 	movw	r2, #1364	; 0x554
  404988:	4293      	cmp	r3, r2
  40498a:	d822      	bhi.n	4049d2 <_malloc_r+0x4fa>
  40498c:	0cb3      	lsrs	r3, r6, #18
  40498e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404992:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404996:	00c3      	lsls	r3, r0, #3
  404998:	e5c0      	b.n	40451c <_malloc_r+0x44>
  40499a:	f103 0b10 	add.w	fp, r3, #16
  40499e:	e6ae      	b.n	4046fe <_malloc_r+0x226>
  4049a0:	2a54      	cmp	r2, #84	; 0x54
  4049a2:	d829      	bhi.n	4049f8 <_malloc_r+0x520>
  4049a4:	0b1a      	lsrs	r2, r3, #12
  4049a6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4049aa:	00c9      	lsls	r1, r1, #3
  4049ac:	326e      	adds	r2, #110	; 0x6e
  4049ae:	e74d      	b.n	40484c <_malloc_r+0x374>
  4049b0:	4b20      	ldr	r3, [pc, #128]	; (404a34 <_malloc_r+0x55c>)
  4049b2:	6819      	ldr	r1, [r3, #0]
  4049b4:	4459      	add	r1, fp
  4049b6:	6019      	str	r1, [r3, #0]
  4049b8:	e6b2      	b.n	404720 <_malloc_r+0x248>
  4049ba:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4049be:	2800      	cmp	r0, #0
  4049c0:	f47f aeae 	bne.w	404720 <_malloc_r+0x248>
  4049c4:	eb08 030b 	add.w	r3, r8, fp
  4049c8:	68ba      	ldr	r2, [r7, #8]
  4049ca:	f043 0301 	orr.w	r3, r3, #1
  4049ce:	6053      	str	r3, [r2, #4]
  4049d0:	e6ee      	b.n	4047b0 <_malloc_r+0x2d8>
  4049d2:	207f      	movs	r0, #127	; 0x7f
  4049d4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4049d8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4049dc:	e59e      	b.n	40451c <_malloc_r+0x44>
  4049de:	f104 0108 	add.w	r1, r4, #8
  4049e2:	4628      	mov	r0, r5
  4049e4:	9300      	str	r3, [sp, #0]
  4049e6:	f002 ffd3 	bl	407990 <_free_r>
  4049ea:	9b00      	ldr	r3, [sp, #0]
  4049ec:	6819      	ldr	r1, [r3, #0]
  4049ee:	e6df      	b.n	4047b0 <_malloc_r+0x2d8>
  4049f0:	2001      	movs	r0, #1
  4049f2:	f04f 0900 	mov.w	r9, #0
  4049f6:	e6bc      	b.n	404772 <_malloc_r+0x29a>
  4049f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4049fc:	d805      	bhi.n	404a0a <_malloc_r+0x532>
  4049fe:	0bda      	lsrs	r2, r3, #15
  404a00:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404a04:	00c9      	lsls	r1, r1, #3
  404a06:	3277      	adds	r2, #119	; 0x77
  404a08:	e720      	b.n	40484c <_malloc_r+0x374>
  404a0a:	f240 5154 	movw	r1, #1364	; 0x554
  404a0e:	428a      	cmp	r2, r1
  404a10:	d805      	bhi.n	404a1e <_malloc_r+0x546>
  404a12:	0c9a      	lsrs	r2, r3, #18
  404a14:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404a18:	00c9      	lsls	r1, r1, #3
  404a1a:	327c      	adds	r2, #124	; 0x7c
  404a1c:	e716      	b.n	40484c <_malloc_r+0x374>
  404a1e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404a22:	227e      	movs	r2, #126	; 0x7e
  404a24:	e712      	b.n	40484c <_malloc_r+0x374>
  404a26:	687b      	ldr	r3, [r7, #4]
  404a28:	e780      	b.n	40492c <_malloc_r+0x454>
  404a2a:	08f0      	lsrs	r0, r6, #3
  404a2c:	f106 0308 	add.w	r3, r6, #8
  404a30:	e600      	b.n	404634 <_malloc_r+0x15c>
  404a32:	bf00      	nop
  404a34:	20400da0 	.word	0x20400da0

00404a38 <memcpy>:
  404a38:	4684      	mov	ip, r0
  404a3a:	ea41 0300 	orr.w	r3, r1, r0
  404a3e:	f013 0303 	ands.w	r3, r3, #3
  404a42:	d16d      	bne.n	404b20 <memcpy+0xe8>
  404a44:	3a40      	subs	r2, #64	; 0x40
  404a46:	d341      	bcc.n	404acc <memcpy+0x94>
  404a48:	f851 3b04 	ldr.w	r3, [r1], #4
  404a4c:	f840 3b04 	str.w	r3, [r0], #4
  404a50:	f851 3b04 	ldr.w	r3, [r1], #4
  404a54:	f840 3b04 	str.w	r3, [r0], #4
  404a58:	f851 3b04 	ldr.w	r3, [r1], #4
  404a5c:	f840 3b04 	str.w	r3, [r0], #4
  404a60:	f851 3b04 	ldr.w	r3, [r1], #4
  404a64:	f840 3b04 	str.w	r3, [r0], #4
  404a68:	f851 3b04 	ldr.w	r3, [r1], #4
  404a6c:	f840 3b04 	str.w	r3, [r0], #4
  404a70:	f851 3b04 	ldr.w	r3, [r1], #4
  404a74:	f840 3b04 	str.w	r3, [r0], #4
  404a78:	f851 3b04 	ldr.w	r3, [r1], #4
  404a7c:	f840 3b04 	str.w	r3, [r0], #4
  404a80:	f851 3b04 	ldr.w	r3, [r1], #4
  404a84:	f840 3b04 	str.w	r3, [r0], #4
  404a88:	f851 3b04 	ldr.w	r3, [r1], #4
  404a8c:	f840 3b04 	str.w	r3, [r0], #4
  404a90:	f851 3b04 	ldr.w	r3, [r1], #4
  404a94:	f840 3b04 	str.w	r3, [r0], #4
  404a98:	f851 3b04 	ldr.w	r3, [r1], #4
  404a9c:	f840 3b04 	str.w	r3, [r0], #4
  404aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404aa4:	f840 3b04 	str.w	r3, [r0], #4
  404aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aac:	f840 3b04 	str.w	r3, [r0], #4
  404ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ab4:	f840 3b04 	str.w	r3, [r0], #4
  404ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  404abc:	f840 3b04 	str.w	r3, [r0], #4
  404ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ac4:	f840 3b04 	str.w	r3, [r0], #4
  404ac8:	3a40      	subs	r2, #64	; 0x40
  404aca:	d2bd      	bcs.n	404a48 <memcpy+0x10>
  404acc:	3230      	adds	r2, #48	; 0x30
  404ace:	d311      	bcc.n	404af4 <memcpy+0xbc>
  404ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ad4:	f840 3b04 	str.w	r3, [r0], #4
  404ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  404adc:	f840 3b04 	str.w	r3, [r0], #4
  404ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ae4:	f840 3b04 	str.w	r3, [r0], #4
  404ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  404aec:	f840 3b04 	str.w	r3, [r0], #4
  404af0:	3a10      	subs	r2, #16
  404af2:	d2ed      	bcs.n	404ad0 <memcpy+0x98>
  404af4:	320c      	adds	r2, #12
  404af6:	d305      	bcc.n	404b04 <memcpy+0xcc>
  404af8:	f851 3b04 	ldr.w	r3, [r1], #4
  404afc:	f840 3b04 	str.w	r3, [r0], #4
  404b00:	3a04      	subs	r2, #4
  404b02:	d2f9      	bcs.n	404af8 <memcpy+0xc0>
  404b04:	3204      	adds	r2, #4
  404b06:	d008      	beq.n	404b1a <memcpy+0xe2>
  404b08:	07d2      	lsls	r2, r2, #31
  404b0a:	bf1c      	itt	ne
  404b0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b10:	f800 3b01 	strbne.w	r3, [r0], #1
  404b14:	d301      	bcc.n	404b1a <memcpy+0xe2>
  404b16:	880b      	ldrh	r3, [r1, #0]
  404b18:	8003      	strh	r3, [r0, #0]
  404b1a:	4660      	mov	r0, ip
  404b1c:	4770      	bx	lr
  404b1e:	bf00      	nop
  404b20:	2a08      	cmp	r2, #8
  404b22:	d313      	bcc.n	404b4c <memcpy+0x114>
  404b24:	078b      	lsls	r3, r1, #30
  404b26:	d08d      	beq.n	404a44 <memcpy+0xc>
  404b28:	f010 0303 	ands.w	r3, r0, #3
  404b2c:	d08a      	beq.n	404a44 <memcpy+0xc>
  404b2e:	f1c3 0304 	rsb	r3, r3, #4
  404b32:	1ad2      	subs	r2, r2, r3
  404b34:	07db      	lsls	r3, r3, #31
  404b36:	bf1c      	itt	ne
  404b38:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404b3c:	f800 3b01 	strbne.w	r3, [r0], #1
  404b40:	d380      	bcc.n	404a44 <memcpy+0xc>
  404b42:	f831 3b02 	ldrh.w	r3, [r1], #2
  404b46:	f820 3b02 	strh.w	r3, [r0], #2
  404b4a:	e77b      	b.n	404a44 <memcpy+0xc>
  404b4c:	3a04      	subs	r2, #4
  404b4e:	d3d9      	bcc.n	404b04 <memcpy+0xcc>
  404b50:	3a01      	subs	r2, #1
  404b52:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b56:	f800 3b01 	strb.w	r3, [r0], #1
  404b5a:	d2f9      	bcs.n	404b50 <memcpy+0x118>
  404b5c:	780b      	ldrb	r3, [r1, #0]
  404b5e:	7003      	strb	r3, [r0, #0]
  404b60:	784b      	ldrb	r3, [r1, #1]
  404b62:	7043      	strb	r3, [r0, #1]
  404b64:	788b      	ldrb	r3, [r1, #2]
  404b66:	7083      	strb	r3, [r0, #2]
  404b68:	4660      	mov	r0, ip
  404b6a:	4770      	bx	lr

00404b6c <memset>:
  404b6c:	b470      	push	{r4, r5, r6}
  404b6e:	0786      	lsls	r6, r0, #30
  404b70:	d046      	beq.n	404c00 <memset+0x94>
  404b72:	1e54      	subs	r4, r2, #1
  404b74:	2a00      	cmp	r2, #0
  404b76:	d041      	beq.n	404bfc <memset+0x90>
  404b78:	b2ca      	uxtb	r2, r1
  404b7a:	4603      	mov	r3, r0
  404b7c:	e002      	b.n	404b84 <memset+0x18>
  404b7e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404b82:	d33b      	bcc.n	404bfc <memset+0x90>
  404b84:	f803 2b01 	strb.w	r2, [r3], #1
  404b88:	079d      	lsls	r5, r3, #30
  404b8a:	d1f8      	bne.n	404b7e <memset+0x12>
  404b8c:	2c03      	cmp	r4, #3
  404b8e:	d92e      	bls.n	404bee <memset+0x82>
  404b90:	b2cd      	uxtb	r5, r1
  404b92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404b96:	2c0f      	cmp	r4, #15
  404b98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404b9c:	d919      	bls.n	404bd2 <memset+0x66>
  404b9e:	f103 0210 	add.w	r2, r3, #16
  404ba2:	4626      	mov	r6, r4
  404ba4:	3e10      	subs	r6, #16
  404ba6:	2e0f      	cmp	r6, #15
  404ba8:	f842 5c10 	str.w	r5, [r2, #-16]
  404bac:	f842 5c0c 	str.w	r5, [r2, #-12]
  404bb0:	f842 5c08 	str.w	r5, [r2, #-8]
  404bb4:	f842 5c04 	str.w	r5, [r2, #-4]
  404bb8:	f102 0210 	add.w	r2, r2, #16
  404bbc:	d8f2      	bhi.n	404ba4 <memset+0x38>
  404bbe:	f1a4 0210 	sub.w	r2, r4, #16
  404bc2:	f022 020f 	bic.w	r2, r2, #15
  404bc6:	f004 040f 	and.w	r4, r4, #15
  404bca:	3210      	adds	r2, #16
  404bcc:	2c03      	cmp	r4, #3
  404bce:	4413      	add	r3, r2
  404bd0:	d90d      	bls.n	404bee <memset+0x82>
  404bd2:	461e      	mov	r6, r3
  404bd4:	4622      	mov	r2, r4
  404bd6:	3a04      	subs	r2, #4
  404bd8:	2a03      	cmp	r2, #3
  404bda:	f846 5b04 	str.w	r5, [r6], #4
  404bde:	d8fa      	bhi.n	404bd6 <memset+0x6a>
  404be0:	1f22      	subs	r2, r4, #4
  404be2:	f022 0203 	bic.w	r2, r2, #3
  404be6:	3204      	adds	r2, #4
  404be8:	4413      	add	r3, r2
  404bea:	f004 0403 	and.w	r4, r4, #3
  404bee:	b12c      	cbz	r4, 404bfc <memset+0x90>
  404bf0:	b2c9      	uxtb	r1, r1
  404bf2:	441c      	add	r4, r3
  404bf4:	f803 1b01 	strb.w	r1, [r3], #1
  404bf8:	429c      	cmp	r4, r3
  404bfa:	d1fb      	bne.n	404bf4 <memset+0x88>
  404bfc:	bc70      	pop	{r4, r5, r6}
  404bfe:	4770      	bx	lr
  404c00:	4614      	mov	r4, r2
  404c02:	4603      	mov	r3, r0
  404c04:	e7c2      	b.n	404b8c <memset+0x20>
  404c06:	bf00      	nop

00404c08 <__malloc_lock>:
  404c08:	4801      	ldr	r0, [pc, #4]	; (404c10 <__malloc_lock+0x8>)
  404c0a:	f003 b95b 	b.w	407ec4 <__retarget_lock_acquire_recursive>
  404c0e:	bf00      	nop
  404c10:	20400e3c 	.word	0x20400e3c

00404c14 <__malloc_unlock>:
  404c14:	4801      	ldr	r0, [pc, #4]	; (404c1c <__malloc_unlock+0x8>)
  404c16:	f003 b957 	b.w	407ec8 <__retarget_lock_release_recursive>
  404c1a:	bf00      	nop
  404c1c:	20400e3c 	.word	0x20400e3c

00404c20 <printf>:
  404c20:	b40f      	push	{r0, r1, r2, r3}
  404c22:	b500      	push	{lr}
  404c24:	4907      	ldr	r1, [pc, #28]	; (404c44 <printf+0x24>)
  404c26:	b083      	sub	sp, #12
  404c28:	ab04      	add	r3, sp, #16
  404c2a:	6808      	ldr	r0, [r1, #0]
  404c2c:	f853 2b04 	ldr.w	r2, [r3], #4
  404c30:	6881      	ldr	r1, [r0, #8]
  404c32:	9301      	str	r3, [sp, #4]
  404c34:	f000 f9f2 	bl	40501c <_vfprintf_r>
  404c38:	b003      	add	sp, #12
  404c3a:	f85d eb04 	ldr.w	lr, [sp], #4
  404c3e:	b004      	add	sp, #16
  404c40:	4770      	bx	lr
  404c42:	bf00      	nop
  404c44:	20400014 	.word	0x20400014

00404c48 <_puts_r>:
  404c48:	b5f0      	push	{r4, r5, r6, r7, lr}
  404c4a:	4605      	mov	r5, r0
  404c4c:	b089      	sub	sp, #36	; 0x24
  404c4e:	4608      	mov	r0, r1
  404c50:	460c      	mov	r4, r1
  404c52:	f000 f975 	bl	404f40 <strlen>
  404c56:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404c58:	4f21      	ldr	r7, [pc, #132]	; (404ce0 <_puts_r+0x98>)
  404c5a:	9404      	str	r4, [sp, #16]
  404c5c:	2601      	movs	r6, #1
  404c5e:	1c44      	adds	r4, r0, #1
  404c60:	a904      	add	r1, sp, #16
  404c62:	2202      	movs	r2, #2
  404c64:	9403      	str	r4, [sp, #12]
  404c66:	9005      	str	r0, [sp, #20]
  404c68:	68ac      	ldr	r4, [r5, #8]
  404c6a:	9706      	str	r7, [sp, #24]
  404c6c:	9607      	str	r6, [sp, #28]
  404c6e:	9101      	str	r1, [sp, #4]
  404c70:	9202      	str	r2, [sp, #8]
  404c72:	b353      	cbz	r3, 404cca <_puts_r+0x82>
  404c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c76:	f013 0f01 	tst.w	r3, #1
  404c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c7e:	b29a      	uxth	r2, r3
  404c80:	d101      	bne.n	404c86 <_puts_r+0x3e>
  404c82:	0590      	lsls	r0, r2, #22
  404c84:	d525      	bpl.n	404cd2 <_puts_r+0x8a>
  404c86:	0491      	lsls	r1, r2, #18
  404c88:	d406      	bmi.n	404c98 <_puts_r+0x50>
  404c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404c94:	81a3      	strh	r3, [r4, #12]
  404c96:	6662      	str	r2, [r4, #100]	; 0x64
  404c98:	4628      	mov	r0, r5
  404c9a:	aa01      	add	r2, sp, #4
  404c9c:	4621      	mov	r1, r4
  404c9e:	f002 ff5d 	bl	407b5c <__sfvwrite_r>
  404ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404ca4:	2800      	cmp	r0, #0
  404ca6:	bf0c      	ite	eq
  404ca8:	250a      	moveq	r5, #10
  404caa:	f04f 35ff 	movne.w	r5, #4294967295
  404cae:	07da      	lsls	r2, r3, #31
  404cb0:	d402      	bmi.n	404cb8 <_puts_r+0x70>
  404cb2:	89a3      	ldrh	r3, [r4, #12]
  404cb4:	059b      	lsls	r3, r3, #22
  404cb6:	d502      	bpl.n	404cbe <_puts_r+0x76>
  404cb8:	4628      	mov	r0, r5
  404cba:	b009      	add	sp, #36	; 0x24
  404cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404cc0:	f003 f902 	bl	407ec8 <__retarget_lock_release_recursive>
  404cc4:	4628      	mov	r0, r5
  404cc6:	b009      	add	sp, #36	; 0x24
  404cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404cca:	4628      	mov	r0, r5
  404ccc:	f002 fdbe 	bl	40784c <__sinit>
  404cd0:	e7d0      	b.n	404c74 <_puts_r+0x2c>
  404cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404cd4:	f003 f8f6 	bl	407ec4 <__retarget_lock_acquire_recursive>
  404cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404cdc:	b29a      	uxth	r2, r3
  404cde:	e7d2      	b.n	404c86 <_puts_r+0x3e>
  404ce0:	00409224 	.word	0x00409224

00404ce4 <puts>:
  404ce4:	4b02      	ldr	r3, [pc, #8]	; (404cf0 <puts+0xc>)
  404ce6:	4601      	mov	r1, r0
  404ce8:	6818      	ldr	r0, [r3, #0]
  404cea:	f7ff bfad 	b.w	404c48 <_puts_r>
  404cee:	bf00      	nop
  404cf0:	20400014 	.word	0x20400014

00404cf4 <srand>:
  404cf4:	4b03      	ldr	r3, [pc, #12]	; (404d04 <srand+0x10>)
  404cf6:	681b      	ldr	r3, [r3, #0]
  404cf8:	2200      	movs	r2, #0
  404cfa:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  404cfe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  404d02:	4770      	bx	lr
  404d04:	20400014 	.word	0x20400014

00404d08 <rand>:
  404d08:	b410      	push	{r4}
  404d0a:	4b0c      	ldr	r3, [pc, #48]	; (404d3c <rand+0x34>)
  404d0c:	480c      	ldr	r0, [pc, #48]	; (404d40 <rand+0x38>)
  404d0e:	6819      	ldr	r1, [r3, #0]
  404d10:	4c0c      	ldr	r4, [pc, #48]	; (404d44 <rand+0x3c>)
  404d12:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  404d16:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  404d1a:	fb00 f002 	mul.w	r0, r0, r2
  404d1e:	fb04 0003 	mla	r0, r4, r3, r0
  404d22:	fba2 2304 	umull	r2, r3, r2, r4
  404d26:	4403      	add	r3, r0
  404d28:	3201      	adds	r2, #1
  404d2a:	f143 0300 	adc.w	r3, r3, #0
  404d2e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  404d32:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  404d36:	bc10      	pop	{r4}
  404d38:	4770      	bx	lr
  404d3a:	bf00      	nop
  404d3c:	20400014 	.word	0x20400014
  404d40:	5851f42d 	.word	0x5851f42d
  404d44:	4c957f2d 	.word	0x4c957f2d

00404d48 <_sbrk_r>:
  404d48:	b538      	push	{r3, r4, r5, lr}
  404d4a:	4c07      	ldr	r4, [pc, #28]	; (404d68 <_sbrk_r+0x20>)
  404d4c:	2300      	movs	r3, #0
  404d4e:	4605      	mov	r5, r0
  404d50:	4608      	mov	r0, r1
  404d52:	6023      	str	r3, [r4, #0]
  404d54:	f7fc fb4c 	bl	4013f0 <_sbrk>
  404d58:	1c43      	adds	r3, r0, #1
  404d5a:	d000      	beq.n	404d5e <_sbrk_r+0x16>
  404d5c:	bd38      	pop	{r3, r4, r5, pc}
  404d5e:	6823      	ldr	r3, [r4, #0]
  404d60:	2b00      	cmp	r3, #0
  404d62:	d0fb      	beq.n	404d5c <_sbrk_r+0x14>
  404d64:	602b      	str	r3, [r5, #0]
  404d66:	bd38      	pop	{r3, r4, r5, pc}
  404d68:	20400e50 	.word	0x20400e50

00404d6c <setbuf>:
  404d6c:	2900      	cmp	r1, #0
  404d6e:	bf0c      	ite	eq
  404d70:	2202      	moveq	r2, #2
  404d72:	2200      	movne	r2, #0
  404d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404d78:	f000 b800 	b.w	404d7c <setvbuf>

00404d7c <setvbuf>:
  404d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404d80:	4c61      	ldr	r4, [pc, #388]	; (404f08 <setvbuf+0x18c>)
  404d82:	6825      	ldr	r5, [r4, #0]
  404d84:	b083      	sub	sp, #12
  404d86:	4604      	mov	r4, r0
  404d88:	460f      	mov	r7, r1
  404d8a:	4690      	mov	r8, r2
  404d8c:	461e      	mov	r6, r3
  404d8e:	b115      	cbz	r5, 404d96 <setvbuf+0x1a>
  404d90:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404d92:	2b00      	cmp	r3, #0
  404d94:	d064      	beq.n	404e60 <setvbuf+0xe4>
  404d96:	f1b8 0f02 	cmp.w	r8, #2
  404d9a:	d006      	beq.n	404daa <setvbuf+0x2e>
  404d9c:	f1b8 0f01 	cmp.w	r8, #1
  404da0:	f200 809f 	bhi.w	404ee2 <setvbuf+0x166>
  404da4:	2e00      	cmp	r6, #0
  404da6:	f2c0 809c 	blt.w	404ee2 <setvbuf+0x166>
  404daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404dac:	07d8      	lsls	r0, r3, #31
  404dae:	d534      	bpl.n	404e1a <setvbuf+0x9e>
  404db0:	4621      	mov	r1, r4
  404db2:	4628      	mov	r0, r5
  404db4:	f002 fcf2 	bl	40779c <_fflush_r>
  404db8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404dba:	b141      	cbz	r1, 404dce <setvbuf+0x52>
  404dbc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404dc0:	4299      	cmp	r1, r3
  404dc2:	d002      	beq.n	404dca <setvbuf+0x4e>
  404dc4:	4628      	mov	r0, r5
  404dc6:	f002 fde3 	bl	407990 <_free_r>
  404dca:	2300      	movs	r3, #0
  404dcc:	6323      	str	r3, [r4, #48]	; 0x30
  404dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dd2:	2200      	movs	r2, #0
  404dd4:	61a2      	str	r2, [r4, #24]
  404dd6:	6062      	str	r2, [r4, #4]
  404dd8:	061a      	lsls	r2, r3, #24
  404dda:	d43a      	bmi.n	404e52 <setvbuf+0xd6>
  404ddc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404de0:	f023 0303 	bic.w	r3, r3, #3
  404de4:	f1b8 0f02 	cmp.w	r8, #2
  404de8:	81a3      	strh	r3, [r4, #12]
  404dea:	d01d      	beq.n	404e28 <setvbuf+0xac>
  404dec:	ab01      	add	r3, sp, #4
  404dee:	466a      	mov	r2, sp
  404df0:	4621      	mov	r1, r4
  404df2:	4628      	mov	r0, r5
  404df4:	f003 f86a 	bl	407ecc <__swhatbuf_r>
  404df8:	89a3      	ldrh	r3, [r4, #12]
  404dfa:	4318      	orrs	r0, r3
  404dfc:	81a0      	strh	r0, [r4, #12]
  404dfe:	2e00      	cmp	r6, #0
  404e00:	d132      	bne.n	404e68 <setvbuf+0xec>
  404e02:	9e00      	ldr	r6, [sp, #0]
  404e04:	4630      	mov	r0, r6
  404e06:	f7ff fb57 	bl	4044b8 <malloc>
  404e0a:	4607      	mov	r7, r0
  404e0c:	2800      	cmp	r0, #0
  404e0e:	d06b      	beq.n	404ee8 <setvbuf+0x16c>
  404e10:	89a3      	ldrh	r3, [r4, #12]
  404e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e16:	81a3      	strh	r3, [r4, #12]
  404e18:	e028      	b.n	404e6c <setvbuf+0xf0>
  404e1a:	89a3      	ldrh	r3, [r4, #12]
  404e1c:	0599      	lsls	r1, r3, #22
  404e1e:	d4c7      	bmi.n	404db0 <setvbuf+0x34>
  404e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404e22:	f003 f84f 	bl	407ec4 <__retarget_lock_acquire_recursive>
  404e26:	e7c3      	b.n	404db0 <setvbuf+0x34>
  404e28:	2500      	movs	r5, #0
  404e2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404e2c:	2600      	movs	r6, #0
  404e2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404e32:	f043 0302 	orr.w	r3, r3, #2
  404e36:	2001      	movs	r0, #1
  404e38:	60a6      	str	r6, [r4, #8]
  404e3a:	07ce      	lsls	r6, r1, #31
  404e3c:	81a3      	strh	r3, [r4, #12]
  404e3e:	6022      	str	r2, [r4, #0]
  404e40:	6122      	str	r2, [r4, #16]
  404e42:	6160      	str	r0, [r4, #20]
  404e44:	d401      	bmi.n	404e4a <setvbuf+0xce>
  404e46:	0598      	lsls	r0, r3, #22
  404e48:	d53e      	bpl.n	404ec8 <setvbuf+0x14c>
  404e4a:	4628      	mov	r0, r5
  404e4c:	b003      	add	sp, #12
  404e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404e52:	6921      	ldr	r1, [r4, #16]
  404e54:	4628      	mov	r0, r5
  404e56:	f002 fd9b 	bl	407990 <_free_r>
  404e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e5e:	e7bd      	b.n	404ddc <setvbuf+0x60>
  404e60:	4628      	mov	r0, r5
  404e62:	f002 fcf3 	bl	40784c <__sinit>
  404e66:	e796      	b.n	404d96 <setvbuf+0x1a>
  404e68:	2f00      	cmp	r7, #0
  404e6a:	d0cb      	beq.n	404e04 <setvbuf+0x88>
  404e6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404e6e:	2b00      	cmp	r3, #0
  404e70:	d033      	beq.n	404eda <setvbuf+0x15e>
  404e72:	9b00      	ldr	r3, [sp, #0]
  404e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404e78:	6027      	str	r7, [r4, #0]
  404e7a:	429e      	cmp	r6, r3
  404e7c:	bf1c      	itt	ne
  404e7e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404e82:	81a2      	strhne	r2, [r4, #12]
  404e84:	f1b8 0f01 	cmp.w	r8, #1
  404e88:	bf04      	itt	eq
  404e8a:	f042 0201 	orreq.w	r2, r2, #1
  404e8e:	81a2      	strheq	r2, [r4, #12]
  404e90:	b292      	uxth	r2, r2
  404e92:	f012 0308 	ands.w	r3, r2, #8
  404e96:	6127      	str	r7, [r4, #16]
  404e98:	6166      	str	r6, [r4, #20]
  404e9a:	d00e      	beq.n	404eba <setvbuf+0x13e>
  404e9c:	07d1      	lsls	r1, r2, #31
  404e9e:	d51a      	bpl.n	404ed6 <setvbuf+0x15a>
  404ea0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404ea2:	4276      	negs	r6, r6
  404ea4:	2300      	movs	r3, #0
  404ea6:	f015 0501 	ands.w	r5, r5, #1
  404eaa:	61a6      	str	r6, [r4, #24]
  404eac:	60a3      	str	r3, [r4, #8]
  404eae:	d009      	beq.n	404ec4 <setvbuf+0x148>
  404eb0:	2500      	movs	r5, #0
  404eb2:	4628      	mov	r0, r5
  404eb4:	b003      	add	sp, #12
  404eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404eba:	60a3      	str	r3, [r4, #8]
  404ebc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404ebe:	f015 0501 	ands.w	r5, r5, #1
  404ec2:	d1f5      	bne.n	404eb0 <setvbuf+0x134>
  404ec4:	0593      	lsls	r3, r2, #22
  404ec6:	d4c0      	bmi.n	404e4a <setvbuf+0xce>
  404ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404eca:	f002 fffd 	bl	407ec8 <__retarget_lock_release_recursive>
  404ece:	4628      	mov	r0, r5
  404ed0:	b003      	add	sp, #12
  404ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404ed6:	60a6      	str	r6, [r4, #8]
  404ed8:	e7f0      	b.n	404ebc <setvbuf+0x140>
  404eda:	4628      	mov	r0, r5
  404edc:	f002 fcb6 	bl	40784c <__sinit>
  404ee0:	e7c7      	b.n	404e72 <setvbuf+0xf6>
  404ee2:	f04f 35ff 	mov.w	r5, #4294967295
  404ee6:	e7b0      	b.n	404e4a <setvbuf+0xce>
  404ee8:	f8dd 9000 	ldr.w	r9, [sp]
  404eec:	45b1      	cmp	r9, r6
  404eee:	d004      	beq.n	404efa <setvbuf+0x17e>
  404ef0:	4648      	mov	r0, r9
  404ef2:	f7ff fae1 	bl	4044b8 <malloc>
  404ef6:	4607      	mov	r7, r0
  404ef8:	b920      	cbnz	r0, 404f04 <setvbuf+0x188>
  404efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404efe:	f04f 35ff 	mov.w	r5, #4294967295
  404f02:	e792      	b.n	404e2a <setvbuf+0xae>
  404f04:	464e      	mov	r6, r9
  404f06:	e783      	b.n	404e10 <setvbuf+0x94>
  404f08:	20400014 	.word	0x20400014
	...

00404f40 <strlen>:
  404f40:	f890 f000 	pld	[r0]
  404f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404f48:	f020 0107 	bic.w	r1, r0, #7
  404f4c:	f06f 0c00 	mvn.w	ip, #0
  404f50:	f010 0407 	ands.w	r4, r0, #7
  404f54:	f891 f020 	pld	[r1, #32]
  404f58:	f040 8049 	bne.w	404fee <strlen+0xae>
  404f5c:	f04f 0400 	mov.w	r4, #0
  404f60:	f06f 0007 	mvn.w	r0, #7
  404f64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404f68:	f891 f040 	pld	[r1, #64]	; 0x40
  404f6c:	f100 0008 	add.w	r0, r0, #8
  404f70:	fa82 f24c 	uadd8	r2, r2, ip
  404f74:	faa4 f28c 	sel	r2, r4, ip
  404f78:	fa83 f34c 	uadd8	r3, r3, ip
  404f7c:	faa2 f38c 	sel	r3, r2, ip
  404f80:	bb4b      	cbnz	r3, 404fd6 <strlen+0x96>
  404f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404f86:	fa82 f24c 	uadd8	r2, r2, ip
  404f8a:	f100 0008 	add.w	r0, r0, #8
  404f8e:	faa4 f28c 	sel	r2, r4, ip
  404f92:	fa83 f34c 	uadd8	r3, r3, ip
  404f96:	faa2 f38c 	sel	r3, r2, ip
  404f9a:	b9e3      	cbnz	r3, 404fd6 <strlen+0x96>
  404f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404fa0:	fa82 f24c 	uadd8	r2, r2, ip
  404fa4:	f100 0008 	add.w	r0, r0, #8
  404fa8:	faa4 f28c 	sel	r2, r4, ip
  404fac:	fa83 f34c 	uadd8	r3, r3, ip
  404fb0:	faa2 f38c 	sel	r3, r2, ip
  404fb4:	b97b      	cbnz	r3, 404fd6 <strlen+0x96>
  404fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404fba:	f101 0120 	add.w	r1, r1, #32
  404fbe:	fa82 f24c 	uadd8	r2, r2, ip
  404fc2:	f100 0008 	add.w	r0, r0, #8
  404fc6:	faa4 f28c 	sel	r2, r4, ip
  404fca:	fa83 f34c 	uadd8	r3, r3, ip
  404fce:	faa2 f38c 	sel	r3, r2, ip
  404fd2:	2b00      	cmp	r3, #0
  404fd4:	d0c6      	beq.n	404f64 <strlen+0x24>
  404fd6:	2a00      	cmp	r2, #0
  404fd8:	bf04      	itt	eq
  404fda:	3004      	addeq	r0, #4
  404fdc:	461a      	moveq	r2, r3
  404fde:	ba12      	rev	r2, r2
  404fe0:	fab2 f282 	clz	r2, r2
  404fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404fec:	4770      	bx	lr
  404fee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404ff2:	f004 0503 	and.w	r5, r4, #3
  404ff6:	f1c4 0000 	rsb	r0, r4, #0
  404ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404ffe:	f014 0f04 	tst.w	r4, #4
  405002:	f891 f040 	pld	[r1, #64]	; 0x40
  405006:	fa0c f505 	lsl.w	r5, ip, r5
  40500a:	ea62 0205 	orn	r2, r2, r5
  40500e:	bf1c      	itt	ne
  405010:	ea63 0305 	ornne	r3, r3, r5
  405014:	4662      	movne	r2, ip
  405016:	f04f 0400 	mov.w	r4, #0
  40501a:	e7a9      	b.n	404f70 <strlen+0x30>

0040501c <_vfprintf_r>:
  40501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405020:	b0c1      	sub	sp, #260	; 0x104
  405022:	461d      	mov	r5, r3
  405024:	468a      	mov	sl, r1
  405026:	4691      	mov	r9, r2
  405028:	4604      	mov	r4, r0
  40502a:	9008      	str	r0, [sp, #32]
  40502c:	f002 ff38 	bl	407ea0 <_localeconv_r>
  405030:	6803      	ldr	r3, [r0, #0]
  405032:	9315      	str	r3, [sp, #84]	; 0x54
  405034:	4618      	mov	r0, r3
  405036:	f7ff ff83 	bl	404f40 <strlen>
  40503a:	950e      	str	r5, [sp, #56]	; 0x38
  40503c:	9014      	str	r0, [sp, #80]	; 0x50
  40503e:	b11c      	cbz	r4, 405048 <_vfprintf_r+0x2c>
  405040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405042:	2b00      	cmp	r3, #0
  405044:	f000 825f 	beq.w	405506 <_vfprintf_r+0x4ea>
  405048:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40504c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405050:	f013 0f01 	tst.w	r3, #1
  405054:	b293      	uxth	r3, r2
  405056:	d102      	bne.n	40505e <_vfprintf_r+0x42>
  405058:	0599      	lsls	r1, r3, #22
  40505a:	f140 8275 	bpl.w	405548 <_vfprintf_r+0x52c>
  40505e:	049f      	lsls	r7, r3, #18
  405060:	d40a      	bmi.n	405078 <_vfprintf_r+0x5c>
  405062:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  405066:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40506a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40506e:	f8aa 300c 	strh.w	r3, [sl, #12]
  405072:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  405076:	b29b      	uxth	r3, r3
  405078:	071e      	lsls	r6, r3, #28
  40507a:	f140 8223 	bpl.w	4054c4 <_vfprintf_r+0x4a8>
  40507e:	f8da 2010 	ldr.w	r2, [sl, #16]
  405082:	2a00      	cmp	r2, #0
  405084:	f000 821e 	beq.w	4054c4 <_vfprintf_r+0x4a8>
  405088:	f003 021a 	and.w	r2, r3, #26
  40508c:	2a0a      	cmp	r2, #10
  40508e:	f000 823e 	beq.w	40550e <_vfprintf_r+0x4f2>
  405092:	2300      	movs	r3, #0
  405094:	4618      	mov	r0, r3
  405096:	9311      	str	r3, [sp, #68]	; 0x44
  405098:	9313      	str	r3, [sp, #76]	; 0x4c
  40509a:	9312      	str	r3, [sp, #72]	; 0x48
  40509c:	9325      	str	r3, [sp, #148]	; 0x94
  40509e:	9324      	str	r3, [sp, #144]	; 0x90
  4050a0:	9318      	str	r3, [sp, #96]	; 0x60
  4050a2:	9319      	str	r3, [sp, #100]	; 0x64
  4050a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4050a6:	ab30      	add	r3, sp, #192	; 0xc0
  4050a8:	9323      	str	r3, [sp, #140]	; 0x8c
  4050aa:	4698      	mov	r8, r3
  4050ac:	9016      	str	r0, [sp, #88]	; 0x58
  4050ae:	9017      	str	r0, [sp, #92]	; 0x5c
  4050b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4050b4:	f899 3000 	ldrb.w	r3, [r9]
  4050b8:	464c      	mov	r4, r9
  4050ba:	b1eb      	cbz	r3, 4050f8 <_vfprintf_r+0xdc>
  4050bc:	2b25      	cmp	r3, #37	; 0x25
  4050be:	d102      	bne.n	4050c6 <_vfprintf_r+0xaa>
  4050c0:	e01a      	b.n	4050f8 <_vfprintf_r+0xdc>
  4050c2:	2b25      	cmp	r3, #37	; 0x25
  4050c4:	d003      	beq.n	4050ce <_vfprintf_r+0xb2>
  4050c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4050ca:	2b00      	cmp	r3, #0
  4050cc:	d1f9      	bne.n	4050c2 <_vfprintf_r+0xa6>
  4050ce:	eba4 0509 	sub.w	r5, r4, r9
  4050d2:	b18d      	cbz	r5, 4050f8 <_vfprintf_r+0xdc>
  4050d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4050d8:	f8c8 9000 	str.w	r9, [r8]
  4050dc:	3301      	adds	r3, #1
  4050de:	442a      	add	r2, r5
  4050e0:	2b07      	cmp	r3, #7
  4050e2:	f8c8 5004 	str.w	r5, [r8, #4]
  4050e6:	9225      	str	r2, [sp, #148]	; 0x94
  4050e8:	9324      	str	r3, [sp, #144]	; 0x90
  4050ea:	f300 8201 	bgt.w	4054f0 <_vfprintf_r+0x4d4>
  4050ee:	f108 0808 	add.w	r8, r8, #8
  4050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050f4:	442b      	add	r3, r5
  4050f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4050f8:	7823      	ldrb	r3, [r4, #0]
  4050fa:	2b00      	cmp	r3, #0
  4050fc:	f000 83f0 	beq.w	4058e0 <_vfprintf_r+0x8c4>
  405100:	2300      	movs	r3, #0
  405102:	461a      	mov	r2, r3
  405104:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405108:	4619      	mov	r1, r3
  40510a:	930c      	str	r3, [sp, #48]	; 0x30
  40510c:	469b      	mov	fp, r3
  40510e:	7866      	ldrb	r6, [r4, #1]
  405110:	f04f 33ff 	mov.w	r3, #4294967295
  405114:	f104 0901 	add.w	r9, r4, #1
  405118:	9309      	str	r3, [sp, #36]	; 0x24
  40511a:	f109 0901 	add.w	r9, r9, #1
  40511e:	f1a6 0320 	sub.w	r3, r6, #32
  405122:	2b58      	cmp	r3, #88	; 0x58
  405124:	f200 83bf 	bhi.w	4058a6 <_vfprintf_r+0x88a>
  405128:	e8df f013 	tbh	[pc, r3, lsl #1]
  40512c:	03bd02e0 	.word	0x03bd02e0
  405130:	034f03bd 	.word	0x034f03bd
  405134:	03bd03bd 	.word	0x03bd03bd
  405138:	03bd03bd 	.word	0x03bd03bd
  40513c:	03bd03bd 	.word	0x03bd03bd
  405140:	03080354 	.word	0x03080354
  405144:	021a03bd 	.word	0x021a03bd
  405148:	03bd02e8 	.word	0x03bd02e8
  40514c:	033a0303 	.word	0x033a0303
  405150:	033a033a 	.word	0x033a033a
  405154:	033a033a 	.word	0x033a033a
  405158:	033a033a 	.word	0x033a033a
  40515c:	033a033a 	.word	0x033a033a
  405160:	03bd03bd 	.word	0x03bd03bd
  405164:	03bd03bd 	.word	0x03bd03bd
  405168:	03bd03bd 	.word	0x03bd03bd
  40516c:	03bd03bd 	.word	0x03bd03bd
  405170:	03bd03bd 	.word	0x03bd03bd
  405174:	03620349 	.word	0x03620349
  405178:	036203bd 	.word	0x036203bd
  40517c:	03bd03bd 	.word	0x03bd03bd
  405180:	03bd03bd 	.word	0x03bd03bd
  405184:	03bd03a2 	.word	0x03bd03a2
  405188:	006f03bd 	.word	0x006f03bd
  40518c:	03bd03bd 	.word	0x03bd03bd
  405190:	03bd03bd 	.word	0x03bd03bd
  405194:	005903bd 	.word	0x005903bd
  405198:	03bd03bd 	.word	0x03bd03bd
  40519c:	03bd031e 	.word	0x03bd031e
  4051a0:	03bd03bd 	.word	0x03bd03bd
  4051a4:	03bd03bd 	.word	0x03bd03bd
  4051a8:	03bd03bd 	.word	0x03bd03bd
  4051ac:	03bd03bd 	.word	0x03bd03bd
  4051b0:	032403bd 	.word	0x032403bd
  4051b4:	03620273 	.word	0x03620273
  4051b8:	03620362 	.word	0x03620362
  4051bc:	027302b7 	.word	0x027302b7
  4051c0:	03bd03bd 	.word	0x03bd03bd
  4051c4:	03bd02bc 	.word	0x03bd02bc
  4051c8:	007102c9 	.word	0x007102c9
  4051cc:	0247030d 	.word	0x0247030d
  4051d0:	025203bd 	.word	0x025203bd
  4051d4:	005b03bd 	.word	0x005b03bd
  4051d8:	03bd03bd 	.word	0x03bd03bd
  4051dc:	021f      	.short	0x021f
  4051de:	f04b 0b10 	orr.w	fp, fp, #16
  4051e2:	f01b 0f20 	tst.w	fp, #32
  4051e6:	f040 8353 	bne.w	405890 <_vfprintf_r+0x874>
  4051ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4051ec:	f01b 0f10 	tst.w	fp, #16
  4051f0:	4613      	mov	r3, r2
  4051f2:	f040 85b4 	bne.w	405d5e <_vfprintf_r+0xd42>
  4051f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4051fa:	f000 85b0 	beq.w	405d5e <_vfprintf_r+0xd42>
  4051fe:	8814      	ldrh	r4, [r2, #0]
  405200:	3204      	adds	r2, #4
  405202:	2500      	movs	r5, #0
  405204:	2301      	movs	r3, #1
  405206:	920e      	str	r2, [sp, #56]	; 0x38
  405208:	e014      	b.n	405234 <_vfprintf_r+0x218>
  40520a:	f04b 0b10 	orr.w	fp, fp, #16
  40520e:	f01b 0320 	ands.w	r3, fp, #32
  405212:	f040 8332 	bne.w	40587a <_vfprintf_r+0x85e>
  405216:	f01b 0210 	ands.w	r2, fp, #16
  40521a:	f040 8589 	bne.w	405d30 <_vfprintf_r+0xd14>
  40521e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  405222:	f000 8585 	beq.w	405d30 <_vfprintf_r+0xd14>
  405226:	990e      	ldr	r1, [sp, #56]	; 0x38
  405228:	4613      	mov	r3, r2
  40522a:	460a      	mov	r2, r1
  40522c:	3204      	adds	r2, #4
  40522e:	880c      	ldrh	r4, [r1, #0]
  405230:	920e      	str	r2, [sp, #56]	; 0x38
  405232:	2500      	movs	r5, #0
  405234:	f04f 0a00 	mov.w	sl, #0
  405238:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40523c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40523e:	1c4a      	adds	r2, r1, #1
  405240:	f000 820b 	beq.w	40565a <_vfprintf_r+0x63e>
  405244:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405248:	9206      	str	r2, [sp, #24]
  40524a:	ea54 0205 	orrs.w	r2, r4, r5
  40524e:	f040 820a 	bne.w	405666 <_vfprintf_r+0x64a>
  405252:	2900      	cmp	r1, #0
  405254:	f040 846f 	bne.w	405b36 <_vfprintf_r+0xb1a>
  405258:	2b00      	cmp	r3, #0
  40525a:	f040 852d 	bne.w	405cb8 <_vfprintf_r+0xc9c>
  40525e:	f01b 0301 	ands.w	r3, fp, #1
  405262:	930d      	str	r3, [sp, #52]	; 0x34
  405264:	f000 8668 	beq.w	405f38 <_vfprintf_r+0xf1c>
  405268:	af40      	add	r7, sp, #256	; 0x100
  40526a:	2330      	movs	r3, #48	; 0x30
  40526c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  405270:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405274:	4293      	cmp	r3, r2
  405276:	bfb8      	it	lt
  405278:	4613      	movlt	r3, r2
  40527a:	9307      	str	r3, [sp, #28]
  40527c:	2300      	movs	r3, #0
  40527e:	9310      	str	r3, [sp, #64]	; 0x40
  405280:	f1ba 0f00 	cmp.w	sl, #0
  405284:	d002      	beq.n	40528c <_vfprintf_r+0x270>
  405286:	9b07      	ldr	r3, [sp, #28]
  405288:	3301      	adds	r3, #1
  40528a:	9307      	str	r3, [sp, #28]
  40528c:	9b06      	ldr	r3, [sp, #24]
  40528e:	f013 0302 	ands.w	r3, r3, #2
  405292:	930f      	str	r3, [sp, #60]	; 0x3c
  405294:	d002      	beq.n	40529c <_vfprintf_r+0x280>
  405296:	9b07      	ldr	r3, [sp, #28]
  405298:	3302      	adds	r3, #2
  40529a:	9307      	str	r3, [sp, #28]
  40529c:	9b06      	ldr	r3, [sp, #24]
  40529e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4052a2:	f040 831b 	bne.w	4058dc <_vfprintf_r+0x8c0>
  4052a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4052a8:	9a07      	ldr	r2, [sp, #28]
  4052aa:	eba3 0b02 	sub.w	fp, r3, r2
  4052ae:	f1bb 0f00 	cmp.w	fp, #0
  4052b2:	f340 8313 	ble.w	4058dc <_vfprintf_r+0x8c0>
  4052b6:	f1bb 0f10 	cmp.w	fp, #16
  4052ba:	9925      	ldr	r1, [sp, #148]	; 0x94
  4052bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4052be:	dd28      	ble.n	405312 <_vfprintf_r+0x2f6>
  4052c0:	4643      	mov	r3, r8
  4052c2:	2410      	movs	r4, #16
  4052c4:	46a8      	mov	r8, r5
  4052c6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4052ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4052cc:	e006      	b.n	4052dc <_vfprintf_r+0x2c0>
  4052ce:	f1ab 0b10 	sub.w	fp, fp, #16
  4052d2:	f1bb 0f10 	cmp.w	fp, #16
  4052d6:	f103 0308 	add.w	r3, r3, #8
  4052da:	dd18      	ble.n	40530e <_vfprintf_r+0x2f2>
  4052dc:	3201      	adds	r2, #1
  4052de:	48b9      	ldr	r0, [pc, #740]	; (4055c4 <_vfprintf_r+0x5a8>)
  4052e0:	9224      	str	r2, [sp, #144]	; 0x90
  4052e2:	3110      	adds	r1, #16
  4052e4:	2a07      	cmp	r2, #7
  4052e6:	9125      	str	r1, [sp, #148]	; 0x94
  4052e8:	e883 0011 	stmia.w	r3, {r0, r4}
  4052ec:	ddef      	ble.n	4052ce <_vfprintf_r+0x2b2>
  4052ee:	aa23      	add	r2, sp, #140	; 0x8c
  4052f0:	4629      	mov	r1, r5
  4052f2:	4650      	mov	r0, sl
  4052f4:	f003 fc3c 	bl	408b70 <__sprint_r>
  4052f8:	2800      	cmp	r0, #0
  4052fa:	f040 836a 	bne.w	4059d2 <_vfprintf_r+0x9b6>
  4052fe:	f1ab 0b10 	sub.w	fp, fp, #16
  405302:	f1bb 0f10 	cmp.w	fp, #16
  405306:	9925      	ldr	r1, [sp, #148]	; 0x94
  405308:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40530a:	ab30      	add	r3, sp, #192	; 0xc0
  40530c:	dce6      	bgt.n	4052dc <_vfprintf_r+0x2c0>
  40530e:	4645      	mov	r5, r8
  405310:	4698      	mov	r8, r3
  405312:	3201      	adds	r2, #1
  405314:	4bab      	ldr	r3, [pc, #684]	; (4055c4 <_vfprintf_r+0x5a8>)
  405316:	9224      	str	r2, [sp, #144]	; 0x90
  405318:	eb0b 0401 	add.w	r4, fp, r1
  40531c:	2a07      	cmp	r2, #7
  40531e:	9425      	str	r4, [sp, #148]	; 0x94
  405320:	e888 0808 	stmia.w	r8, {r3, fp}
  405324:	f300 84cd 	bgt.w	405cc2 <_vfprintf_r+0xca6>
  405328:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40532c:	f108 0808 	add.w	r8, r8, #8
  405330:	f1ba 0f00 	cmp.w	sl, #0
  405334:	d00e      	beq.n	405354 <_vfprintf_r+0x338>
  405336:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405338:	3301      	adds	r3, #1
  40533a:	3401      	adds	r4, #1
  40533c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  405340:	2201      	movs	r2, #1
  405342:	2b07      	cmp	r3, #7
  405344:	9425      	str	r4, [sp, #148]	; 0x94
  405346:	9324      	str	r3, [sp, #144]	; 0x90
  405348:	e888 0006 	stmia.w	r8, {r1, r2}
  40534c:	f300 840a 	bgt.w	405b64 <_vfprintf_r+0xb48>
  405350:	f108 0808 	add.w	r8, r8, #8
  405354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405356:	b16b      	cbz	r3, 405374 <_vfprintf_r+0x358>
  405358:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40535a:	3301      	adds	r3, #1
  40535c:	3402      	adds	r4, #2
  40535e:	a91c      	add	r1, sp, #112	; 0x70
  405360:	2202      	movs	r2, #2
  405362:	2b07      	cmp	r3, #7
  405364:	9425      	str	r4, [sp, #148]	; 0x94
  405366:	9324      	str	r3, [sp, #144]	; 0x90
  405368:	e888 0006 	stmia.w	r8, {r1, r2}
  40536c:	f300 8406 	bgt.w	405b7c <_vfprintf_r+0xb60>
  405370:	f108 0808 	add.w	r8, r8, #8
  405374:	2d80      	cmp	r5, #128	; 0x80
  405376:	f000 832e 	beq.w	4059d6 <_vfprintf_r+0x9ba>
  40537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40537c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40537e:	eba3 0a02 	sub.w	sl, r3, r2
  405382:	f1ba 0f00 	cmp.w	sl, #0
  405386:	dd3b      	ble.n	405400 <_vfprintf_r+0x3e4>
  405388:	f1ba 0f10 	cmp.w	sl, #16
  40538c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40538e:	4d8e      	ldr	r5, [pc, #568]	; (4055c8 <_vfprintf_r+0x5ac>)
  405390:	dd2b      	ble.n	4053ea <_vfprintf_r+0x3ce>
  405392:	4642      	mov	r2, r8
  405394:	4621      	mov	r1, r4
  405396:	46b0      	mov	r8, r6
  405398:	f04f 0b10 	mov.w	fp, #16
  40539c:	462e      	mov	r6, r5
  40539e:	9c08      	ldr	r4, [sp, #32]
  4053a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4053a2:	e006      	b.n	4053b2 <_vfprintf_r+0x396>
  4053a4:	f1aa 0a10 	sub.w	sl, sl, #16
  4053a8:	f1ba 0f10 	cmp.w	sl, #16
  4053ac:	f102 0208 	add.w	r2, r2, #8
  4053b0:	dd17      	ble.n	4053e2 <_vfprintf_r+0x3c6>
  4053b2:	3301      	adds	r3, #1
  4053b4:	3110      	adds	r1, #16
  4053b6:	2b07      	cmp	r3, #7
  4053b8:	9125      	str	r1, [sp, #148]	; 0x94
  4053ba:	9324      	str	r3, [sp, #144]	; 0x90
  4053bc:	e882 0840 	stmia.w	r2, {r6, fp}
  4053c0:	ddf0      	ble.n	4053a4 <_vfprintf_r+0x388>
  4053c2:	aa23      	add	r2, sp, #140	; 0x8c
  4053c4:	4629      	mov	r1, r5
  4053c6:	4620      	mov	r0, r4
  4053c8:	f003 fbd2 	bl	408b70 <__sprint_r>
  4053cc:	2800      	cmp	r0, #0
  4053ce:	f040 8300 	bne.w	4059d2 <_vfprintf_r+0x9b6>
  4053d2:	f1aa 0a10 	sub.w	sl, sl, #16
  4053d6:	f1ba 0f10 	cmp.w	sl, #16
  4053da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4053dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053de:	aa30      	add	r2, sp, #192	; 0xc0
  4053e0:	dce7      	bgt.n	4053b2 <_vfprintf_r+0x396>
  4053e2:	4635      	mov	r5, r6
  4053e4:	460c      	mov	r4, r1
  4053e6:	4646      	mov	r6, r8
  4053e8:	4690      	mov	r8, r2
  4053ea:	3301      	adds	r3, #1
  4053ec:	4454      	add	r4, sl
  4053ee:	2b07      	cmp	r3, #7
  4053f0:	9425      	str	r4, [sp, #148]	; 0x94
  4053f2:	9324      	str	r3, [sp, #144]	; 0x90
  4053f4:	e888 0420 	stmia.w	r8, {r5, sl}
  4053f8:	f300 83a9 	bgt.w	405b4e <_vfprintf_r+0xb32>
  4053fc:	f108 0808 	add.w	r8, r8, #8
  405400:	9b06      	ldr	r3, [sp, #24]
  405402:	05db      	lsls	r3, r3, #23
  405404:	f100 8285 	bmi.w	405912 <_vfprintf_r+0x8f6>
  405408:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40540a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40540c:	f8c8 7000 	str.w	r7, [r8]
  405410:	3301      	adds	r3, #1
  405412:	440c      	add	r4, r1
  405414:	2b07      	cmp	r3, #7
  405416:	9425      	str	r4, [sp, #148]	; 0x94
  405418:	f8c8 1004 	str.w	r1, [r8, #4]
  40541c:	9324      	str	r3, [sp, #144]	; 0x90
  40541e:	f300 8375 	bgt.w	405b0c <_vfprintf_r+0xaf0>
  405422:	f108 0808 	add.w	r8, r8, #8
  405426:	9b06      	ldr	r3, [sp, #24]
  405428:	0759      	lsls	r1, r3, #29
  40542a:	d53b      	bpl.n	4054a4 <_vfprintf_r+0x488>
  40542c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40542e:	9a07      	ldr	r2, [sp, #28]
  405430:	1a9d      	subs	r5, r3, r2
  405432:	2d00      	cmp	r5, #0
  405434:	dd36      	ble.n	4054a4 <_vfprintf_r+0x488>
  405436:	2d10      	cmp	r5, #16
  405438:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40543a:	dd21      	ble.n	405480 <_vfprintf_r+0x464>
  40543c:	2610      	movs	r6, #16
  40543e:	9f08      	ldr	r7, [sp, #32]
  405440:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  405444:	e004      	b.n	405450 <_vfprintf_r+0x434>
  405446:	3d10      	subs	r5, #16
  405448:	2d10      	cmp	r5, #16
  40544a:	f108 0808 	add.w	r8, r8, #8
  40544e:	dd17      	ble.n	405480 <_vfprintf_r+0x464>
  405450:	3301      	adds	r3, #1
  405452:	4a5c      	ldr	r2, [pc, #368]	; (4055c4 <_vfprintf_r+0x5a8>)
  405454:	9324      	str	r3, [sp, #144]	; 0x90
  405456:	3410      	adds	r4, #16
  405458:	2b07      	cmp	r3, #7
  40545a:	9425      	str	r4, [sp, #148]	; 0x94
  40545c:	e888 0044 	stmia.w	r8, {r2, r6}
  405460:	ddf1      	ble.n	405446 <_vfprintf_r+0x42a>
  405462:	aa23      	add	r2, sp, #140	; 0x8c
  405464:	4651      	mov	r1, sl
  405466:	4638      	mov	r0, r7
  405468:	f003 fb82 	bl	408b70 <__sprint_r>
  40546c:	2800      	cmp	r0, #0
  40546e:	f040 823f 	bne.w	4058f0 <_vfprintf_r+0x8d4>
  405472:	3d10      	subs	r5, #16
  405474:	2d10      	cmp	r5, #16
  405476:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405478:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40547a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40547e:	dce7      	bgt.n	405450 <_vfprintf_r+0x434>
  405480:	3301      	adds	r3, #1
  405482:	4a50      	ldr	r2, [pc, #320]	; (4055c4 <_vfprintf_r+0x5a8>)
  405484:	9324      	str	r3, [sp, #144]	; 0x90
  405486:	442c      	add	r4, r5
  405488:	2b07      	cmp	r3, #7
  40548a:	9425      	str	r4, [sp, #148]	; 0x94
  40548c:	e888 0024 	stmia.w	r8, {r2, r5}
  405490:	dd08      	ble.n	4054a4 <_vfprintf_r+0x488>
  405492:	aa23      	add	r2, sp, #140	; 0x8c
  405494:	990a      	ldr	r1, [sp, #40]	; 0x28
  405496:	9808      	ldr	r0, [sp, #32]
  405498:	f003 fb6a 	bl	408b70 <__sprint_r>
  40549c:	2800      	cmp	r0, #0
  40549e:	f040 8347 	bne.w	405b30 <_vfprintf_r+0xb14>
  4054a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4054a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4054a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054a8:	9907      	ldr	r1, [sp, #28]
  4054aa:	428a      	cmp	r2, r1
  4054ac:	bfac      	ite	ge
  4054ae:	189b      	addge	r3, r3, r2
  4054b0:	185b      	addlt	r3, r3, r1
  4054b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4054b4:	2c00      	cmp	r4, #0
  4054b6:	f040 8333 	bne.w	405b20 <_vfprintf_r+0xb04>
  4054ba:	2300      	movs	r3, #0
  4054bc:	9324      	str	r3, [sp, #144]	; 0x90
  4054be:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4054c2:	e5f7      	b.n	4050b4 <_vfprintf_r+0x98>
  4054c4:	4651      	mov	r1, sl
  4054c6:	9808      	ldr	r0, [sp, #32]
  4054c8:	f001 f896 	bl	4065f8 <__swsetup_r>
  4054cc:	2800      	cmp	r0, #0
  4054ce:	d038      	beq.n	405542 <_vfprintf_r+0x526>
  4054d0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4054d4:	07dd      	lsls	r5, r3, #31
  4054d6:	d404      	bmi.n	4054e2 <_vfprintf_r+0x4c6>
  4054d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4054dc:	059c      	lsls	r4, r3, #22
  4054de:	f140 85ca 	bpl.w	406076 <_vfprintf_r+0x105a>
  4054e2:	f04f 33ff 	mov.w	r3, #4294967295
  4054e6:	930b      	str	r3, [sp, #44]	; 0x2c
  4054e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4054ea:	b041      	add	sp, #260	; 0x104
  4054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054f0:	aa23      	add	r2, sp, #140	; 0x8c
  4054f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4054f4:	9808      	ldr	r0, [sp, #32]
  4054f6:	f003 fb3b 	bl	408b70 <__sprint_r>
  4054fa:	2800      	cmp	r0, #0
  4054fc:	f040 8318 	bne.w	405b30 <_vfprintf_r+0xb14>
  405500:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405504:	e5f5      	b.n	4050f2 <_vfprintf_r+0xd6>
  405506:	9808      	ldr	r0, [sp, #32]
  405508:	f002 f9a0 	bl	40784c <__sinit>
  40550c:	e59c      	b.n	405048 <_vfprintf_r+0x2c>
  40550e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  405512:	2a00      	cmp	r2, #0
  405514:	f6ff adbd 	blt.w	405092 <_vfprintf_r+0x76>
  405518:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40551c:	07d0      	lsls	r0, r2, #31
  40551e:	d405      	bmi.n	40552c <_vfprintf_r+0x510>
  405520:	0599      	lsls	r1, r3, #22
  405522:	d403      	bmi.n	40552c <_vfprintf_r+0x510>
  405524:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405528:	f002 fcce 	bl	407ec8 <__retarget_lock_release_recursive>
  40552c:	462b      	mov	r3, r5
  40552e:	464a      	mov	r2, r9
  405530:	4651      	mov	r1, sl
  405532:	9808      	ldr	r0, [sp, #32]
  405534:	f001 f81e 	bl	406574 <__sbprintf>
  405538:	900b      	str	r0, [sp, #44]	; 0x2c
  40553a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40553c:	b041      	add	sp, #260	; 0x104
  40553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405542:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405546:	e59f      	b.n	405088 <_vfprintf_r+0x6c>
  405548:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40554c:	f002 fcba 	bl	407ec4 <__retarget_lock_acquire_recursive>
  405550:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405554:	b293      	uxth	r3, r2
  405556:	e582      	b.n	40505e <_vfprintf_r+0x42>
  405558:	980c      	ldr	r0, [sp, #48]	; 0x30
  40555a:	930e      	str	r3, [sp, #56]	; 0x38
  40555c:	4240      	negs	r0, r0
  40555e:	900c      	str	r0, [sp, #48]	; 0x30
  405560:	f04b 0b04 	orr.w	fp, fp, #4
  405564:	f899 6000 	ldrb.w	r6, [r9]
  405568:	e5d7      	b.n	40511a <_vfprintf_r+0xfe>
  40556a:	2a00      	cmp	r2, #0
  40556c:	f040 87df 	bne.w	40652e <_vfprintf_r+0x1512>
  405570:	4b16      	ldr	r3, [pc, #88]	; (4055cc <_vfprintf_r+0x5b0>)
  405572:	9318      	str	r3, [sp, #96]	; 0x60
  405574:	f01b 0f20 	tst.w	fp, #32
  405578:	f040 84b9 	bne.w	405eee <_vfprintf_r+0xed2>
  40557c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40557e:	f01b 0f10 	tst.w	fp, #16
  405582:	4613      	mov	r3, r2
  405584:	f040 83dc 	bne.w	405d40 <_vfprintf_r+0xd24>
  405588:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40558c:	f000 83d8 	beq.w	405d40 <_vfprintf_r+0xd24>
  405590:	3304      	adds	r3, #4
  405592:	8814      	ldrh	r4, [r2, #0]
  405594:	930e      	str	r3, [sp, #56]	; 0x38
  405596:	2500      	movs	r5, #0
  405598:	f01b 0f01 	tst.w	fp, #1
  40559c:	f000 8322 	beq.w	405be4 <_vfprintf_r+0xbc8>
  4055a0:	ea54 0305 	orrs.w	r3, r4, r5
  4055a4:	f000 831e 	beq.w	405be4 <_vfprintf_r+0xbc8>
  4055a8:	2330      	movs	r3, #48	; 0x30
  4055aa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4055ae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4055b2:	f04b 0b02 	orr.w	fp, fp, #2
  4055b6:	2302      	movs	r3, #2
  4055b8:	e63c      	b.n	405234 <_vfprintf_r+0x218>
  4055ba:	f04b 0b20 	orr.w	fp, fp, #32
  4055be:	f899 6000 	ldrb.w	r6, [r9]
  4055c2:	e5aa      	b.n	40511a <_vfprintf_r+0xfe>
  4055c4:	00409294 	.word	0x00409294
  4055c8:	004092a4 	.word	0x004092a4
  4055cc:	00409274 	.word	0x00409274
  4055d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4055d2:	6817      	ldr	r7, [r2, #0]
  4055d4:	2400      	movs	r4, #0
  4055d6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4055da:	1d15      	adds	r5, r2, #4
  4055dc:	2f00      	cmp	r7, #0
  4055de:	f000 864e 	beq.w	40627e <_vfprintf_r+0x1262>
  4055e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4055e4:	1c53      	adds	r3, r2, #1
  4055e6:	f000 85cc 	beq.w	406182 <_vfprintf_r+0x1166>
  4055ea:	4621      	mov	r1, r4
  4055ec:	4638      	mov	r0, r7
  4055ee:	f002 fce7 	bl	407fc0 <memchr>
  4055f2:	2800      	cmp	r0, #0
  4055f4:	f000 8697 	beq.w	406326 <_vfprintf_r+0x130a>
  4055f8:	1bc3      	subs	r3, r0, r7
  4055fa:	930d      	str	r3, [sp, #52]	; 0x34
  4055fc:	9409      	str	r4, [sp, #36]	; 0x24
  4055fe:	950e      	str	r5, [sp, #56]	; 0x38
  405600:	f8cd b018 	str.w	fp, [sp, #24]
  405604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405608:	9307      	str	r3, [sp, #28]
  40560a:	9410      	str	r4, [sp, #64]	; 0x40
  40560c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405610:	e636      	b.n	405280 <_vfprintf_r+0x264>
  405612:	2a00      	cmp	r2, #0
  405614:	f040 8796 	bne.w	406544 <_vfprintf_r+0x1528>
  405618:	f01b 0f20 	tst.w	fp, #32
  40561c:	f040 845a 	bne.w	405ed4 <_vfprintf_r+0xeb8>
  405620:	f01b 0f10 	tst.w	fp, #16
  405624:	f040 83a2 	bne.w	405d6c <_vfprintf_r+0xd50>
  405628:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40562c:	f000 839e 	beq.w	405d6c <_vfprintf_r+0xd50>
  405630:	990e      	ldr	r1, [sp, #56]	; 0x38
  405632:	f9b1 4000 	ldrsh.w	r4, [r1]
  405636:	3104      	adds	r1, #4
  405638:	17e5      	asrs	r5, r4, #31
  40563a:	4622      	mov	r2, r4
  40563c:	462b      	mov	r3, r5
  40563e:	910e      	str	r1, [sp, #56]	; 0x38
  405640:	2a00      	cmp	r2, #0
  405642:	f173 0300 	sbcs.w	r3, r3, #0
  405646:	f2c0 8487 	blt.w	405f58 <_vfprintf_r+0xf3c>
  40564a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40564c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405650:	1c4a      	adds	r2, r1, #1
  405652:	f04f 0301 	mov.w	r3, #1
  405656:	f47f adf5 	bne.w	405244 <_vfprintf_r+0x228>
  40565a:	ea54 0205 	orrs.w	r2, r4, r5
  40565e:	f000 826c 	beq.w	405b3a <_vfprintf_r+0xb1e>
  405662:	f8cd b018 	str.w	fp, [sp, #24]
  405666:	2b01      	cmp	r3, #1
  405668:	f000 8308 	beq.w	405c7c <_vfprintf_r+0xc60>
  40566c:	2b02      	cmp	r3, #2
  40566e:	f040 8295 	bne.w	405b9c <_vfprintf_r+0xb80>
  405672:	9818      	ldr	r0, [sp, #96]	; 0x60
  405674:	af30      	add	r7, sp, #192	; 0xc0
  405676:	0923      	lsrs	r3, r4, #4
  405678:	f004 010f 	and.w	r1, r4, #15
  40567c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405680:	092a      	lsrs	r2, r5, #4
  405682:	461c      	mov	r4, r3
  405684:	4615      	mov	r5, r2
  405686:	5c43      	ldrb	r3, [r0, r1]
  405688:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40568c:	ea54 0305 	orrs.w	r3, r4, r5
  405690:	d1f1      	bne.n	405676 <_vfprintf_r+0x65a>
  405692:	ab30      	add	r3, sp, #192	; 0xc0
  405694:	1bdb      	subs	r3, r3, r7
  405696:	930d      	str	r3, [sp, #52]	; 0x34
  405698:	e5ea      	b.n	405270 <_vfprintf_r+0x254>
  40569a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40569e:	f899 6000 	ldrb.w	r6, [r9]
  4056a2:	e53a      	b.n	40511a <_vfprintf_r+0xfe>
  4056a4:	f899 6000 	ldrb.w	r6, [r9]
  4056a8:	2e6c      	cmp	r6, #108	; 0x6c
  4056aa:	bf03      	ittte	eq
  4056ac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4056b0:	f04b 0b20 	orreq.w	fp, fp, #32
  4056b4:	f109 0901 	addeq.w	r9, r9, #1
  4056b8:	f04b 0b10 	orrne.w	fp, fp, #16
  4056bc:	e52d      	b.n	40511a <_vfprintf_r+0xfe>
  4056be:	2a00      	cmp	r2, #0
  4056c0:	f040 874c 	bne.w	40655c <_vfprintf_r+0x1540>
  4056c4:	f01b 0f20 	tst.w	fp, #32
  4056c8:	f040 853f 	bne.w	40614a <_vfprintf_r+0x112e>
  4056cc:	f01b 0f10 	tst.w	fp, #16
  4056d0:	f040 80fc 	bne.w	4058cc <_vfprintf_r+0x8b0>
  4056d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4056d8:	f000 80f8 	beq.w	4058cc <_vfprintf_r+0x8b0>
  4056dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4056de:	6813      	ldr	r3, [r2, #0]
  4056e0:	3204      	adds	r2, #4
  4056e2:	920e      	str	r2, [sp, #56]	; 0x38
  4056e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4056e8:	801a      	strh	r2, [r3, #0]
  4056ea:	e4e3      	b.n	4050b4 <_vfprintf_r+0x98>
  4056ec:	f899 6000 	ldrb.w	r6, [r9]
  4056f0:	2900      	cmp	r1, #0
  4056f2:	f47f ad12 	bne.w	40511a <_vfprintf_r+0xfe>
  4056f6:	2201      	movs	r2, #1
  4056f8:	2120      	movs	r1, #32
  4056fa:	e50e      	b.n	40511a <_vfprintf_r+0xfe>
  4056fc:	f899 6000 	ldrb.w	r6, [r9]
  405700:	2e2a      	cmp	r6, #42	; 0x2a
  405702:	f109 0001 	add.w	r0, r9, #1
  405706:	f000 86f1 	beq.w	4064ec <_vfprintf_r+0x14d0>
  40570a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40570e:	2b09      	cmp	r3, #9
  405710:	4681      	mov	r9, r0
  405712:	bf98      	it	ls
  405714:	2000      	movls	r0, #0
  405716:	f200 863d 	bhi.w	406394 <_vfprintf_r+0x1378>
  40571a:	f819 6b01 	ldrb.w	r6, [r9], #1
  40571e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405722:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  405726:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40572a:	2b09      	cmp	r3, #9
  40572c:	d9f5      	bls.n	40571a <_vfprintf_r+0x6fe>
  40572e:	9009      	str	r0, [sp, #36]	; 0x24
  405730:	e4f5      	b.n	40511e <_vfprintf_r+0x102>
  405732:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  405736:	f899 6000 	ldrb.w	r6, [r9]
  40573a:	e4ee      	b.n	40511a <_vfprintf_r+0xfe>
  40573c:	f899 6000 	ldrb.w	r6, [r9]
  405740:	2201      	movs	r2, #1
  405742:	212b      	movs	r1, #43	; 0x2b
  405744:	e4e9      	b.n	40511a <_vfprintf_r+0xfe>
  405746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405748:	4bae      	ldr	r3, [pc, #696]	; (405a04 <_vfprintf_r+0x9e8>)
  40574a:	6814      	ldr	r4, [r2, #0]
  40574c:	9318      	str	r3, [sp, #96]	; 0x60
  40574e:	2678      	movs	r6, #120	; 0x78
  405750:	2330      	movs	r3, #48	; 0x30
  405752:	3204      	adds	r2, #4
  405754:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  405758:	f04b 0b02 	orr.w	fp, fp, #2
  40575c:	920e      	str	r2, [sp, #56]	; 0x38
  40575e:	2500      	movs	r5, #0
  405760:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  405764:	2302      	movs	r3, #2
  405766:	e565      	b.n	405234 <_vfprintf_r+0x218>
  405768:	2a00      	cmp	r2, #0
  40576a:	f040 86e4 	bne.w	406536 <_vfprintf_r+0x151a>
  40576e:	4ba6      	ldr	r3, [pc, #664]	; (405a08 <_vfprintf_r+0x9ec>)
  405770:	9318      	str	r3, [sp, #96]	; 0x60
  405772:	e6ff      	b.n	405574 <_vfprintf_r+0x558>
  405774:	990e      	ldr	r1, [sp, #56]	; 0x38
  405776:	f8cd b018 	str.w	fp, [sp, #24]
  40577a:	680a      	ldr	r2, [r1, #0]
  40577c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405780:	2300      	movs	r3, #0
  405782:	460a      	mov	r2, r1
  405784:	469a      	mov	sl, r3
  405786:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40578a:	3204      	adds	r2, #4
  40578c:	2301      	movs	r3, #1
  40578e:	9307      	str	r3, [sp, #28]
  405790:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  405794:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  405798:	920e      	str	r2, [sp, #56]	; 0x38
  40579a:	930d      	str	r3, [sp, #52]	; 0x34
  40579c:	af26      	add	r7, sp, #152	; 0x98
  40579e:	e575      	b.n	40528c <_vfprintf_r+0x270>
  4057a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4057a4:	2000      	movs	r0, #0
  4057a6:	f819 6b01 	ldrb.w	r6, [r9], #1
  4057aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4057ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4057b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4057b6:	2b09      	cmp	r3, #9
  4057b8:	d9f5      	bls.n	4057a6 <_vfprintf_r+0x78a>
  4057ba:	900c      	str	r0, [sp, #48]	; 0x30
  4057bc:	e4af      	b.n	40511e <_vfprintf_r+0x102>
  4057be:	2a00      	cmp	r2, #0
  4057c0:	f040 86c8 	bne.w	406554 <_vfprintf_r+0x1538>
  4057c4:	f04b 0b10 	orr.w	fp, fp, #16
  4057c8:	e726      	b.n	405618 <_vfprintf_r+0x5fc>
  4057ca:	f04b 0b01 	orr.w	fp, fp, #1
  4057ce:	f899 6000 	ldrb.w	r6, [r9]
  4057d2:	e4a2      	b.n	40511a <_vfprintf_r+0xfe>
  4057d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4057d6:	6823      	ldr	r3, [r4, #0]
  4057d8:	930c      	str	r3, [sp, #48]	; 0x30
  4057da:	4618      	mov	r0, r3
  4057dc:	2800      	cmp	r0, #0
  4057de:	4623      	mov	r3, r4
  4057e0:	f103 0304 	add.w	r3, r3, #4
  4057e4:	f6ff aeb8 	blt.w	405558 <_vfprintf_r+0x53c>
  4057e8:	930e      	str	r3, [sp, #56]	; 0x38
  4057ea:	f899 6000 	ldrb.w	r6, [r9]
  4057ee:	e494      	b.n	40511a <_vfprintf_r+0xfe>
  4057f0:	2a00      	cmp	r2, #0
  4057f2:	f040 86b7 	bne.w	406564 <_vfprintf_r+0x1548>
  4057f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4057f8:	3507      	adds	r5, #7
  4057fa:	f025 0307 	bic.w	r3, r5, #7
  4057fe:	f103 0208 	add.w	r2, r3, #8
  405802:	920e      	str	r2, [sp, #56]	; 0x38
  405804:	681a      	ldr	r2, [r3, #0]
  405806:	9213      	str	r2, [sp, #76]	; 0x4c
  405808:	685b      	ldr	r3, [r3, #4]
  40580a:	9312      	str	r3, [sp, #72]	; 0x48
  40580c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40580e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  405810:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405814:	4628      	mov	r0, r5
  405816:	4621      	mov	r1, r4
  405818:	f04f 32ff 	mov.w	r2, #4294967295
  40581c:	4b7b      	ldr	r3, [pc, #492]	; (405a0c <_vfprintf_r+0x9f0>)
  40581e:	f003 fc57 	bl	4090d0 <__aeabi_dcmpun>
  405822:	2800      	cmp	r0, #0
  405824:	f040 83a2 	bne.w	405f6c <_vfprintf_r+0xf50>
  405828:	4628      	mov	r0, r5
  40582a:	4621      	mov	r1, r4
  40582c:	f04f 32ff 	mov.w	r2, #4294967295
  405830:	4b76      	ldr	r3, [pc, #472]	; (405a0c <_vfprintf_r+0x9f0>)
  405832:	f7fe fc73 	bl	40411c <__aeabi_dcmple>
  405836:	2800      	cmp	r0, #0
  405838:	f040 8398 	bne.w	405f6c <_vfprintf_r+0xf50>
  40583c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40583e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405842:	9912      	ldr	r1, [sp, #72]	; 0x48
  405844:	f7fe fc60 	bl	404108 <__aeabi_dcmplt>
  405848:	2800      	cmp	r0, #0
  40584a:	f040 8435 	bne.w	4060b8 <_vfprintf_r+0x109c>
  40584e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405852:	4f6f      	ldr	r7, [pc, #444]	; (405a10 <_vfprintf_r+0x9f4>)
  405854:	4b6f      	ldr	r3, [pc, #444]	; (405a14 <_vfprintf_r+0x9f8>)
  405856:	2203      	movs	r2, #3
  405858:	2100      	movs	r1, #0
  40585a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40585e:	9207      	str	r2, [sp, #28]
  405860:	9109      	str	r1, [sp, #36]	; 0x24
  405862:	9006      	str	r0, [sp, #24]
  405864:	2e47      	cmp	r6, #71	; 0x47
  405866:	bfd8      	it	le
  405868:	461f      	movle	r7, r3
  40586a:	920d      	str	r2, [sp, #52]	; 0x34
  40586c:	9110      	str	r1, [sp, #64]	; 0x40
  40586e:	e507      	b.n	405280 <_vfprintf_r+0x264>
  405870:	f04b 0b08 	orr.w	fp, fp, #8
  405874:	f899 6000 	ldrb.w	r6, [r9]
  405878:	e44f      	b.n	40511a <_vfprintf_r+0xfe>
  40587a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40587c:	3507      	adds	r5, #7
  40587e:	f025 0307 	bic.w	r3, r5, #7
  405882:	f103 0208 	add.w	r2, r3, #8
  405886:	e9d3 4500 	ldrd	r4, r5, [r3]
  40588a:	920e      	str	r2, [sp, #56]	; 0x38
  40588c:	2300      	movs	r3, #0
  40588e:	e4d1      	b.n	405234 <_vfprintf_r+0x218>
  405890:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405892:	3507      	adds	r5, #7
  405894:	f025 0307 	bic.w	r3, r5, #7
  405898:	f103 0208 	add.w	r2, r3, #8
  40589c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4058a0:	920e      	str	r2, [sp, #56]	; 0x38
  4058a2:	2301      	movs	r3, #1
  4058a4:	e4c6      	b.n	405234 <_vfprintf_r+0x218>
  4058a6:	2a00      	cmp	r2, #0
  4058a8:	f040 8650 	bne.w	40654c <_vfprintf_r+0x1530>
  4058ac:	b1c6      	cbz	r6, 4058e0 <_vfprintf_r+0x8c4>
  4058ae:	2300      	movs	r3, #0
  4058b0:	2201      	movs	r2, #1
  4058b2:	469a      	mov	sl, r3
  4058b4:	9207      	str	r2, [sp, #28]
  4058b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4058ba:	f8cd b018 	str.w	fp, [sp, #24]
  4058be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4058c2:	9309      	str	r3, [sp, #36]	; 0x24
  4058c4:	9310      	str	r3, [sp, #64]	; 0x40
  4058c6:	920d      	str	r2, [sp, #52]	; 0x34
  4058c8:	af26      	add	r7, sp, #152	; 0x98
  4058ca:	e4df      	b.n	40528c <_vfprintf_r+0x270>
  4058cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4058ce:	6813      	ldr	r3, [r2, #0]
  4058d0:	3204      	adds	r2, #4
  4058d2:	920e      	str	r2, [sp, #56]	; 0x38
  4058d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4058d6:	601a      	str	r2, [r3, #0]
  4058d8:	f7ff bbec 	b.w	4050b4 <_vfprintf_r+0x98>
  4058dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4058de:	e527      	b.n	405330 <_vfprintf_r+0x314>
  4058e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4058e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4058e6:	2b00      	cmp	r3, #0
  4058e8:	f040 8594 	bne.w	406414 <_vfprintf_r+0x13f8>
  4058ec:	2300      	movs	r3, #0
  4058ee:	9324      	str	r3, [sp, #144]	; 0x90
  4058f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4058f4:	f013 0f01 	tst.w	r3, #1
  4058f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4058fc:	d102      	bne.n	405904 <_vfprintf_r+0x8e8>
  4058fe:	059a      	lsls	r2, r3, #22
  405900:	f140 8249 	bpl.w	405d96 <_vfprintf_r+0xd7a>
  405904:	065b      	lsls	r3, r3, #25
  405906:	f53f adec 	bmi.w	4054e2 <_vfprintf_r+0x4c6>
  40590a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40590c:	b041      	add	sp, #260	; 0x104
  40590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405912:	2e65      	cmp	r6, #101	; 0x65
  405914:	f340 80b2 	ble.w	405a7c <_vfprintf_r+0xa60>
  405918:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40591a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40591c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40591e:	9912      	ldr	r1, [sp, #72]	; 0x48
  405920:	f7fe fbe8 	bl	4040f4 <__aeabi_dcmpeq>
  405924:	2800      	cmp	r0, #0
  405926:	f000 8160 	beq.w	405bea <_vfprintf_r+0xbce>
  40592a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40592c:	4a3a      	ldr	r2, [pc, #232]	; (405a18 <_vfprintf_r+0x9fc>)
  40592e:	f8c8 2000 	str.w	r2, [r8]
  405932:	3301      	adds	r3, #1
  405934:	3401      	adds	r4, #1
  405936:	2201      	movs	r2, #1
  405938:	2b07      	cmp	r3, #7
  40593a:	9425      	str	r4, [sp, #148]	; 0x94
  40593c:	9324      	str	r3, [sp, #144]	; 0x90
  40593e:	f8c8 2004 	str.w	r2, [r8, #4]
  405942:	f300 83bf 	bgt.w	4060c4 <_vfprintf_r+0x10a8>
  405946:	f108 0808 	add.w	r8, r8, #8
  40594a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40594c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40594e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405950:	4293      	cmp	r3, r2
  405952:	db03      	blt.n	40595c <_vfprintf_r+0x940>
  405954:	9b06      	ldr	r3, [sp, #24]
  405956:	07df      	lsls	r7, r3, #31
  405958:	f57f ad65 	bpl.w	405426 <_vfprintf_r+0x40a>
  40595c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40595e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405960:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405962:	f8c8 2000 	str.w	r2, [r8]
  405966:	3301      	adds	r3, #1
  405968:	440c      	add	r4, r1
  40596a:	2b07      	cmp	r3, #7
  40596c:	f8c8 1004 	str.w	r1, [r8, #4]
  405970:	9425      	str	r4, [sp, #148]	; 0x94
  405972:	9324      	str	r3, [sp, #144]	; 0x90
  405974:	f300 83f8 	bgt.w	406168 <_vfprintf_r+0x114c>
  405978:	f108 0808 	add.w	r8, r8, #8
  40597c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40597e:	1e5e      	subs	r6, r3, #1
  405980:	2e00      	cmp	r6, #0
  405982:	f77f ad50 	ble.w	405426 <_vfprintf_r+0x40a>
  405986:	2e10      	cmp	r6, #16
  405988:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40598a:	4d24      	ldr	r5, [pc, #144]	; (405a1c <_vfprintf_r+0xa00>)
  40598c:	f340 81dd 	ble.w	405d4a <_vfprintf_r+0xd2e>
  405990:	2710      	movs	r7, #16
  405992:	f8dd a020 	ldr.w	sl, [sp, #32]
  405996:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40599a:	e005      	b.n	4059a8 <_vfprintf_r+0x98c>
  40599c:	f108 0808 	add.w	r8, r8, #8
  4059a0:	3e10      	subs	r6, #16
  4059a2:	2e10      	cmp	r6, #16
  4059a4:	f340 81d1 	ble.w	405d4a <_vfprintf_r+0xd2e>
  4059a8:	3301      	adds	r3, #1
  4059aa:	3410      	adds	r4, #16
  4059ac:	2b07      	cmp	r3, #7
  4059ae:	9425      	str	r4, [sp, #148]	; 0x94
  4059b0:	9324      	str	r3, [sp, #144]	; 0x90
  4059b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4059b6:	ddf1      	ble.n	40599c <_vfprintf_r+0x980>
  4059b8:	aa23      	add	r2, sp, #140	; 0x8c
  4059ba:	4659      	mov	r1, fp
  4059bc:	4650      	mov	r0, sl
  4059be:	f003 f8d7 	bl	408b70 <__sprint_r>
  4059c2:	2800      	cmp	r0, #0
  4059c4:	f040 83cd 	bne.w	406162 <_vfprintf_r+0x1146>
  4059c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4059ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4059d0:	e7e6      	b.n	4059a0 <_vfprintf_r+0x984>
  4059d2:	46aa      	mov	sl, r5
  4059d4:	e78c      	b.n	4058f0 <_vfprintf_r+0x8d4>
  4059d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4059d8:	9a07      	ldr	r2, [sp, #28]
  4059da:	eba3 0a02 	sub.w	sl, r3, r2
  4059de:	f1ba 0f00 	cmp.w	sl, #0
  4059e2:	f77f acca 	ble.w	40537a <_vfprintf_r+0x35e>
  4059e6:	f1ba 0f10 	cmp.w	sl, #16
  4059ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059ec:	4d0b      	ldr	r5, [pc, #44]	; (405a1c <_vfprintf_r+0xa00>)
  4059ee:	dd39      	ble.n	405a64 <_vfprintf_r+0xa48>
  4059f0:	4642      	mov	r2, r8
  4059f2:	4621      	mov	r1, r4
  4059f4:	46b0      	mov	r8, r6
  4059f6:	f04f 0b10 	mov.w	fp, #16
  4059fa:	462e      	mov	r6, r5
  4059fc:	9c08      	ldr	r4, [sp, #32]
  4059fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405a00:	e015      	b.n	405a2e <_vfprintf_r+0xa12>
  405a02:	bf00      	nop
  405a04:	00409274 	.word	0x00409274
  405a08:	00409260 	.word	0x00409260
  405a0c:	7fefffff 	.word	0x7fefffff
  405a10:	00409254 	.word	0x00409254
  405a14:	00409250 	.word	0x00409250
  405a18:	00409290 	.word	0x00409290
  405a1c:	004092a4 	.word	0x004092a4
  405a20:	f1aa 0a10 	sub.w	sl, sl, #16
  405a24:	f1ba 0f10 	cmp.w	sl, #16
  405a28:	f102 0208 	add.w	r2, r2, #8
  405a2c:	dd16      	ble.n	405a5c <_vfprintf_r+0xa40>
  405a2e:	3301      	adds	r3, #1
  405a30:	3110      	adds	r1, #16
  405a32:	2b07      	cmp	r3, #7
  405a34:	9125      	str	r1, [sp, #148]	; 0x94
  405a36:	9324      	str	r3, [sp, #144]	; 0x90
  405a38:	e882 0840 	stmia.w	r2, {r6, fp}
  405a3c:	ddf0      	ble.n	405a20 <_vfprintf_r+0xa04>
  405a3e:	aa23      	add	r2, sp, #140	; 0x8c
  405a40:	4629      	mov	r1, r5
  405a42:	4620      	mov	r0, r4
  405a44:	f003 f894 	bl	408b70 <__sprint_r>
  405a48:	2800      	cmp	r0, #0
  405a4a:	d1c2      	bne.n	4059d2 <_vfprintf_r+0x9b6>
  405a4c:	f1aa 0a10 	sub.w	sl, sl, #16
  405a50:	f1ba 0f10 	cmp.w	sl, #16
  405a54:	9925      	ldr	r1, [sp, #148]	; 0x94
  405a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a58:	aa30      	add	r2, sp, #192	; 0xc0
  405a5a:	dce8      	bgt.n	405a2e <_vfprintf_r+0xa12>
  405a5c:	4635      	mov	r5, r6
  405a5e:	460c      	mov	r4, r1
  405a60:	4646      	mov	r6, r8
  405a62:	4690      	mov	r8, r2
  405a64:	3301      	adds	r3, #1
  405a66:	4454      	add	r4, sl
  405a68:	2b07      	cmp	r3, #7
  405a6a:	9425      	str	r4, [sp, #148]	; 0x94
  405a6c:	9324      	str	r3, [sp, #144]	; 0x90
  405a6e:	e888 0420 	stmia.w	r8, {r5, sl}
  405a72:	f300 8264 	bgt.w	405f3e <_vfprintf_r+0xf22>
  405a76:	f108 0808 	add.w	r8, r8, #8
  405a7a:	e47e      	b.n	40537a <_vfprintf_r+0x35e>
  405a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a7e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405a80:	2b01      	cmp	r3, #1
  405a82:	f340 81fd 	ble.w	405e80 <_vfprintf_r+0xe64>
  405a86:	3601      	adds	r6, #1
  405a88:	3401      	adds	r4, #1
  405a8a:	2301      	movs	r3, #1
  405a8c:	2e07      	cmp	r6, #7
  405a8e:	9425      	str	r4, [sp, #148]	; 0x94
  405a90:	9624      	str	r6, [sp, #144]	; 0x90
  405a92:	f8c8 7000 	str.w	r7, [r8]
  405a96:	f8c8 3004 	str.w	r3, [r8, #4]
  405a9a:	f300 820e 	bgt.w	405eba <_vfprintf_r+0xe9e>
  405a9e:	f108 0808 	add.w	r8, r8, #8
  405aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405aa6:	f8c8 3000 	str.w	r3, [r8]
  405aaa:	3601      	adds	r6, #1
  405aac:	4414      	add	r4, r2
  405aae:	2e07      	cmp	r6, #7
  405ab0:	9425      	str	r4, [sp, #148]	; 0x94
  405ab2:	9624      	str	r6, [sp, #144]	; 0x90
  405ab4:	f8c8 2004 	str.w	r2, [r8, #4]
  405ab8:	f300 822e 	bgt.w	405f18 <_vfprintf_r+0xefc>
  405abc:	f108 0808 	add.w	r8, r8, #8
  405ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405ac4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405ac6:	9912      	ldr	r1, [sp, #72]	; 0x48
  405ac8:	f7fe fb14 	bl	4040f4 <__aeabi_dcmpeq>
  405acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ace:	2800      	cmp	r0, #0
  405ad0:	f040 8106 	bne.w	405ce0 <_vfprintf_r+0xcc4>
  405ad4:	3b01      	subs	r3, #1
  405ad6:	3601      	adds	r6, #1
  405ad8:	3701      	adds	r7, #1
  405ada:	441c      	add	r4, r3
  405adc:	2e07      	cmp	r6, #7
  405ade:	9624      	str	r6, [sp, #144]	; 0x90
  405ae0:	9425      	str	r4, [sp, #148]	; 0x94
  405ae2:	f8c8 7000 	str.w	r7, [r8]
  405ae6:	f8c8 3004 	str.w	r3, [r8, #4]
  405aea:	f300 81d9 	bgt.w	405ea0 <_vfprintf_r+0xe84>
  405aee:	f108 0808 	add.w	r8, r8, #8
  405af2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405af4:	f8c8 2004 	str.w	r2, [r8, #4]
  405af8:	3601      	adds	r6, #1
  405afa:	4414      	add	r4, r2
  405afc:	ab1f      	add	r3, sp, #124	; 0x7c
  405afe:	2e07      	cmp	r6, #7
  405b00:	9425      	str	r4, [sp, #148]	; 0x94
  405b02:	9624      	str	r6, [sp, #144]	; 0x90
  405b04:	f8c8 3000 	str.w	r3, [r8]
  405b08:	f77f ac8b 	ble.w	405422 <_vfprintf_r+0x406>
  405b0c:	aa23      	add	r2, sp, #140	; 0x8c
  405b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b10:	9808      	ldr	r0, [sp, #32]
  405b12:	f003 f82d 	bl	408b70 <__sprint_r>
  405b16:	b958      	cbnz	r0, 405b30 <_vfprintf_r+0xb14>
  405b18:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b1a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b1e:	e482      	b.n	405426 <_vfprintf_r+0x40a>
  405b20:	aa23      	add	r2, sp, #140	; 0x8c
  405b22:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b24:	9808      	ldr	r0, [sp, #32]
  405b26:	f003 f823 	bl	408b70 <__sprint_r>
  405b2a:	2800      	cmp	r0, #0
  405b2c:	f43f acc5 	beq.w	4054ba <_vfprintf_r+0x49e>
  405b30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  405b34:	e6dc      	b.n	4058f0 <_vfprintf_r+0x8d4>
  405b36:	f8dd b018 	ldr.w	fp, [sp, #24]
  405b3a:	2b01      	cmp	r3, #1
  405b3c:	f000 8121 	beq.w	405d82 <_vfprintf_r+0xd66>
  405b40:	2b02      	cmp	r3, #2
  405b42:	d127      	bne.n	405b94 <_vfprintf_r+0xb78>
  405b44:	f8cd b018 	str.w	fp, [sp, #24]
  405b48:	2400      	movs	r4, #0
  405b4a:	2500      	movs	r5, #0
  405b4c:	e591      	b.n	405672 <_vfprintf_r+0x656>
  405b4e:	aa23      	add	r2, sp, #140	; 0x8c
  405b50:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b52:	9808      	ldr	r0, [sp, #32]
  405b54:	f003 f80c 	bl	408b70 <__sprint_r>
  405b58:	2800      	cmp	r0, #0
  405b5a:	d1e9      	bne.n	405b30 <_vfprintf_r+0xb14>
  405b5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b5e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b62:	e44d      	b.n	405400 <_vfprintf_r+0x3e4>
  405b64:	aa23      	add	r2, sp, #140	; 0x8c
  405b66:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b68:	9808      	ldr	r0, [sp, #32]
  405b6a:	f003 f801 	bl	408b70 <__sprint_r>
  405b6e:	2800      	cmp	r0, #0
  405b70:	d1de      	bne.n	405b30 <_vfprintf_r+0xb14>
  405b72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b78:	f7ff bbec 	b.w	405354 <_vfprintf_r+0x338>
  405b7c:	aa23      	add	r2, sp, #140	; 0x8c
  405b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b80:	9808      	ldr	r0, [sp, #32]
  405b82:	f002 fff5 	bl	408b70 <__sprint_r>
  405b86:	2800      	cmp	r0, #0
  405b88:	d1d2      	bne.n	405b30 <_vfprintf_r+0xb14>
  405b8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b8c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b90:	f7ff bbf0 	b.w	405374 <_vfprintf_r+0x358>
  405b94:	f8cd b018 	str.w	fp, [sp, #24]
  405b98:	2400      	movs	r4, #0
  405b9a:	2500      	movs	r5, #0
  405b9c:	a930      	add	r1, sp, #192	; 0xc0
  405b9e:	e000      	b.n	405ba2 <_vfprintf_r+0xb86>
  405ba0:	4639      	mov	r1, r7
  405ba2:	08e2      	lsrs	r2, r4, #3
  405ba4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405ba8:	08e8      	lsrs	r0, r5, #3
  405baa:	f004 0307 	and.w	r3, r4, #7
  405bae:	4605      	mov	r5, r0
  405bb0:	4614      	mov	r4, r2
  405bb2:	3330      	adds	r3, #48	; 0x30
  405bb4:	ea54 0205 	orrs.w	r2, r4, r5
  405bb8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405bbc:	f101 37ff 	add.w	r7, r1, #4294967295
  405bc0:	d1ee      	bne.n	405ba0 <_vfprintf_r+0xb84>
  405bc2:	9a06      	ldr	r2, [sp, #24]
  405bc4:	07d2      	lsls	r2, r2, #31
  405bc6:	f57f ad64 	bpl.w	405692 <_vfprintf_r+0x676>
  405bca:	2b30      	cmp	r3, #48	; 0x30
  405bcc:	f43f ad61 	beq.w	405692 <_vfprintf_r+0x676>
  405bd0:	2330      	movs	r3, #48	; 0x30
  405bd2:	3902      	subs	r1, #2
  405bd4:	f807 3c01 	strb.w	r3, [r7, #-1]
  405bd8:	ab30      	add	r3, sp, #192	; 0xc0
  405bda:	1a5b      	subs	r3, r3, r1
  405bdc:	930d      	str	r3, [sp, #52]	; 0x34
  405bde:	460f      	mov	r7, r1
  405be0:	f7ff bb46 	b.w	405270 <_vfprintf_r+0x254>
  405be4:	2302      	movs	r3, #2
  405be6:	f7ff bb25 	b.w	405234 <_vfprintf_r+0x218>
  405bea:	991d      	ldr	r1, [sp, #116]	; 0x74
  405bec:	2900      	cmp	r1, #0
  405bee:	f340 8274 	ble.w	4060da <_vfprintf_r+0x10be>
  405bf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405bf6:	4293      	cmp	r3, r2
  405bf8:	bfa8      	it	ge
  405bfa:	4613      	movge	r3, r2
  405bfc:	2b00      	cmp	r3, #0
  405bfe:	461e      	mov	r6, r3
  405c00:	dd0d      	ble.n	405c1e <_vfprintf_r+0xc02>
  405c02:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c04:	f8c8 7000 	str.w	r7, [r8]
  405c08:	3301      	adds	r3, #1
  405c0a:	4434      	add	r4, r6
  405c0c:	2b07      	cmp	r3, #7
  405c0e:	9425      	str	r4, [sp, #148]	; 0x94
  405c10:	f8c8 6004 	str.w	r6, [r8, #4]
  405c14:	9324      	str	r3, [sp, #144]	; 0x90
  405c16:	f300 8324 	bgt.w	406262 <_vfprintf_r+0x1246>
  405c1a:	f108 0808 	add.w	r8, r8, #8
  405c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405c20:	2e00      	cmp	r6, #0
  405c22:	bfa8      	it	ge
  405c24:	1b9b      	subge	r3, r3, r6
  405c26:	2b00      	cmp	r3, #0
  405c28:	461e      	mov	r6, r3
  405c2a:	f340 80d0 	ble.w	405dce <_vfprintf_r+0xdb2>
  405c2e:	2e10      	cmp	r6, #16
  405c30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c32:	4dc0      	ldr	r5, [pc, #768]	; (405f34 <_vfprintf_r+0xf18>)
  405c34:	f340 80b7 	ble.w	405da6 <_vfprintf_r+0xd8a>
  405c38:	4622      	mov	r2, r4
  405c3a:	f04f 0a10 	mov.w	sl, #16
  405c3e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405c42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405c44:	e005      	b.n	405c52 <_vfprintf_r+0xc36>
  405c46:	f108 0808 	add.w	r8, r8, #8
  405c4a:	3e10      	subs	r6, #16
  405c4c:	2e10      	cmp	r6, #16
  405c4e:	f340 80a9 	ble.w	405da4 <_vfprintf_r+0xd88>
  405c52:	3301      	adds	r3, #1
  405c54:	3210      	adds	r2, #16
  405c56:	2b07      	cmp	r3, #7
  405c58:	9225      	str	r2, [sp, #148]	; 0x94
  405c5a:	9324      	str	r3, [sp, #144]	; 0x90
  405c5c:	e888 0420 	stmia.w	r8, {r5, sl}
  405c60:	ddf1      	ble.n	405c46 <_vfprintf_r+0xc2a>
  405c62:	aa23      	add	r2, sp, #140	; 0x8c
  405c64:	4621      	mov	r1, r4
  405c66:	4658      	mov	r0, fp
  405c68:	f002 ff82 	bl	408b70 <__sprint_r>
  405c6c:	2800      	cmp	r0, #0
  405c6e:	f040 8324 	bne.w	4062ba <_vfprintf_r+0x129e>
  405c72:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405c7a:	e7e6      	b.n	405c4a <_vfprintf_r+0xc2e>
  405c7c:	2d00      	cmp	r5, #0
  405c7e:	bf08      	it	eq
  405c80:	2c0a      	cmpeq	r4, #10
  405c82:	d37c      	bcc.n	405d7e <_vfprintf_r+0xd62>
  405c84:	af30      	add	r7, sp, #192	; 0xc0
  405c86:	4620      	mov	r0, r4
  405c88:	4629      	mov	r1, r5
  405c8a:	220a      	movs	r2, #10
  405c8c:	2300      	movs	r3, #0
  405c8e:	f7fe fa63 	bl	404158 <__aeabi_uldivmod>
  405c92:	3230      	adds	r2, #48	; 0x30
  405c94:	f807 2d01 	strb.w	r2, [r7, #-1]!
  405c98:	4620      	mov	r0, r4
  405c9a:	4629      	mov	r1, r5
  405c9c:	2300      	movs	r3, #0
  405c9e:	220a      	movs	r2, #10
  405ca0:	f7fe fa5a 	bl	404158 <__aeabi_uldivmod>
  405ca4:	4604      	mov	r4, r0
  405ca6:	460d      	mov	r5, r1
  405ca8:	ea54 0305 	orrs.w	r3, r4, r5
  405cac:	d1eb      	bne.n	405c86 <_vfprintf_r+0xc6a>
  405cae:	ab30      	add	r3, sp, #192	; 0xc0
  405cb0:	1bdb      	subs	r3, r3, r7
  405cb2:	930d      	str	r3, [sp, #52]	; 0x34
  405cb4:	f7ff badc 	b.w	405270 <_vfprintf_r+0x254>
  405cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cba:	930d      	str	r3, [sp, #52]	; 0x34
  405cbc:	af30      	add	r7, sp, #192	; 0xc0
  405cbe:	f7ff bad7 	b.w	405270 <_vfprintf_r+0x254>
  405cc2:	aa23      	add	r2, sp, #140	; 0x8c
  405cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
  405cc6:	9808      	ldr	r0, [sp, #32]
  405cc8:	f002 ff52 	bl	408b70 <__sprint_r>
  405ccc:	2800      	cmp	r0, #0
  405cce:	f47f af2f 	bne.w	405b30 <_vfprintf_r+0xb14>
  405cd2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405cd6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405cd8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405cdc:	f7ff bb28 	b.w	405330 <_vfprintf_r+0x314>
  405ce0:	1e5f      	subs	r7, r3, #1
  405ce2:	2f00      	cmp	r7, #0
  405ce4:	f77f af05 	ble.w	405af2 <_vfprintf_r+0xad6>
  405ce8:	2f10      	cmp	r7, #16
  405cea:	4d92      	ldr	r5, [pc, #584]	; (405f34 <_vfprintf_r+0xf18>)
  405cec:	f340 810a 	ble.w	405f04 <_vfprintf_r+0xee8>
  405cf0:	f04f 0a10 	mov.w	sl, #16
  405cf4:	f8dd b020 	ldr.w	fp, [sp, #32]
  405cf8:	e005      	b.n	405d06 <_vfprintf_r+0xcea>
  405cfa:	f108 0808 	add.w	r8, r8, #8
  405cfe:	3f10      	subs	r7, #16
  405d00:	2f10      	cmp	r7, #16
  405d02:	f340 80ff 	ble.w	405f04 <_vfprintf_r+0xee8>
  405d06:	3601      	adds	r6, #1
  405d08:	3410      	adds	r4, #16
  405d0a:	2e07      	cmp	r6, #7
  405d0c:	9425      	str	r4, [sp, #148]	; 0x94
  405d0e:	9624      	str	r6, [sp, #144]	; 0x90
  405d10:	e888 0420 	stmia.w	r8, {r5, sl}
  405d14:	ddf1      	ble.n	405cfa <_vfprintf_r+0xcde>
  405d16:	aa23      	add	r2, sp, #140	; 0x8c
  405d18:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d1a:	4658      	mov	r0, fp
  405d1c:	f002 ff28 	bl	408b70 <__sprint_r>
  405d20:	2800      	cmp	r0, #0
  405d22:	f47f af05 	bne.w	405b30 <_vfprintf_r+0xb14>
  405d26:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d28:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405d2a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d2e:	e7e6      	b.n	405cfe <_vfprintf_r+0xce2>
  405d30:	990e      	ldr	r1, [sp, #56]	; 0x38
  405d32:	460a      	mov	r2, r1
  405d34:	3204      	adds	r2, #4
  405d36:	680c      	ldr	r4, [r1, #0]
  405d38:	920e      	str	r2, [sp, #56]	; 0x38
  405d3a:	2500      	movs	r5, #0
  405d3c:	f7ff ba7a 	b.w	405234 <_vfprintf_r+0x218>
  405d40:	681c      	ldr	r4, [r3, #0]
  405d42:	3304      	adds	r3, #4
  405d44:	930e      	str	r3, [sp, #56]	; 0x38
  405d46:	2500      	movs	r5, #0
  405d48:	e426      	b.n	405598 <_vfprintf_r+0x57c>
  405d4a:	3301      	adds	r3, #1
  405d4c:	4434      	add	r4, r6
  405d4e:	2b07      	cmp	r3, #7
  405d50:	9425      	str	r4, [sp, #148]	; 0x94
  405d52:	9324      	str	r3, [sp, #144]	; 0x90
  405d54:	e888 0060 	stmia.w	r8, {r5, r6}
  405d58:	f77f ab63 	ble.w	405422 <_vfprintf_r+0x406>
  405d5c:	e6d6      	b.n	405b0c <_vfprintf_r+0xaf0>
  405d5e:	3204      	adds	r2, #4
  405d60:	681c      	ldr	r4, [r3, #0]
  405d62:	920e      	str	r2, [sp, #56]	; 0x38
  405d64:	2301      	movs	r3, #1
  405d66:	2500      	movs	r5, #0
  405d68:	f7ff ba64 	b.w	405234 <_vfprintf_r+0x218>
  405d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405d6e:	6814      	ldr	r4, [r2, #0]
  405d70:	4613      	mov	r3, r2
  405d72:	3304      	adds	r3, #4
  405d74:	17e5      	asrs	r5, r4, #31
  405d76:	930e      	str	r3, [sp, #56]	; 0x38
  405d78:	4622      	mov	r2, r4
  405d7a:	462b      	mov	r3, r5
  405d7c:	e460      	b.n	405640 <_vfprintf_r+0x624>
  405d7e:	f8dd b018 	ldr.w	fp, [sp, #24]
  405d82:	f8cd b018 	str.w	fp, [sp, #24]
  405d86:	af40      	add	r7, sp, #256	; 0x100
  405d88:	3430      	adds	r4, #48	; 0x30
  405d8a:	2301      	movs	r3, #1
  405d8c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405d90:	930d      	str	r3, [sp, #52]	; 0x34
  405d92:	f7ff ba6d 	b.w	405270 <_vfprintf_r+0x254>
  405d96:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405d9a:	f002 f895 	bl	407ec8 <__retarget_lock_release_recursive>
  405d9e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405da2:	e5af      	b.n	405904 <_vfprintf_r+0x8e8>
  405da4:	4614      	mov	r4, r2
  405da6:	3301      	adds	r3, #1
  405da8:	4434      	add	r4, r6
  405daa:	2b07      	cmp	r3, #7
  405dac:	9425      	str	r4, [sp, #148]	; 0x94
  405dae:	9324      	str	r3, [sp, #144]	; 0x90
  405db0:	e888 0060 	stmia.w	r8, {r5, r6}
  405db4:	f340 816d 	ble.w	406092 <_vfprintf_r+0x1076>
  405db8:	aa23      	add	r2, sp, #140	; 0x8c
  405dba:	990a      	ldr	r1, [sp, #40]	; 0x28
  405dbc:	9808      	ldr	r0, [sp, #32]
  405dbe:	f002 fed7 	bl	408b70 <__sprint_r>
  405dc2:	2800      	cmp	r0, #0
  405dc4:	f47f aeb4 	bne.w	405b30 <_vfprintf_r+0xb14>
  405dc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405dca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405dce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dd2:	4293      	cmp	r3, r2
  405dd4:	f280 8158 	bge.w	406088 <_vfprintf_r+0x106c>
  405dd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405dda:	9814      	ldr	r0, [sp, #80]	; 0x50
  405ddc:	9915      	ldr	r1, [sp, #84]	; 0x54
  405dde:	f8c8 1000 	str.w	r1, [r8]
  405de2:	3201      	adds	r2, #1
  405de4:	4404      	add	r4, r0
  405de6:	2a07      	cmp	r2, #7
  405de8:	9425      	str	r4, [sp, #148]	; 0x94
  405dea:	f8c8 0004 	str.w	r0, [r8, #4]
  405dee:	9224      	str	r2, [sp, #144]	; 0x90
  405df0:	f300 8152 	bgt.w	406098 <_vfprintf_r+0x107c>
  405df4:	f108 0808 	add.w	r8, r8, #8
  405df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dfa:	9910      	ldr	r1, [sp, #64]	; 0x40
  405dfc:	1ad3      	subs	r3, r2, r3
  405dfe:	1a56      	subs	r6, r2, r1
  405e00:	429e      	cmp	r6, r3
  405e02:	bfa8      	it	ge
  405e04:	461e      	movge	r6, r3
  405e06:	2e00      	cmp	r6, #0
  405e08:	dd0e      	ble.n	405e28 <_vfprintf_r+0xe0c>
  405e0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e0c:	f8c8 6004 	str.w	r6, [r8, #4]
  405e10:	3201      	adds	r2, #1
  405e12:	440f      	add	r7, r1
  405e14:	4434      	add	r4, r6
  405e16:	2a07      	cmp	r2, #7
  405e18:	f8c8 7000 	str.w	r7, [r8]
  405e1c:	9425      	str	r4, [sp, #148]	; 0x94
  405e1e:	9224      	str	r2, [sp, #144]	; 0x90
  405e20:	f300 823c 	bgt.w	40629c <_vfprintf_r+0x1280>
  405e24:	f108 0808 	add.w	r8, r8, #8
  405e28:	2e00      	cmp	r6, #0
  405e2a:	bfac      	ite	ge
  405e2c:	1b9e      	subge	r6, r3, r6
  405e2e:	461e      	movlt	r6, r3
  405e30:	2e00      	cmp	r6, #0
  405e32:	f77f aaf8 	ble.w	405426 <_vfprintf_r+0x40a>
  405e36:	2e10      	cmp	r6, #16
  405e38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e3a:	4d3e      	ldr	r5, [pc, #248]	; (405f34 <_vfprintf_r+0xf18>)
  405e3c:	dd85      	ble.n	405d4a <_vfprintf_r+0xd2e>
  405e3e:	2710      	movs	r7, #16
  405e40:	f8dd a020 	ldr.w	sl, [sp, #32]
  405e44:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405e48:	e005      	b.n	405e56 <_vfprintf_r+0xe3a>
  405e4a:	f108 0808 	add.w	r8, r8, #8
  405e4e:	3e10      	subs	r6, #16
  405e50:	2e10      	cmp	r6, #16
  405e52:	f77f af7a 	ble.w	405d4a <_vfprintf_r+0xd2e>
  405e56:	3301      	adds	r3, #1
  405e58:	3410      	adds	r4, #16
  405e5a:	2b07      	cmp	r3, #7
  405e5c:	9425      	str	r4, [sp, #148]	; 0x94
  405e5e:	9324      	str	r3, [sp, #144]	; 0x90
  405e60:	e888 00a0 	stmia.w	r8, {r5, r7}
  405e64:	ddf1      	ble.n	405e4a <_vfprintf_r+0xe2e>
  405e66:	aa23      	add	r2, sp, #140	; 0x8c
  405e68:	4659      	mov	r1, fp
  405e6a:	4650      	mov	r0, sl
  405e6c:	f002 fe80 	bl	408b70 <__sprint_r>
  405e70:	2800      	cmp	r0, #0
  405e72:	f040 8176 	bne.w	406162 <_vfprintf_r+0x1146>
  405e76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405e78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405e7e:	e7e6      	b.n	405e4e <_vfprintf_r+0xe32>
  405e80:	9b06      	ldr	r3, [sp, #24]
  405e82:	07d8      	lsls	r0, r3, #31
  405e84:	f53f adff 	bmi.w	405a86 <_vfprintf_r+0xa6a>
  405e88:	3601      	adds	r6, #1
  405e8a:	3401      	adds	r4, #1
  405e8c:	2301      	movs	r3, #1
  405e8e:	2e07      	cmp	r6, #7
  405e90:	9425      	str	r4, [sp, #148]	; 0x94
  405e92:	9624      	str	r6, [sp, #144]	; 0x90
  405e94:	f8c8 7000 	str.w	r7, [r8]
  405e98:	f8c8 3004 	str.w	r3, [r8, #4]
  405e9c:	f77f ae27 	ble.w	405aee <_vfprintf_r+0xad2>
  405ea0:	aa23      	add	r2, sp, #140	; 0x8c
  405ea2:	990a      	ldr	r1, [sp, #40]	; 0x28
  405ea4:	9808      	ldr	r0, [sp, #32]
  405ea6:	f002 fe63 	bl	408b70 <__sprint_r>
  405eaa:	2800      	cmp	r0, #0
  405eac:	f47f ae40 	bne.w	405b30 <_vfprintf_r+0xb14>
  405eb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405eb2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405eb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405eb8:	e61b      	b.n	405af2 <_vfprintf_r+0xad6>
  405eba:	aa23      	add	r2, sp, #140	; 0x8c
  405ebc:	990a      	ldr	r1, [sp, #40]	; 0x28
  405ebe:	9808      	ldr	r0, [sp, #32]
  405ec0:	f002 fe56 	bl	408b70 <__sprint_r>
  405ec4:	2800      	cmp	r0, #0
  405ec6:	f47f ae33 	bne.w	405b30 <_vfprintf_r+0xb14>
  405eca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405ecc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405ece:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405ed2:	e5e6      	b.n	405aa2 <_vfprintf_r+0xa86>
  405ed4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405ed6:	3507      	adds	r5, #7
  405ed8:	f025 0507 	bic.w	r5, r5, #7
  405edc:	e9d5 2300 	ldrd	r2, r3, [r5]
  405ee0:	f105 0108 	add.w	r1, r5, #8
  405ee4:	910e      	str	r1, [sp, #56]	; 0x38
  405ee6:	4614      	mov	r4, r2
  405ee8:	461d      	mov	r5, r3
  405eea:	f7ff bba9 	b.w	405640 <_vfprintf_r+0x624>
  405eee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405ef0:	3507      	adds	r5, #7
  405ef2:	f025 0307 	bic.w	r3, r5, #7
  405ef6:	f103 0208 	add.w	r2, r3, #8
  405efa:	920e      	str	r2, [sp, #56]	; 0x38
  405efc:	e9d3 4500 	ldrd	r4, r5, [r3]
  405f00:	f7ff bb4a 	b.w	405598 <_vfprintf_r+0x57c>
  405f04:	3601      	adds	r6, #1
  405f06:	443c      	add	r4, r7
  405f08:	2e07      	cmp	r6, #7
  405f0a:	9425      	str	r4, [sp, #148]	; 0x94
  405f0c:	9624      	str	r6, [sp, #144]	; 0x90
  405f0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405f12:	f77f adec 	ble.w	405aee <_vfprintf_r+0xad2>
  405f16:	e7c3      	b.n	405ea0 <_vfprintf_r+0xe84>
  405f18:	aa23      	add	r2, sp, #140	; 0x8c
  405f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f1c:	9808      	ldr	r0, [sp, #32]
  405f1e:	f002 fe27 	bl	408b70 <__sprint_r>
  405f22:	2800      	cmp	r0, #0
  405f24:	f47f ae04 	bne.w	405b30 <_vfprintf_r+0xb14>
  405f28:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405f2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f30:	e5c6      	b.n	405ac0 <_vfprintf_r+0xaa4>
  405f32:	bf00      	nop
  405f34:	004092a4 	.word	0x004092a4
  405f38:	af30      	add	r7, sp, #192	; 0xc0
  405f3a:	f7ff b999 	b.w	405270 <_vfprintf_r+0x254>
  405f3e:	aa23      	add	r2, sp, #140	; 0x8c
  405f40:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f42:	9808      	ldr	r0, [sp, #32]
  405f44:	f002 fe14 	bl	408b70 <__sprint_r>
  405f48:	2800      	cmp	r0, #0
  405f4a:	f47f adf1 	bne.w	405b30 <_vfprintf_r+0xb14>
  405f4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f50:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f54:	f7ff ba11 	b.w	40537a <_vfprintf_r+0x35e>
  405f58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405f5c:	4264      	negs	r4, r4
  405f5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405f62:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405f66:	2301      	movs	r3, #1
  405f68:	f7ff b968 	b.w	40523c <_vfprintf_r+0x220>
  405f6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  405f6e:	4622      	mov	r2, r4
  405f70:	4620      	mov	r0, r4
  405f72:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405f74:	4623      	mov	r3, r4
  405f76:	4621      	mov	r1, r4
  405f78:	f003 f8aa 	bl	4090d0 <__aeabi_dcmpun>
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f040 828c 	bne.w	40649a <_vfprintf_r+0x147e>
  405f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f84:	3301      	adds	r3, #1
  405f86:	f026 0320 	bic.w	r3, r6, #32
  405f8a:	930d      	str	r3, [sp, #52]	; 0x34
  405f8c:	f000 8091 	beq.w	4060b2 <_vfprintf_r+0x1096>
  405f90:	2b47      	cmp	r3, #71	; 0x47
  405f92:	d104      	bne.n	405f9e <_vfprintf_r+0xf82>
  405f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f96:	2b00      	cmp	r3, #0
  405f98:	bf08      	it	eq
  405f9a:	2301      	moveq	r3, #1
  405f9c:	9309      	str	r3, [sp, #36]	; 0x24
  405f9e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405fa2:	9306      	str	r3, [sp, #24]
  405fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405fa6:	f1b3 0a00 	subs.w	sl, r3, #0
  405faa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405fac:	9307      	str	r3, [sp, #28]
  405fae:	bfbb      	ittet	lt
  405fb0:	4653      	movlt	r3, sl
  405fb2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  405fb6:	2300      	movge	r3, #0
  405fb8:	232d      	movlt	r3, #45	; 0x2d
  405fba:	2e66      	cmp	r6, #102	; 0x66
  405fbc:	930f      	str	r3, [sp, #60]	; 0x3c
  405fbe:	f000 817f 	beq.w	4062c0 <_vfprintf_r+0x12a4>
  405fc2:	2e46      	cmp	r6, #70	; 0x46
  405fc4:	f000 81d4 	beq.w	406370 <_vfprintf_r+0x1354>
  405fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fca:	9a07      	ldr	r2, [sp, #28]
  405fcc:	2b45      	cmp	r3, #69	; 0x45
  405fce:	bf0c      	ite	eq
  405fd0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405fd2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405fd4:	a821      	add	r0, sp, #132	; 0x84
  405fd6:	a91e      	add	r1, sp, #120	; 0x78
  405fd8:	bf08      	it	eq
  405fda:	1c5d      	addeq	r5, r3, #1
  405fdc:	9004      	str	r0, [sp, #16]
  405fde:	9103      	str	r1, [sp, #12]
  405fe0:	a81d      	add	r0, sp, #116	; 0x74
  405fe2:	2102      	movs	r1, #2
  405fe4:	9002      	str	r0, [sp, #8]
  405fe6:	4653      	mov	r3, sl
  405fe8:	9501      	str	r5, [sp, #4]
  405fea:	9100      	str	r1, [sp, #0]
  405fec:	9808      	ldr	r0, [sp, #32]
  405fee:	f000 fc0b 	bl	406808 <_dtoa_r>
  405ff2:	2e67      	cmp	r6, #103	; 0x67
  405ff4:	4607      	mov	r7, r0
  405ff6:	f040 81af 	bne.w	406358 <_vfprintf_r+0x133c>
  405ffa:	f01b 0f01 	tst.w	fp, #1
  405ffe:	f000 8213 	beq.w	406428 <_vfprintf_r+0x140c>
  406002:	197c      	adds	r4, r7, r5
  406004:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406006:	9807      	ldr	r0, [sp, #28]
  406008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40600a:	4651      	mov	r1, sl
  40600c:	f7fe f872 	bl	4040f4 <__aeabi_dcmpeq>
  406010:	2800      	cmp	r0, #0
  406012:	f040 8132 	bne.w	40627a <_vfprintf_r+0x125e>
  406016:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406018:	42a3      	cmp	r3, r4
  40601a:	d206      	bcs.n	40602a <_vfprintf_r+0x100e>
  40601c:	2130      	movs	r1, #48	; 0x30
  40601e:	1c5a      	adds	r2, r3, #1
  406020:	9221      	str	r2, [sp, #132]	; 0x84
  406022:	7019      	strb	r1, [r3, #0]
  406024:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406026:	429c      	cmp	r4, r3
  406028:	d8f9      	bhi.n	40601e <_vfprintf_r+0x1002>
  40602a:	1bdb      	subs	r3, r3, r7
  40602c:	9311      	str	r3, [sp, #68]	; 0x44
  40602e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406030:	2b47      	cmp	r3, #71	; 0x47
  406032:	f000 80b9 	beq.w	4061a8 <_vfprintf_r+0x118c>
  406036:	2e65      	cmp	r6, #101	; 0x65
  406038:	f340 8276 	ble.w	406528 <_vfprintf_r+0x150c>
  40603c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40603e:	9310      	str	r3, [sp, #64]	; 0x40
  406040:	2e66      	cmp	r6, #102	; 0x66
  406042:	f000 8162 	beq.w	40630a <_vfprintf_r+0x12ee>
  406046:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406048:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40604a:	4619      	mov	r1, r3
  40604c:	4291      	cmp	r1, r2
  40604e:	f300 814f 	bgt.w	4062f0 <_vfprintf_r+0x12d4>
  406052:	f01b 0f01 	tst.w	fp, #1
  406056:	f040 8209 	bne.w	40646c <_vfprintf_r+0x1450>
  40605a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40605e:	9307      	str	r3, [sp, #28]
  406060:	920d      	str	r2, [sp, #52]	; 0x34
  406062:	2667      	movs	r6, #103	; 0x67
  406064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406066:	2b00      	cmp	r3, #0
  406068:	f040 8096 	bne.w	406198 <_vfprintf_r+0x117c>
  40606c:	9309      	str	r3, [sp, #36]	; 0x24
  40606e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406072:	f7ff b905 	b.w	405280 <_vfprintf_r+0x264>
  406076:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40607a:	f001 ff25 	bl	407ec8 <__retarget_lock_release_recursive>
  40607e:	f04f 33ff 	mov.w	r3, #4294967295
  406082:	930b      	str	r3, [sp, #44]	; 0x2c
  406084:	f7ff ba30 	b.w	4054e8 <_vfprintf_r+0x4cc>
  406088:	9a06      	ldr	r2, [sp, #24]
  40608a:	07d5      	lsls	r5, r2, #31
  40608c:	f57f aeb4 	bpl.w	405df8 <_vfprintf_r+0xddc>
  406090:	e6a2      	b.n	405dd8 <_vfprintf_r+0xdbc>
  406092:	f108 0808 	add.w	r8, r8, #8
  406096:	e69a      	b.n	405dce <_vfprintf_r+0xdb2>
  406098:	aa23      	add	r2, sp, #140	; 0x8c
  40609a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40609c:	9808      	ldr	r0, [sp, #32]
  40609e:	f002 fd67 	bl	408b70 <__sprint_r>
  4060a2:	2800      	cmp	r0, #0
  4060a4:	f47f ad44 	bne.w	405b30 <_vfprintf_r+0xb14>
  4060a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4060aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4060ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4060b0:	e6a2      	b.n	405df8 <_vfprintf_r+0xddc>
  4060b2:	2306      	movs	r3, #6
  4060b4:	9309      	str	r3, [sp, #36]	; 0x24
  4060b6:	e772      	b.n	405f9e <_vfprintf_r+0xf82>
  4060b8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4060bc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4060c0:	f7ff bbc7 	b.w	405852 <_vfprintf_r+0x836>
  4060c4:	aa23      	add	r2, sp, #140	; 0x8c
  4060c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060c8:	9808      	ldr	r0, [sp, #32]
  4060ca:	f002 fd51 	bl	408b70 <__sprint_r>
  4060ce:	2800      	cmp	r0, #0
  4060d0:	f47f ad2e 	bne.w	405b30 <_vfprintf_r+0xb14>
  4060d4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4060d8:	e437      	b.n	40594a <_vfprintf_r+0x92e>
  4060da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060dc:	4ab4      	ldr	r2, [pc, #720]	; (4063b0 <_vfprintf_r+0x1394>)
  4060de:	f8c8 2000 	str.w	r2, [r8]
  4060e2:	3301      	adds	r3, #1
  4060e4:	3401      	adds	r4, #1
  4060e6:	2201      	movs	r2, #1
  4060e8:	2b07      	cmp	r3, #7
  4060ea:	9425      	str	r4, [sp, #148]	; 0x94
  4060ec:	9324      	str	r3, [sp, #144]	; 0x90
  4060ee:	f8c8 2004 	str.w	r2, [r8, #4]
  4060f2:	f300 8124 	bgt.w	40633e <_vfprintf_r+0x1322>
  4060f6:	f108 0808 	add.w	r8, r8, #8
  4060fa:	b929      	cbnz	r1, 406108 <_vfprintf_r+0x10ec>
  4060fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060fe:	b91b      	cbnz	r3, 406108 <_vfprintf_r+0x10ec>
  406100:	9b06      	ldr	r3, [sp, #24]
  406102:	07de      	lsls	r6, r3, #31
  406104:	f57f a98f 	bpl.w	405426 <_vfprintf_r+0x40a>
  406108:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40610a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40610c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40610e:	f8c8 2000 	str.w	r2, [r8]
  406112:	3301      	adds	r3, #1
  406114:	4602      	mov	r2, r0
  406116:	4422      	add	r2, r4
  406118:	2b07      	cmp	r3, #7
  40611a:	9225      	str	r2, [sp, #148]	; 0x94
  40611c:	f8c8 0004 	str.w	r0, [r8, #4]
  406120:	9324      	str	r3, [sp, #144]	; 0x90
  406122:	f300 8169 	bgt.w	4063f8 <_vfprintf_r+0x13dc>
  406126:	f108 0808 	add.w	r8, r8, #8
  40612a:	2900      	cmp	r1, #0
  40612c:	f2c0 8136 	blt.w	40639c <_vfprintf_r+0x1380>
  406130:	9911      	ldr	r1, [sp, #68]	; 0x44
  406132:	f8c8 7000 	str.w	r7, [r8]
  406136:	3301      	adds	r3, #1
  406138:	188c      	adds	r4, r1, r2
  40613a:	2b07      	cmp	r3, #7
  40613c:	9425      	str	r4, [sp, #148]	; 0x94
  40613e:	9324      	str	r3, [sp, #144]	; 0x90
  406140:	f8c8 1004 	str.w	r1, [r8, #4]
  406144:	f77f a96d 	ble.w	405422 <_vfprintf_r+0x406>
  406148:	e4e0      	b.n	405b0c <_vfprintf_r+0xaf0>
  40614a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40614c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40614e:	6813      	ldr	r3, [r2, #0]
  406150:	17cd      	asrs	r5, r1, #31
  406152:	4608      	mov	r0, r1
  406154:	3204      	adds	r2, #4
  406156:	4629      	mov	r1, r5
  406158:	920e      	str	r2, [sp, #56]	; 0x38
  40615a:	e9c3 0100 	strd	r0, r1, [r3]
  40615e:	f7fe bfa9 	b.w	4050b4 <_vfprintf_r+0x98>
  406162:	46da      	mov	sl, fp
  406164:	f7ff bbc4 	b.w	4058f0 <_vfprintf_r+0x8d4>
  406168:	aa23      	add	r2, sp, #140	; 0x8c
  40616a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40616c:	9808      	ldr	r0, [sp, #32]
  40616e:	f002 fcff 	bl	408b70 <__sprint_r>
  406172:	2800      	cmp	r0, #0
  406174:	f47f acdc 	bne.w	405b30 <_vfprintf_r+0xb14>
  406178:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40617a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40617e:	f7ff bbfd 	b.w	40597c <_vfprintf_r+0x960>
  406182:	4638      	mov	r0, r7
  406184:	9409      	str	r4, [sp, #36]	; 0x24
  406186:	f7fe fedb 	bl	404f40 <strlen>
  40618a:	950e      	str	r5, [sp, #56]	; 0x38
  40618c:	900d      	str	r0, [sp, #52]	; 0x34
  40618e:	f8cd b018 	str.w	fp, [sp, #24]
  406192:	4603      	mov	r3, r0
  406194:	f7ff ba36 	b.w	405604 <_vfprintf_r+0x5e8>
  406198:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40619c:	2300      	movs	r3, #0
  40619e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4061a2:	9309      	str	r3, [sp, #36]	; 0x24
  4061a4:	f7ff b86f 	b.w	405286 <_vfprintf_r+0x26a>
  4061a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4061aa:	9310      	str	r3, [sp, #64]	; 0x40
  4061ac:	461a      	mov	r2, r3
  4061ae:	3303      	adds	r3, #3
  4061b0:	db04      	blt.n	4061bc <_vfprintf_r+0x11a0>
  4061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061b4:	4619      	mov	r1, r3
  4061b6:	4291      	cmp	r1, r2
  4061b8:	f6bf af45 	bge.w	406046 <_vfprintf_r+0x102a>
  4061bc:	3e02      	subs	r6, #2
  4061be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4061c0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4061c4:	3b01      	subs	r3, #1
  4061c6:	2b00      	cmp	r3, #0
  4061c8:	931d      	str	r3, [sp, #116]	; 0x74
  4061ca:	bfbd      	ittte	lt
  4061cc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  4061ce:	f1c3 0301 	rsblt	r3, r3, #1
  4061d2:	222d      	movlt	r2, #45	; 0x2d
  4061d4:	222b      	movge	r2, #43	; 0x2b
  4061d6:	2b09      	cmp	r3, #9
  4061d8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4061dc:	f340 813e 	ble.w	40645c <_vfprintf_r+0x1440>
  4061e0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4061e4:	4620      	mov	r0, r4
  4061e6:	4d73      	ldr	r5, [pc, #460]	; (4063b4 <_vfprintf_r+0x1398>)
  4061e8:	e000      	b.n	4061ec <_vfprintf_r+0x11d0>
  4061ea:	4610      	mov	r0, r2
  4061ec:	fb85 1203 	smull	r1, r2, r5, r3
  4061f0:	17d9      	asrs	r1, r3, #31
  4061f2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4061f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4061fa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4061fe:	3230      	adds	r2, #48	; 0x30
  406200:	2909      	cmp	r1, #9
  406202:	f800 2c01 	strb.w	r2, [r0, #-1]
  406206:	460b      	mov	r3, r1
  406208:	f100 32ff 	add.w	r2, r0, #4294967295
  40620c:	dced      	bgt.n	4061ea <_vfprintf_r+0x11ce>
  40620e:	3330      	adds	r3, #48	; 0x30
  406210:	3802      	subs	r0, #2
  406212:	b2d9      	uxtb	r1, r3
  406214:	4284      	cmp	r4, r0
  406216:	f802 1c01 	strb.w	r1, [r2, #-1]
  40621a:	f240 8190 	bls.w	40653e <_vfprintf_r+0x1522>
  40621e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  406222:	4613      	mov	r3, r2
  406224:	e001      	b.n	40622a <_vfprintf_r+0x120e>
  406226:	f813 1b01 	ldrb.w	r1, [r3], #1
  40622a:	f800 1b01 	strb.w	r1, [r0], #1
  40622e:	42a3      	cmp	r3, r4
  406230:	d1f9      	bne.n	406226 <_vfprintf_r+0x120a>
  406232:	3301      	adds	r3, #1
  406234:	1a9b      	subs	r3, r3, r2
  406236:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40623a:	4413      	add	r3, r2
  40623c:	aa1f      	add	r2, sp, #124	; 0x7c
  40623e:	1a9b      	subs	r3, r3, r2
  406240:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406242:	9319      	str	r3, [sp, #100]	; 0x64
  406244:	2a01      	cmp	r2, #1
  406246:	4413      	add	r3, r2
  406248:	930d      	str	r3, [sp, #52]	; 0x34
  40624a:	f340 8145 	ble.w	4064d8 <_vfprintf_r+0x14bc>
  40624e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406250:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406252:	4413      	add	r3, r2
  406254:	930d      	str	r3, [sp, #52]	; 0x34
  406256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40625a:	9307      	str	r3, [sp, #28]
  40625c:	2300      	movs	r3, #0
  40625e:	9310      	str	r3, [sp, #64]	; 0x40
  406260:	e700      	b.n	406064 <_vfprintf_r+0x1048>
  406262:	aa23      	add	r2, sp, #140	; 0x8c
  406264:	990a      	ldr	r1, [sp, #40]	; 0x28
  406266:	9808      	ldr	r0, [sp, #32]
  406268:	f002 fc82 	bl	408b70 <__sprint_r>
  40626c:	2800      	cmp	r0, #0
  40626e:	f47f ac5f 	bne.w	405b30 <_vfprintf_r+0xb14>
  406272:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406274:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406278:	e4d1      	b.n	405c1e <_vfprintf_r+0xc02>
  40627a:	4623      	mov	r3, r4
  40627c:	e6d5      	b.n	40602a <_vfprintf_r+0x100e>
  40627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406280:	9710      	str	r7, [sp, #64]	; 0x40
  406282:	2b06      	cmp	r3, #6
  406284:	bf28      	it	cs
  406286:	2306      	movcs	r3, #6
  406288:	9709      	str	r7, [sp, #36]	; 0x24
  40628a:	46ba      	mov	sl, r7
  40628c:	9307      	str	r3, [sp, #28]
  40628e:	950e      	str	r5, [sp, #56]	; 0x38
  406290:	f8cd b018 	str.w	fp, [sp, #24]
  406294:	930d      	str	r3, [sp, #52]	; 0x34
  406296:	4f48      	ldr	r7, [pc, #288]	; (4063b8 <_vfprintf_r+0x139c>)
  406298:	f7fe bff2 	b.w	405280 <_vfprintf_r+0x264>
  40629c:	aa23      	add	r2, sp, #140	; 0x8c
  40629e:	990a      	ldr	r1, [sp, #40]	; 0x28
  4062a0:	9808      	ldr	r0, [sp, #32]
  4062a2:	f002 fc65 	bl	408b70 <__sprint_r>
  4062a6:	2800      	cmp	r0, #0
  4062a8:	f47f ac42 	bne.w	405b30 <_vfprintf_r+0xb14>
  4062ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4062ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4062b2:	1ad3      	subs	r3, r2, r3
  4062b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4062b8:	e5b6      	b.n	405e28 <_vfprintf_r+0xe0c>
  4062ba:	46a2      	mov	sl, r4
  4062bc:	f7ff bb18 	b.w	4058f0 <_vfprintf_r+0x8d4>
  4062c0:	a821      	add	r0, sp, #132	; 0x84
  4062c2:	a91e      	add	r1, sp, #120	; 0x78
  4062c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4062c6:	9004      	str	r0, [sp, #16]
  4062c8:	9103      	str	r1, [sp, #12]
  4062ca:	a81d      	add	r0, sp, #116	; 0x74
  4062cc:	2103      	movs	r1, #3
  4062ce:	9002      	str	r0, [sp, #8]
  4062d0:	9a07      	ldr	r2, [sp, #28]
  4062d2:	9501      	str	r5, [sp, #4]
  4062d4:	4653      	mov	r3, sl
  4062d6:	9100      	str	r1, [sp, #0]
  4062d8:	9808      	ldr	r0, [sp, #32]
  4062da:	f000 fa95 	bl	406808 <_dtoa_r>
  4062de:	4607      	mov	r7, r0
  4062e0:	1944      	adds	r4, r0, r5
  4062e2:	783b      	ldrb	r3, [r7, #0]
  4062e4:	2b30      	cmp	r3, #48	; 0x30
  4062e6:	f000 80ca 	beq.w	40647e <_vfprintf_r+0x1462>
  4062ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4062ec:	442c      	add	r4, r5
  4062ee:	e689      	b.n	406004 <_vfprintf_r+0xfe8>
  4062f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4062f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4062f4:	4413      	add	r3, r2
  4062f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4062f8:	930d      	str	r3, [sp, #52]	; 0x34
  4062fa:	2a00      	cmp	r2, #0
  4062fc:	f340 80e4 	ble.w	4064c8 <_vfprintf_r+0x14ac>
  406300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406304:	9307      	str	r3, [sp, #28]
  406306:	2667      	movs	r6, #103	; 0x67
  406308:	e6ac      	b.n	406064 <_vfprintf_r+0x1048>
  40630a:	2b00      	cmp	r3, #0
  40630c:	f340 80fb 	ble.w	406506 <_vfprintf_r+0x14ea>
  406310:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406312:	2a00      	cmp	r2, #0
  406314:	f040 80ce 	bne.w	4064b4 <_vfprintf_r+0x1498>
  406318:	f01b 0f01 	tst.w	fp, #1
  40631c:	f040 80ca 	bne.w	4064b4 <_vfprintf_r+0x1498>
  406320:	9307      	str	r3, [sp, #28]
  406322:	930d      	str	r3, [sp, #52]	; 0x34
  406324:	e69e      	b.n	406064 <_vfprintf_r+0x1048>
  406326:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406328:	9307      	str	r3, [sp, #28]
  40632a:	930d      	str	r3, [sp, #52]	; 0x34
  40632c:	9009      	str	r0, [sp, #36]	; 0x24
  40632e:	950e      	str	r5, [sp, #56]	; 0x38
  406330:	f8cd b018 	str.w	fp, [sp, #24]
  406334:	9010      	str	r0, [sp, #64]	; 0x40
  406336:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40633a:	f7fe bfa1 	b.w	405280 <_vfprintf_r+0x264>
  40633e:	aa23      	add	r2, sp, #140	; 0x8c
  406340:	990a      	ldr	r1, [sp, #40]	; 0x28
  406342:	9808      	ldr	r0, [sp, #32]
  406344:	f002 fc14 	bl	408b70 <__sprint_r>
  406348:	2800      	cmp	r0, #0
  40634a:	f47f abf1 	bne.w	405b30 <_vfprintf_r+0xb14>
  40634e:	991d      	ldr	r1, [sp, #116]	; 0x74
  406350:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406352:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406356:	e6d0      	b.n	4060fa <_vfprintf_r+0x10de>
  406358:	2e47      	cmp	r6, #71	; 0x47
  40635a:	f47f ae52 	bne.w	406002 <_vfprintf_r+0xfe6>
  40635e:	f01b 0f01 	tst.w	fp, #1
  406362:	f000 80da 	beq.w	40651a <_vfprintf_r+0x14fe>
  406366:	2e46      	cmp	r6, #70	; 0x46
  406368:	eb07 0405 	add.w	r4, r7, r5
  40636c:	d0b9      	beq.n	4062e2 <_vfprintf_r+0x12c6>
  40636e:	e649      	b.n	406004 <_vfprintf_r+0xfe8>
  406370:	a821      	add	r0, sp, #132	; 0x84
  406372:	a91e      	add	r1, sp, #120	; 0x78
  406374:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406376:	9004      	str	r0, [sp, #16]
  406378:	9103      	str	r1, [sp, #12]
  40637a:	a81d      	add	r0, sp, #116	; 0x74
  40637c:	2103      	movs	r1, #3
  40637e:	9002      	str	r0, [sp, #8]
  406380:	9a07      	ldr	r2, [sp, #28]
  406382:	9401      	str	r4, [sp, #4]
  406384:	4653      	mov	r3, sl
  406386:	9100      	str	r1, [sp, #0]
  406388:	9808      	ldr	r0, [sp, #32]
  40638a:	f000 fa3d 	bl	406808 <_dtoa_r>
  40638e:	4625      	mov	r5, r4
  406390:	4607      	mov	r7, r0
  406392:	e7e8      	b.n	406366 <_vfprintf_r+0x134a>
  406394:	2300      	movs	r3, #0
  406396:	9309      	str	r3, [sp, #36]	; 0x24
  406398:	f7fe bec1 	b.w	40511e <_vfprintf_r+0x102>
  40639c:	424e      	negs	r6, r1
  40639e:	3110      	adds	r1, #16
  4063a0:	4d06      	ldr	r5, [pc, #24]	; (4063bc <_vfprintf_r+0x13a0>)
  4063a2:	da43      	bge.n	40642c <_vfprintf_r+0x1410>
  4063a4:	2410      	movs	r4, #16
  4063a6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4063aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4063ae:	e00c      	b.n	4063ca <_vfprintf_r+0x13ae>
  4063b0:	00409290 	.word	0x00409290
  4063b4:	66666667 	.word	0x66666667
  4063b8:	00409288 	.word	0x00409288
  4063bc:	004092a4 	.word	0x004092a4
  4063c0:	f108 0808 	add.w	r8, r8, #8
  4063c4:	3e10      	subs	r6, #16
  4063c6:	2e10      	cmp	r6, #16
  4063c8:	dd30      	ble.n	40642c <_vfprintf_r+0x1410>
  4063ca:	3301      	adds	r3, #1
  4063cc:	3210      	adds	r2, #16
  4063ce:	2b07      	cmp	r3, #7
  4063d0:	9225      	str	r2, [sp, #148]	; 0x94
  4063d2:	9324      	str	r3, [sp, #144]	; 0x90
  4063d4:	f8c8 5000 	str.w	r5, [r8]
  4063d8:	f8c8 4004 	str.w	r4, [r8, #4]
  4063dc:	ddf0      	ble.n	4063c0 <_vfprintf_r+0x13a4>
  4063de:	aa23      	add	r2, sp, #140	; 0x8c
  4063e0:	4659      	mov	r1, fp
  4063e2:	4650      	mov	r0, sl
  4063e4:	f002 fbc4 	bl	408b70 <__sprint_r>
  4063e8:	2800      	cmp	r0, #0
  4063ea:	f47f aeba 	bne.w	406162 <_vfprintf_r+0x1146>
  4063ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4063f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063f2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4063f6:	e7e5      	b.n	4063c4 <_vfprintf_r+0x13a8>
  4063f8:	aa23      	add	r2, sp, #140	; 0x8c
  4063fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4063fc:	9808      	ldr	r0, [sp, #32]
  4063fe:	f002 fbb7 	bl	408b70 <__sprint_r>
  406402:	2800      	cmp	r0, #0
  406404:	f47f ab94 	bne.w	405b30 <_vfprintf_r+0xb14>
  406408:	991d      	ldr	r1, [sp, #116]	; 0x74
  40640a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40640c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40640e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406412:	e68a      	b.n	40612a <_vfprintf_r+0x110e>
  406414:	9808      	ldr	r0, [sp, #32]
  406416:	aa23      	add	r2, sp, #140	; 0x8c
  406418:	4651      	mov	r1, sl
  40641a:	f002 fba9 	bl	408b70 <__sprint_r>
  40641e:	2800      	cmp	r0, #0
  406420:	f43f aa64 	beq.w	4058ec <_vfprintf_r+0x8d0>
  406424:	f7ff ba64 	b.w	4058f0 <_vfprintf_r+0x8d4>
  406428:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40642a:	e5fe      	b.n	40602a <_vfprintf_r+0x100e>
  40642c:	3301      	adds	r3, #1
  40642e:	4432      	add	r2, r6
  406430:	2b07      	cmp	r3, #7
  406432:	e888 0060 	stmia.w	r8, {r5, r6}
  406436:	9225      	str	r2, [sp, #148]	; 0x94
  406438:	9324      	str	r3, [sp, #144]	; 0x90
  40643a:	f108 0808 	add.w	r8, r8, #8
  40643e:	f77f ae77 	ble.w	406130 <_vfprintf_r+0x1114>
  406442:	aa23      	add	r2, sp, #140	; 0x8c
  406444:	990a      	ldr	r1, [sp, #40]	; 0x28
  406446:	9808      	ldr	r0, [sp, #32]
  406448:	f002 fb92 	bl	408b70 <__sprint_r>
  40644c:	2800      	cmp	r0, #0
  40644e:	f47f ab6f 	bne.w	405b30 <_vfprintf_r+0xb14>
  406452:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406454:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406456:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40645a:	e669      	b.n	406130 <_vfprintf_r+0x1114>
  40645c:	3330      	adds	r3, #48	; 0x30
  40645e:	2230      	movs	r2, #48	; 0x30
  406460:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  406464:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  406468:	ab20      	add	r3, sp, #128	; 0x80
  40646a:	e6e7      	b.n	40623c <_vfprintf_r+0x1220>
  40646c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40646e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406470:	4413      	add	r3, r2
  406472:	930d      	str	r3, [sp, #52]	; 0x34
  406474:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406478:	9307      	str	r3, [sp, #28]
  40647a:	2667      	movs	r6, #103	; 0x67
  40647c:	e5f2      	b.n	406064 <_vfprintf_r+0x1048>
  40647e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406480:	9807      	ldr	r0, [sp, #28]
  406482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406484:	4651      	mov	r1, sl
  406486:	f7fd fe35 	bl	4040f4 <__aeabi_dcmpeq>
  40648a:	2800      	cmp	r0, #0
  40648c:	f47f af2d 	bne.w	4062ea <_vfprintf_r+0x12ce>
  406490:	f1c5 0501 	rsb	r5, r5, #1
  406494:	951d      	str	r5, [sp, #116]	; 0x74
  406496:	442c      	add	r4, r5
  406498:	e5b4      	b.n	406004 <_vfprintf_r+0xfe8>
  40649a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40649c:	4f33      	ldr	r7, [pc, #204]	; (40656c <_vfprintf_r+0x1550>)
  40649e:	2b00      	cmp	r3, #0
  4064a0:	bfb6      	itet	lt
  4064a2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4064a6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4064aa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4064ae:	4b30      	ldr	r3, [pc, #192]	; (406570 <_vfprintf_r+0x1554>)
  4064b0:	f7ff b9d1 	b.w	405856 <_vfprintf_r+0x83a>
  4064b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4064b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4064b8:	4413      	add	r3, r2
  4064ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4064bc:	441a      	add	r2, r3
  4064be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4064c2:	920d      	str	r2, [sp, #52]	; 0x34
  4064c4:	9307      	str	r3, [sp, #28]
  4064c6:	e5cd      	b.n	406064 <_vfprintf_r+0x1048>
  4064c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4064ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4064cc:	f1c3 0301 	rsb	r3, r3, #1
  4064d0:	441a      	add	r2, r3
  4064d2:	4613      	mov	r3, r2
  4064d4:	920d      	str	r2, [sp, #52]	; 0x34
  4064d6:	e713      	b.n	406300 <_vfprintf_r+0x12e4>
  4064d8:	f01b 0301 	ands.w	r3, fp, #1
  4064dc:	9310      	str	r3, [sp, #64]	; 0x40
  4064de:	f47f aeb6 	bne.w	40624e <_vfprintf_r+0x1232>
  4064e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4064e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4064e8:	9307      	str	r3, [sp, #28]
  4064ea:	e5bb      	b.n	406064 <_vfprintf_r+0x1048>
  4064ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4064ee:	f899 6001 	ldrb.w	r6, [r9, #1]
  4064f2:	6823      	ldr	r3, [r4, #0]
  4064f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4064f8:	9309      	str	r3, [sp, #36]	; 0x24
  4064fa:	4623      	mov	r3, r4
  4064fc:	3304      	adds	r3, #4
  4064fe:	4681      	mov	r9, r0
  406500:	930e      	str	r3, [sp, #56]	; 0x38
  406502:	f7fe be0a 	b.w	40511a <_vfprintf_r+0xfe>
  406506:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406508:	b913      	cbnz	r3, 406510 <_vfprintf_r+0x14f4>
  40650a:	f01b 0f01 	tst.w	fp, #1
  40650e:	d002      	beq.n	406516 <_vfprintf_r+0x14fa>
  406510:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406512:	3301      	adds	r3, #1
  406514:	e7d1      	b.n	4064ba <_vfprintf_r+0x149e>
  406516:	2301      	movs	r3, #1
  406518:	e702      	b.n	406320 <_vfprintf_r+0x1304>
  40651a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40651c:	1bdb      	subs	r3, r3, r7
  40651e:	9311      	str	r3, [sp, #68]	; 0x44
  406520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406522:	2b47      	cmp	r3, #71	; 0x47
  406524:	f43f ae40 	beq.w	4061a8 <_vfprintf_r+0x118c>
  406528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40652a:	9310      	str	r3, [sp, #64]	; 0x40
  40652c:	e647      	b.n	4061be <_vfprintf_r+0x11a2>
  40652e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406532:	f7ff b81d 	b.w	405570 <_vfprintf_r+0x554>
  406536:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40653a:	f7ff b918 	b.w	40576e <_vfprintf_r+0x752>
  40653e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  406542:	e67b      	b.n	40623c <_vfprintf_r+0x1220>
  406544:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406548:	f7ff b866 	b.w	405618 <_vfprintf_r+0x5fc>
  40654c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406550:	f7ff b9ac 	b.w	4058ac <_vfprintf_r+0x890>
  406554:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406558:	f7ff b934 	b.w	4057c4 <_vfprintf_r+0x7a8>
  40655c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406560:	f7ff b8b0 	b.w	4056c4 <_vfprintf_r+0x6a8>
  406564:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406568:	f7ff b945 	b.w	4057f6 <_vfprintf_r+0x7da>
  40656c:	0040925c 	.word	0x0040925c
  406570:	00409258 	.word	0x00409258

00406574 <__sbprintf>:
  406574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406578:	460c      	mov	r4, r1
  40657a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40657e:	8989      	ldrh	r1, [r1, #12]
  406580:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406582:	89e5      	ldrh	r5, [r4, #14]
  406584:	9619      	str	r6, [sp, #100]	; 0x64
  406586:	f021 0102 	bic.w	r1, r1, #2
  40658a:	4606      	mov	r6, r0
  40658c:	69e0      	ldr	r0, [r4, #28]
  40658e:	f8ad 100c 	strh.w	r1, [sp, #12]
  406592:	4617      	mov	r7, r2
  406594:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406598:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40659a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40659e:	4698      	mov	r8, r3
  4065a0:	ad1a      	add	r5, sp, #104	; 0x68
  4065a2:	2300      	movs	r3, #0
  4065a4:	9007      	str	r0, [sp, #28]
  4065a6:	a816      	add	r0, sp, #88	; 0x58
  4065a8:	9209      	str	r2, [sp, #36]	; 0x24
  4065aa:	9306      	str	r3, [sp, #24]
  4065ac:	9500      	str	r5, [sp, #0]
  4065ae:	9504      	str	r5, [sp, #16]
  4065b0:	9102      	str	r1, [sp, #8]
  4065b2:	9105      	str	r1, [sp, #20]
  4065b4:	f001 fc82 	bl	407ebc <__retarget_lock_init_recursive>
  4065b8:	4643      	mov	r3, r8
  4065ba:	463a      	mov	r2, r7
  4065bc:	4669      	mov	r1, sp
  4065be:	4630      	mov	r0, r6
  4065c0:	f7fe fd2c 	bl	40501c <_vfprintf_r>
  4065c4:	1e05      	subs	r5, r0, #0
  4065c6:	db07      	blt.n	4065d8 <__sbprintf+0x64>
  4065c8:	4630      	mov	r0, r6
  4065ca:	4669      	mov	r1, sp
  4065cc:	f001 f8e6 	bl	40779c <_fflush_r>
  4065d0:	2800      	cmp	r0, #0
  4065d2:	bf18      	it	ne
  4065d4:	f04f 35ff 	movne.w	r5, #4294967295
  4065d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4065dc:	065b      	lsls	r3, r3, #25
  4065de:	d503      	bpl.n	4065e8 <__sbprintf+0x74>
  4065e0:	89a3      	ldrh	r3, [r4, #12]
  4065e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4065e6:	81a3      	strh	r3, [r4, #12]
  4065e8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4065ea:	f001 fc69 	bl	407ec0 <__retarget_lock_close_recursive>
  4065ee:	4628      	mov	r0, r5
  4065f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004065f8 <__swsetup_r>:
  4065f8:	b538      	push	{r3, r4, r5, lr}
  4065fa:	4b30      	ldr	r3, [pc, #192]	; (4066bc <__swsetup_r+0xc4>)
  4065fc:	681b      	ldr	r3, [r3, #0]
  4065fe:	4605      	mov	r5, r0
  406600:	460c      	mov	r4, r1
  406602:	b113      	cbz	r3, 40660a <__swsetup_r+0x12>
  406604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406606:	2a00      	cmp	r2, #0
  406608:	d038      	beq.n	40667c <__swsetup_r+0x84>
  40660a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40660e:	b293      	uxth	r3, r2
  406610:	0718      	lsls	r0, r3, #28
  406612:	d50c      	bpl.n	40662e <__swsetup_r+0x36>
  406614:	6920      	ldr	r0, [r4, #16]
  406616:	b1a8      	cbz	r0, 406644 <__swsetup_r+0x4c>
  406618:	f013 0201 	ands.w	r2, r3, #1
  40661c:	d01e      	beq.n	40665c <__swsetup_r+0x64>
  40661e:	6963      	ldr	r3, [r4, #20]
  406620:	2200      	movs	r2, #0
  406622:	425b      	negs	r3, r3
  406624:	61a3      	str	r3, [r4, #24]
  406626:	60a2      	str	r2, [r4, #8]
  406628:	b1f0      	cbz	r0, 406668 <__swsetup_r+0x70>
  40662a:	2000      	movs	r0, #0
  40662c:	bd38      	pop	{r3, r4, r5, pc}
  40662e:	06d9      	lsls	r1, r3, #27
  406630:	d53c      	bpl.n	4066ac <__swsetup_r+0xb4>
  406632:	0758      	lsls	r0, r3, #29
  406634:	d426      	bmi.n	406684 <__swsetup_r+0x8c>
  406636:	6920      	ldr	r0, [r4, #16]
  406638:	f042 0308 	orr.w	r3, r2, #8
  40663c:	81a3      	strh	r3, [r4, #12]
  40663e:	b29b      	uxth	r3, r3
  406640:	2800      	cmp	r0, #0
  406642:	d1e9      	bne.n	406618 <__swsetup_r+0x20>
  406644:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406648:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40664c:	d0e4      	beq.n	406618 <__swsetup_r+0x20>
  40664e:	4628      	mov	r0, r5
  406650:	4621      	mov	r1, r4
  406652:	f001 fc69 	bl	407f28 <__smakebuf_r>
  406656:	89a3      	ldrh	r3, [r4, #12]
  406658:	6920      	ldr	r0, [r4, #16]
  40665a:	e7dd      	b.n	406618 <__swsetup_r+0x20>
  40665c:	0799      	lsls	r1, r3, #30
  40665e:	bf58      	it	pl
  406660:	6962      	ldrpl	r2, [r4, #20]
  406662:	60a2      	str	r2, [r4, #8]
  406664:	2800      	cmp	r0, #0
  406666:	d1e0      	bne.n	40662a <__swsetup_r+0x32>
  406668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40666c:	061a      	lsls	r2, r3, #24
  40666e:	d5dd      	bpl.n	40662c <__swsetup_r+0x34>
  406670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406674:	81a3      	strh	r3, [r4, #12]
  406676:	f04f 30ff 	mov.w	r0, #4294967295
  40667a:	bd38      	pop	{r3, r4, r5, pc}
  40667c:	4618      	mov	r0, r3
  40667e:	f001 f8e5 	bl	40784c <__sinit>
  406682:	e7c2      	b.n	40660a <__swsetup_r+0x12>
  406684:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406686:	b151      	cbz	r1, 40669e <__swsetup_r+0xa6>
  406688:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40668c:	4299      	cmp	r1, r3
  40668e:	d004      	beq.n	40669a <__swsetup_r+0xa2>
  406690:	4628      	mov	r0, r5
  406692:	f001 f97d 	bl	407990 <_free_r>
  406696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40669a:	2300      	movs	r3, #0
  40669c:	6323      	str	r3, [r4, #48]	; 0x30
  40669e:	2300      	movs	r3, #0
  4066a0:	6920      	ldr	r0, [r4, #16]
  4066a2:	6063      	str	r3, [r4, #4]
  4066a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4066a8:	6020      	str	r0, [r4, #0]
  4066aa:	e7c5      	b.n	406638 <__swsetup_r+0x40>
  4066ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4066b0:	2309      	movs	r3, #9
  4066b2:	602b      	str	r3, [r5, #0]
  4066b4:	f04f 30ff 	mov.w	r0, #4294967295
  4066b8:	81a2      	strh	r2, [r4, #12]
  4066ba:	bd38      	pop	{r3, r4, r5, pc}
  4066bc:	20400014 	.word	0x20400014

004066c0 <register_fini>:
  4066c0:	4b02      	ldr	r3, [pc, #8]	; (4066cc <register_fini+0xc>)
  4066c2:	b113      	cbz	r3, 4066ca <register_fini+0xa>
  4066c4:	4802      	ldr	r0, [pc, #8]	; (4066d0 <register_fini+0x10>)
  4066c6:	f000 b805 	b.w	4066d4 <atexit>
  4066ca:	4770      	bx	lr
  4066cc:	00000000 	.word	0x00000000
  4066d0:	004078bd 	.word	0x004078bd

004066d4 <atexit>:
  4066d4:	2300      	movs	r3, #0
  4066d6:	4601      	mov	r1, r0
  4066d8:	461a      	mov	r2, r3
  4066da:	4618      	mov	r0, r3
  4066dc:	f002 ba68 	b.w	408bb0 <__register_exitproc>

004066e0 <quorem>:
  4066e0:	6902      	ldr	r2, [r0, #16]
  4066e2:	690b      	ldr	r3, [r1, #16]
  4066e4:	4293      	cmp	r3, r2
  4066e6:	f300 808d 	bgt.w	406804 <quorem+0x124>
  4066ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066ee:	f103 38ff 	add.w	r8, r3, #4294967295
  4066f2:	f101 0714 	add.w	r7, r1, #20
  4066f6:	f100 0b14 	add.w	fp, r0, #20
  4066fa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4066fe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406702:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406706:	b083      	sub	sp, #12
  406708:	3201      	adds	r2, #1
  40670a:	fbb3 f9f2 	udiv	r9, r3, r2
  40670e:	eb0b 0304 	add.w	r3, fp, r4
  406712:	9400      	str	r4, [sp, #0]
  406714:	eb07 0a04 	add.w	sl, r7, r4
  406718:	9301      	str	r3, [sp, #4]
  40671a:	f1b9 0f00 	cmp.w	r9, #0
  40671e:	d039      	beq.n	406794 <quorem+0xb4>
  406720:	2500      	movs	r5, #0
  406722:	462e      	mov	r6, r5
  406724:	46bc      	mov	ip, r7
  406726:	46de      	mov	lr, fp
  406728:	f85c 4b04 	ldr.w	r4, [ip], #4
  40672c:	f8de 3000 	ldr.w	r3, [lr]
  406730:	b2a2      	uxth	r2, r4
  406732:	fb09 5502 	mla	r5, r9, r2, r5
  406736:	0c22      	lsrs	r2, r4, #16
  406738:	0c2c      	lsrs	r4, r5, #16
  40673a:	fb09 4202 	mla	r2, r9, r2, r4
  40673e:	b2ad      	uxth	r5, r5
  406740:	1b75      	subs	r5, r6, r5
  406742:	b296      	uxth	r6, r2
  406744:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406748:	fa15 f383 	uxtah	r3, r5, r3
  40674c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406750:	b29b      	uxth	r3, r3
  406752:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406756:	45e2      	cmp	sl, ip
  406758:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40675c:	f84e 3b04 	str.w	r3, [lr], #4
  406760:	ea4f 4626 	mov.w	r6, r6, asr #16
  406764:	d2e0      	bcs.n	406728 <quorem+0x48>
  406766:	9b00      	ldr	r3, [sp, #0]
  406768:	f85b 3003 	ldr.w	r3, [fp, r3]
  40676c:	b993      	cbnz	r3, 406794 <quorem+0xb4>
  40676e:	9c01      	ldr	r4, [sp, #4]
  406770:	1f23      	subs	r3, r4, #4
  406772:	459b      	cmp	fp, r3
  406774:	d20c      	bcs.n	406790 <quorem+0xb0>
  406776:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40677a:	b94b      	cbnz	r3, 406790 <quorem+0xb0>
  40677c:	f1a4 0308 	sub.w	r3, r4, #8
  406780:	e002      	b.n	406788 <quorem+0xa8>
  406782:	681a      	ldr	r2, [r3, #0]
  406784:	3b04      	subs	r3, #4
  406786:	b91a      	cbnz	r2, 406790 <quorem+0xb0>
  406788:	459b      	cmp	fp, r3
  40678a:	f108 38ff 	add.w	r8, r8, #4294967295
  40678e:	d3f8      	bcc.n	406782 <quorem+0xa2>
  406790:	f8c0 8010 	str.w	r8, [r0, #16]
  406794:	4604      	mov	r4, r0
  406796:	f001 fec5 	bl	408524 <__mcmp>
  40679a:	2800      	cmp	r0, #0
  40679c:	db2e      	blt.n	4067fc <quorem+0x11c>
  40679e:	f109 0901 	add.w	r9, r9, #1
  4067a2:	465d      	mov	r5, fp
  4067a4:	2300      	movs	r3, #0
  4067a6:	f857 1b04 	ldr.w	r1, [r7], #4
  4067aa:	6828      	ldr	r0, [r5, #0]
  4067ac:	b28a      	uxth	r2, r1
  4067ae:	1a9a      	subs	r2, r3, r2
  4067b0:	0c0b      	lsrs	r3, r1, #16
  4067b2:	fa12 f280 	uxtah	r2, r2, r0
  4067b6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4067ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4067be:	b292      	uxth	r2, r2
  4067c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4067c4:	45ba      	cmp	sl, r7
  4067c6:	f845 2b04 	str.w	r2, [r5], #4
  4067ca:	ea4f 4323 	mov.w	r3, r3, asr #16
  4067ce:	d2ea      	bcs.n	4067a6 <quorem+0xc6>
  4067d0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4067d4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4067d8:	b982      	cbnz	r2, 4067fc <quorem+0x11c>
  4067da:	1f1a      	subs	r2, r3, #4
  4067dc:	4593      	cmp	fp, r2
  4067de:	d20b      	bcs.n	4067f8 <quorem+0x118>
  4067e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4067e4:	b942      	cbnz	r2, 4067f8 <quorem+0x118>
  4067e6:	3b08      	subs	r3, #8
  4067e8:	e002      	b.n	4067f0 <quorem+0x110>
  4067ea:	681a      	ldr	r2, [r3, #0]
  4067ec:	3b04      	subs	r3, #4
  4067ee:	b91a      	cbnz	r2, 4067f8 <quorem+0x118>
  4067f0:	459b      	cmp	fp, r3
  4067f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4067f6:	d3f8      	bcc.n	4067ea <quorem+0x10a>
  4067f8:	f8c4 8010 	str.w	r8, [r4, #16]
  4067fc:	4648      	mov	r0, r9
  4067fe:	b003      	add	sp, #12
  406800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406804:	2000      	movs	r0, #0
  406806:	4770      	bx	lr

00406808 <_dtoa_r>:
  406808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40680c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40680e:	b09b      	sub	sp, #108	; 0x6c
  406810:	4604      	mov	r4, r0
  406812:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406814:	4692      	mov	sl, r2
  406816:	469b      	mov	fp, r3
  406818:	b141      	cbz	r1, 40682c <_dtoa_r+0x24>
  40681a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40681c:	604a      	str	r2, [r1, #4]
  40681e:	2301      	movs	r3, #1
  406820:	4093      	lsls	r3, r2
  406822:	608b      	str	r3, [r1, #8]
  406824:	f001 fca6 	bl	408174 <_Bfree>
  406828:	2300      	movs	r3, #0
  40682a:	6423      	str	r3, [r4, #64]	; 0x40
  40682c:	f1bb 0f00 	cmp.w	fp, #0
  406830:	465d      	mov	r5, fp
  406832:	db35      	blt.n	4068a0 <_dtoa_r+0x98>
  406834:	2300      	movs	r3, #0
  406836:	6033      	str	r3, [r6, #0]
  406838:	4b9d      	ldr	r3, [pc, #628]	; (406ab0 <_dtoa_r+0x2a8>)
  40683a:	43ab      	bics	r3, r5
  40683c:	d015      	beq.n	40686a <_dtoa_r+0x62>
  40683e:	4650      	mov	r0, sl
  406840:	4659      	mov	r1, fp
  406842:	2200      	movs	r2, #0
  406844:	2300      	movs	r3, #0
  406846:	f7fd fc55 	bl	4040f4 <__aeabi_dcmpeq>
  40684a:	4680      	mov	r8, r0
  40684c:	2800      	cmp	r0, #0
  40684e:	d02d      	beq.n	4068ac <_dtoa_r+0xa4>
  406850:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406852:	2301      	movs	r3, #1
  406854:	6013      	str	r3, [r2, #0]
  406856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406858:	2b00      	cmp	r3, #0
  40685a:	f000 80bd 	beq.w	4069d8 <_dtoa_r+0x1d0>
  40685e:	4895      	ldr	r0, [pc, #596]	; (406ab4 <_dtoa_r+0x2ac>)
  406860:	6018      	str	r0, [r3, #0]
  406862:	3801      	subs	r0, #1
  406864:	b01b      	add	sp, #108	; 0x6c
  406866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40686a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40686c:	f242 730f 	movw	r3, #9999	; 0x270f
  406870:	6013      	str	r3, [r2, #0]
  406872:	f1ba 0f00 	cmp.w	sl, #0
  406876:	d10d      	bne.n	406894 <_dtoa_r+0x8c>
  406878:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40687c:	b955      	cbnz	r5, 406894 <_dtoa_r+0x8c>
  40687e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406880:	488d      	ldr	r0, [pc, #564]	; (406ab8 <_dtoa_r+0x2b0>)
  406882:	2b00      	cmp	r3, #0
  406884:	d0ee      	beq.n	406864 <_dtoa_r+0x5c>
  406886:	f100 0308 	add.w	r3, r0, #8
  40688a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40688c:	6013      	str	r3, [r2, #0]
  40688e:	b01b      	add	sp, #108	; 0x6c
  406890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406896:	4889      	ldr	r0, [pc, #548]	; (406abc <_dtoa_r+0x2b4>)
  406898:	2b00      	cmp	r3, #0
  40689a:	d0e3      	beq.n	406864 <_dtoa_r+0x5c>
  40689c:	1cc3      	adds	r3, r0, #3
  40689e:	e7f4      	b.n	40688a <_dtoa_r+0x82>
  4068a0:	2301      	movs	r3, #1
  4068a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4068a6:	6033      	str	r3, [r6, #0]
  4068a8:	46ab      	mov	fp, r5
  4068aa:	e7c5      	b.n	406838 <_dtoa_r+0x30>
  4068ac:	aa18      	add	r2, sp, #96	; 0x60
  4068ae:	ab19      	add	r3, sp, #100	; 0x64
  4068b0:	9201      	str	r2, [sp, #4]
  4068b2:	9300      	str	r3, [sp, #0]
  4068b4:	4652      	mov	r2, sl
  4068b6:	465b      	mov	r3, fp
  4068b8:	4620      	mov	r0, r4
  4068ba:	f001 fed3 	bl	408664 <__d2b>
  4068be:	0d2b      	lsrs	r3, r5, #20
  4068c0:	4681      	mov	r9, r0
  4068c2:	d071      	beq.n	4069a8 <_dtoa_r+0x1a0>
  4068c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4068c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4068cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4068ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4068d2:	4650      	mov	r0, sl
  4068d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4068d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4068dc:	2200      	movs	r2, #0
  4068de:	4b78      	ldr	r3, [pc, #480]	; (406ac0 <_dtoa_r+0x2b8>)
  4068e0:	f7fc ffec 	bl	4038bc <__aeabi_dsub>
  4068e4:	a36c      	add	r3, pc, #432	; (adr r3, 406a98 <_dtoa_r+0x290>)
  4068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4068ea:	f7fd f99b 	bl	403c24 <__aeabi_dmul>
  4068ee:	a36c      	add	r3, pc, #432	; (adr r3, 406aa0 <_dtoa_r+0x298>)
  4068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4068f4:	f7fc ffe4 	bl	4038c0 <__adddf3>
  4068f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4068fc:	4630      	mov	r0, r6
  4068fe:	f7fd f92b 	bl	403b58 <__aeabi_i2d>
  406902:	a369      	add	r3, pc, #420	; (adr r3, 406aa8 <_dtoa_r+0x2a0>)
  406904:	e9d3 2300 	ldrd	r2, r3, [r3]
  406908:	f7fd f98c 	bl	403c24 <__aeabi_dmul>
  40690c:	4602      	mov	r2, r0
  40690e:	460b      	mov	r3, r1
  406910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406914:	f7fc ffd4 	bl	4038c0 <__adddf3>
  406918:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40691c:	f002 fbee 	bl	4090fc <__aeabi_d2iz>
  406920:	2200      	movs	r2, #0
  406922:	9002      	str	r0, [sp, #8]
  406924:	2300      	movs	r3, #0
  406926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40692a:	f7fd fbed 	bl	404108 <__aeabi_dcmplt>
  40692e:	2800      	cmp	r0, #0
  406930:	f040 8173 	bne.w	406c1a <_dtoa_r+0x412>
  406934:	9d02      	ldr	r5, [sp, #8]
  406936:	2d16      	cmp	r5, #22
  406938:	f200 815d 	bhi.w	406bf6 <_dtoa_r+0x3ee>
  40693c:	4b61      	ldr	r3, [pc, #388]	; (406ac4 <_dtoa_r+0x2bc>)
  40693e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406942:	e9d3 0100 	ldrd	r0, r1, [r3]
  406946:	4652      	mov	r2, sl
  406948:	465b      	mov	r3, fp
  40694a:	f7fd fbfb 	bl	404144 <__aeabi_dcmpgt>
  40694e:	2800      	cmp	r0, #0
  406950:	f000 81c5 	beq.w	406cde <_dtoa_r+0x4d6>
  406954:	1e6b      	subs	r3, r5, #1
  406956:	9302      	str	r3, [sp, #8]
  406958:	2300      	movs	r3, #0
  40695a:	930e      	str	r3, [sp, #56]	; 0x38
  40695c:	1bbf      	subs	r7, r7, r6
  40695e:	1e7b      	subs	r3, r7, #1
  406960:	9306      	str	r3, [sp, #24]
  406962:	f100 8154 	bmi.w	406c0e <_dtoa_r+0x406>
  406966:	2300      	movs	r3, #0
  406968:	9308      	str	r3, [sp, #32]
  40696a:	9b02      	ldr	r3, [sp, #8]
  40696c:	2b00      	cmp	r3, #0
  40696e:	f2c0 8145 	blt.w	406bfc <_dtoa_r+0x3f4>
  406972:	9a06      	ldr	r2, [sp, #24]
  406974:	930d      	str	r3, [sp, #52]	; 0x34
  406976:	4611      	mov	r1, r2
  406978:	4419      	add	r1, r3
  40697a:	2300      	movs	r3, #0
  40697c:	9106      	str	r1, [sp, #24]
  40697e:	930c      	str	r3, [sp, #48]	; 0x30
  406980:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406982:	2b09      	cmp	r3, #9
  406984:	d82a      	bhi.n	4069dc <_dtoa_r+0x1d4>
  406986:	2b05      	cmp	r3, #5
  406988:	f340 865b 	ble.w	407642 <_dtoa_r+0xe3a>
  40698c:	3b04      	subs	r3, #4
  40698e:	9324      	str	r3, [sp, #144]	; 0x90
  406990:	2500      	movs	r5, #0
  406992:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406994:	3b02      	subs	r3, #2
  406996:	2b03      	cmp	r3, #3
  406998:	f200 8642 	bhi.w	407620 <_dtoa_r+0xe18>
  40699c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4069a0:	02c903d4 	.word	0x02c903d4
  4069a4:	046103df 	.word	0x046103df
  4069a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4069aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4069ac:	443e      	add	r6, r7
  4069ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4069b2:	2b20      	cmp	r3, #32
  4069b4:	f340 818e 	ble.w	406cd4 <_dtoa_r+0x4cc>
  4069b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4069bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4069c0:	409d      	lsls	r5, r3
  4069c2:	fa2a f000 	lsr.w	r0, sl, r0
  4069c6:	4328      	orrs	r0, r5
  4069c8:	f7fd f8b6 	bl	403b38 <__aeabi_ui2d>
  4069cc:	2301      	movs	r3, #1
  4069ce:	3e01      	subs	r6, #1
  4069d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4069d4:	9314      	str	r3, [sp, #80]	; 0x50
  4069d6:	e781      	b.n	4068dc <_dtoa_r+0xd4>
  4069d8:	483b      	ldr	r0, [pc, #236]	; (406ac8 <_dtoa_r+0x2c0>)
  4069da:	e743      	b.n	406864 <_dtoa_r+0x5c>
  4069dc:	2100      	movs	r1, #0
  4069de:	6461      	str	r1, [r4, #68]	; 0x44
  4069e0:	4620      	mov	r0, r4
  4069e2:	9125      	str	r1, [sp, #148]	; 0x94
  4069e4:	f001 fba0 	bl	408128 <_Balloc>
  4069e8:	f04f 33ff 	mov.w	r3, #4294967295
  4069ec:	930a      	str	r3, [sp, #40]	; 0x28
  4069ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4069f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4069f2:	2301      	movs	r3, #1
  4069f4:	9004      	str	r0, [sp, #16]
  4069f6:	6420      	str	r0, [r4, #64]	; 0x40
  4069f8:	9224      	str	r2, [sp, #144]	; 0x90
  4069fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4069fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4069fe:	2b00      	cmp	r3, #0
  406a00:	f2c0 80d9 	blt.w	406bb6 <_dtoa_r+0x3ae>
  406a04:	9a02      	ldr	r2, [sp, #8]
  406a06:	2a0e      	cmp	r2, #14
  406a08:	f300 80d5 	bgt.w	406bb6 <_dtoa_r+0x3ae>
  406a0c:	4b2d      	ldr	r3, [pc, #180]	; (406ac4 <_dtoa_r+0x2bc>)
  406a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406a12:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a16:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406a1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406a1c:	2b00      	cmp	r3, #0
  406a1e:	f2c0 83ba 	blt.w	407196 <_dtoa_r+0x98e>
  406a22:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406a26:	4650      	mov	r0, sl
  406a28:	462a      	mov	r2, r5
  406a2a:	4633      	mov	r3, r6
  406a2c:	4659      	mov	r1, fp
  406a2e:	f7fd fa23 	bl	403e78 <__aeabi_ddiv>
  406a32:	f002 fb63 	bl	4090fc <__aeabi_d2iz>
  406a36:	4680      	mov	r8, r0
  406a38:	f7fd f88e 	bl	403b58 <__aeabi_i2d>
  406a3c:	462a      	mov	r2, r5
  406a3e:	4633      	mov	r3, r6
  406a40:	f7fd f8f0 	bl	403c24 <__aeabi_dmul>
  406a44:	460b      	mov	r3, r1
  406a46:	4602      	mov	r2, r0
  406a48:	4659      	mov	r1, fp
  406a4a:	4650      	mov	r0, sl
  406a4c:	f7fc ff36 	bl	4038bc <__aeabi_dsub>
  406a50:	9d04      	ldr	r5, [sp, #16]
  406a52:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406a56:	702b      	strb	r3, [r5, #0]
  406a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a5a:	2b01      	cmp	r3, #1
  406a5c:	4606      	mov	r6, r0
  406a5e:	460f      	mov	r7, r1
  406a60:	f105 0501 	add.w	r5, r5, #1
  406a64:	d068      	beq.n	406b38 <_dtoa_r+0x330>
  406a66:	2200      	movs	r2, #0
  406a68:	4b18      	ldr	r3, [pc, #96]	; (406acc <_dtoa_r+0x2c4>)
  406a6a:	f7fd f8db 	bl	403c24 <__aeabi_dmul>
  406a6e:	2200      	movs	r2, #0
  406a70:	2300      	movs	r3, #0
  406a72:	4606      	mov	r6, r0
  406a74:	460f      	mov	r7, r1
  406a76:	f7fd fb3d 	bl	4040f4 <__aeabi_dcmpeq>
  406a7a:	2800      	cmp	r0, #0
  406a7c:	f040 8088 	bne.w	406b90 <_dtoa_r+0x388>
  406a80:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406a84:	f04f 0a00 	mov.w	sl, #0
  406a88:	f8df b040 	ldr.w	fp, [pc, #64]	; 406acc <_dtoa_r+0x2c4>
  406a8c:	940c      	str	r4, [sp, #48]	; 0x30
  406a8e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406a92:	e028      	b.n	406ae6 <_dtoa_r+0x2de>
  406a94:	f3af 8000 	nop.w
  406a98:	636f4361 	.word	0x636f4361
  406a9c:	3fd287a7 	.word	0x3fd287a7
  406aa0:	8b60c8b3 	.word	0x8b60c8b3
  406aa4:	3fc68a28 	.word	0x3fc68a28
  406aa8:	509f79fb 	.word	0x509f79fb
  406aac:	3fd34413 	.word	0x3fd34413
  406ab0:	7ff00000 	.word	0x7ff00000
  406ab4:	00409291 	.word	0x00409291
  406ab8:	004092b4 	.word	0x004092b4
  406abc:	004092c0 	.word	0x004092c0
  406ac0:	3ff80000 	.word	0x3ff80000
  406ac4:	004092f0 	.word	0x004092f0
  406ac8:	00409290 	.word	0x00409290
  406acc:	40240000 	.word	0x40240000
  406ad0:	f7fd f8a8 	bl	403c24 <__aeabi_dmul>
  406ad4:	2200      	movs	r2, #0
  406ad6:	2300      	movs	r3, #0
  406ad8:	4606      	mov	r6, r0
  406ada:	460f      	mov	r7, r1
  406adc:	f7fd fb0a 	bl	4040f4 <__aeabi_dcmpeq>
  406ae0:	2800      	cmp	r0, #0
  406ae2:	f040 83c1 	bne.w	407268 <_dtoa_r+0xa60>
  406ae6:	4642      	mov	r2, r8
  406ae8:	464b      	mov	r3, r9
  406aea:	4630      	mov	r0, r6
  406aec:	4639      	mov	r1, r7
  406aee:	f7fd f9c3 	bl	403e78 <__aeabi_ddiv>
  406af2:	f002 fb03 	bl	4090fc <__aeabi_d2iz>
  406af6:	4604      	mov	r4, r0
  406af8:	f7fd f82e 	bl	403b58 <__aeabi_i2d>
  406afc:	4642      	mov	r2, r8
  406afe:	464b      	mov	r3, r9
  406b00:	f7fd f890 	bl	403c24 <__aeabi_dmul>
  406b04:	4602      	mov	r2, r0
  406b06:	460b      	mov	r3, r1
  406b08:	4630      	mov	r0, r6
  406b0a:	4639      	mov	r1, r7
  406b0c:	f7fc fed6 	bl	4038bc <__aeabi_dsub>
  406b10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406b14:	9e04      	ldr	r6, [sp, #16]
  406b16:	f805 eb01 	strb.w	lr, [r5], #1
  406b1a:	eba5 0e06 	sub.w	lr, r5, r6
  406b1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406b20:	45b6      	cmp	lr, r6
  406b22:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406b26:	4652      	mov	r2, sl
  406b28:	465b      	mov	r3, fp
  406b2a:	d1d1      	bne.n	406ad0 <_dtoa_r+0x2c8>
  406b2c:	46a0      	mov	r8, r4
  406b2e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406b32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406b34:	4606      	mov	r6, r0
  406b36:	460f      	mov	r7, r1
  406b38:	4632      	mov	r2, r6
  406b3a:	463b      	mov	r3, r7
  406b3c:	4630      	mov	r0, r6
  406b3e:	4639      	mov	r1, r7
  406b40:	f7fc febe 	bl	4038c0 <__adddf3>
  406b44:	4606      	mov	r6, r0
  406b46:	460f      	mov	r7, r1
  406b48:	4602      	mov	r2, r0
  406b4a:	460b      	mov	r3, r1
  406b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406b50:	f7fd fada 	bl	404108 <__aeabi_dcmplt>
  406b54:	b948      	cbnz	r0, 406b6a <_dtoa_r+0x362>
  406b56:	4632      	mov	r2, r6
  406b58:	463b      	mov	r3, r7
  406b5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406b5e:	f7fd fac9 	bl	4040f4 <__aeabi_dcmpeq>
  406b62:	b1a8      	cbz	r0, 406b90 <_dtoa_r+0x388>
  406b64:	f018 0f01 	tst.w	r8, #1
  406b68:	d012      	beq.n	406b90 <_dtoa_r+0x388>
  406b6a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406b6e:	9a04      	ldr	r2, [sp, #16]
  406b70:	1e6b      	subs	r3, r5, #1
  406b72:	e004      	b.n	406b7e <_dtoa_r+0x376>
  406b74:	429a      	cmp	r2, r3
  406b76:	f000 8401 	beq.w	40737c <_dtoa_r+0xb74>
  406b7a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406b7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406b82:	f103 0501 	add.w	r5, r3, #1
  406b86:	d0f5      	beq.n	406b74 <_dtoa_r+0x36c>
  406b88:	f108 0801 	add.w	r8, r8, #1
  406b8c:	f883 8000 	strb.w	r8, [r3]
  406b90:	4649      	mov	r1, r9
  406b92:	4620      	mov	r0, r4
  406b94:	f001 faee 	bl	408174 <_Bfree>
  406b98:	2200      	movs	r2, #0
  406b9a:	9b02      	ldr	r3, [sp, #8]
  406b9c:	702a      	strb	r2, [r5, #0]
  406b9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406ba0:	3301      	adds	r3, #1
  406ba2:	6013      	str	r3, [r2, #0]
  406ba4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406ba6:	2b00      	cmp	r3, #0
  406ba8:	f000 839e 	beq.w	4072e8 <_dtoa_r+0xae0>
  406bac:	9804      	ldr	r0, [sp, #16]
  406bae:	601d      	str	r5, [r3, #0]
  406bb0:	b01b      	add	sp, #108	; 0x6c
  406bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406bb8:	2a00      	cmp	r2, #0
  406bba:	d03e      	beq.n	406c3a <_dtoa_r+0x432>
  406bbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406bbe:	2a01      	cmp	r2, #1
  406bc0:	f340 8311 	ble.w	4071e6 <_dtoa_r+0x9de>
  406bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406bc8:	1e5f      	subs	r7, r3, #1
  406bca:	42ba      	cmp	r2, r7
  406bcc:	f2c0 838f 	blt.w	4072ee <_dtoa_r+0xae6>
  406bd0:	1bd7      	subs	r7, r2, r7
  406bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bd4:	2b00      	cmp	r3, #0
  406bd6:	f2c0 848b 	blt.w	4074f0 <_dtoa_r+0xce8>
  406bda:	9d08      	ldr	r5, [sp, #32]
  406bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406bde:	9a08      	ldr	r2, [sp, #32]
  406be0:	441a      	add	r2, r3
  406be2:	9208      	str	r2, [sp, #32]
  406be4:	9a06      	ldr	r2, [sp, #24]
  406be6:	2101      	movs	r1, #1
  406be8:	441a      	add	r2, r3
  406bea:	4620      	mov	r0, r4
  406bec:	9206      	str	r2, [sp, #24]
  406bee:	f001 fb5b 	bl	4082a8 <__i2b>
  406bf2:	4606      	mov	r6, r0
  406bf4:	e024      	b.n	406c40 <_dtoa_r+0x438>
  406bf6:	2301      	movs	r3, #1
  406bf8:	930e      	str	r3, [sp, #56]	; 0x38
  406bfa:	e6af      	b.n	40695c <_dtoa_r+0x154>
  406bfc:	9a08      	ldr	r2, [sp, #32]
  406bfe:	9b02      	ldr	r3, [sp, #8]
  406c00:	1ad2      	subs	r2, r2, r3
  406c02:	425b      	negs	r3, r3
  406c04:	930c      	str	r3, [sp, #48]	; 0x30
  406c06:	2300      	movs	r3, #0
  406c08:	9208      	str	r2, [sp, #32]
  406c0a:	930d      	str	r3, [sp, #52]	; 0x34
  406c0c:	e6b8      	b.n	406980 <_dtoa_r+0x178>
  406c0e:	f1c7 0301 	rsb	r3, r7, #1
  406c12:	9308      	str	r3, [sp, #32]
  406c14:	2300      	movs	r3, #0
  406c16:	9306      	str	r3, [sp, #24]
  406c18:	e6a7      	b.n	40696a <_dtoa_r+0x162>
  406c1a:	9d02      	ldr	r5, [sp, #8]
  406c1c:	4628      	mov	r0, r5
  406c1e:	f7fc ff9b 	bl	403b58 <__aeabi_i2d>
  406c22:	4602      	mov	r2, r0
  406c24:	460b      	mov	r3, r1
  406c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406c2a:	f7fd fa63 	bl	4040f4 <__aeabi_dcmpeq>
  406c2e:	2800      	cmp	r0, #0
  406c30:	f47f ae80 	bne.w	406934 <_dtoa_r+0x12c>
  406c34:	1e6b      	subs	r3, r5, #1
  406c36:	9302      	str	r3, [sp, #8]
  406c38:	e67c      	b.n	406934 <_dtoa_r+0x12c>
  406c3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406c3c:	9d08      	ldr	r5, [sp, #32]
  406c3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406c40:	2d00      	cmp	r5, #0
  406c42:	dd0c      	ble.n	406c5e <_dtoa_r+0x456>
  406c44:	9906      	ldr	r1, [sp, #24]
  406c46:	2900      	cmp	r1, #0
  406c48:	460b      	mov	r3, r1
  406c4a:	dd08      	ble.n	406c5e <_dtoa_r+0x456>
  406c4c:	42a9      	cmp	r1, r5
  406c4e:	9a08      	ldr	r2, [sp, #32]
  406c50:	bfa8      	it	ge
  406c52:	462b      	movge	r3, r5
  406c54:	1ad2      	subs	r2, r2, r3
  406c56:	1aed      	subs	r5, r5, r3
  406c58:	1acb      	subs	r3, r1, r3
  406c5a:	9208      	str	r2, [sp, #32]
  406c5c:	9306      	str	r3, [sp, #24]
  406c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c60:	b1d3      	cbz	r3, 406c98 <_dtoa_r+0x490>
  406c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406c64:	2b00      	cmp	r3, #0
  406c66:	f000 82b7 	beq.w	4071d8 <_dtoa_r+0x9d0>
  406c6a:	2f00      	cmp	r7, #0
  406c6c:	dd10      	ble.n	406c90 <_dtoa_r+0x488>
  406c6e:	4631      	mov	r1, r6
  406c70:	463a      	mov	r2, r7
  406c72:	4620      	mov	r0, r4
  406c74:	f001 fbb4 	bl	4083e0 <__pow5mult>
  406c78:	464a      	mov	r2, r9
  406c7a:	4601      	mov	r1, r0
  406c7c:	4606      	mov	r6, r0
  406c7e:	4620      	mov	r0, r4
  406c80:	f001 fb1c 	bl	4082bc <__multiply>
  406c84:	4649      	mov	r1, r9
  406c86:	4680      	mov	r8, r0
  406c88:	4620      	mov	r0, r4
  406c8a:	f001 fa73 	bl	408174 <_Bfree>
  406c8e:	46c1      	mov	r9, r8
  406c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c92:	1bda      	subs	r2, r3, r7
  406c94:	f040 82a1 	bne.w	4071da <_dtoa_r+0x9d2>
  406c98:	2101      	movs	r1, #1
  406c9a:	4620      	mov	r0, r4
  406c9c:	f001 fb04 	bl	4082a8 <__i2b>
  406ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406ca2:	2b00      	cmp	r3, #0
  406ca4:	4680      	mov	r8, r0
  406ca6:	dd1c      	ble.n	406ce2 <_dtoa_r+0x4da>
  406ca8:	4601      	mov	r1, r0
  406caa:	461a      	mov	r2, r3
  406cac:	4620      	mov	r0, r4
  406cae:	f001 fb97 	bl	4083e0 <__pow5mult>
  406cb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406cb4:	2b01      	cmp	r3, #1
  406cb6:	4680      	mov	r8, r0
  406cb8:	f340 8254 	ble.w	407164 <_dtoa_r+0x95c>
  406cbc:	2300      	movs	r3, #0
  406cbe:	930c      	str	r3, [sp, #48]	; 0x30
  406cc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406cc4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406cc8:	6918      	ldr	r0, [r3, #16]
  406cca:	f001 fa9d 	bl	408208 <__hi0bits>
  406cce:	f1c0 0020 	rsb	r0, r0, #32
  406cd2:	e010      	b.n	406cf6 <_dtoa_r+0x4ee>
  406cd4:	f1c3 0520 	rsb	r5, r3, #32
  406cd8:	fa0a f005 	lsl.w	r0, sl, r5
  406cdc:	e674      	b.n	4069c8 <_dtoa_r+0x1c0>
  406cde:	900e      	str	r0, [sp, #56]	; 0x38
  406ce0:	e63c      	b.n	40695c <_dtoa_r+0x154>
  406ce2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ce4:	2b01      	cmp	r3, #1
  406ce6:	f340 8287 	ble.w	4071f8 <_dtoa_r+0x9f0>
  406cea:	2300      	movs	r3, #0
  406cec:	930c      	str	r3, [sp, #48]	; 0x30
  406cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406cf0:	2001      	movs	r0, #1
  406cf2:	2b00      	cmp	r3, #0
  406cf4:	d1e4      	bne.n	406cc0 <_dtoa_r+0x4b8>
  406cf6:	9a06      	ldr	r2, [sp, #24]
  406cf8:	4410      	add	r0, r2
  406cfa:	f010 001f 	ands.w	r0, r0, #31
  406cfe:	f000 80a1 	beq.w	406e44 <_dtoa_r+0x63c>
  406d02:	f1c0 0320 	rsb	r3, r0, #32
  406d06:	2b04      	cmp	r3, #4
  406d08:	f340 849e 	ble.w	407648 <_dtoa_r+0xe40>
  406d0c:	9b08      	ldr	r3, [sp, #32]
  406d0e:	f1c0 001c 	rsb	r0, r0, #28
  406d12:	4403      	add	r3, r0
  406d14:	9308      	str	r3, [sp, #32]
  406d16:	4613      	mov	r3, r2
  406d18:	4403      	add	r3, r0
  406d1a:	4405      	add	r5, r0
  406d1c:	9306      	str	r3, [sp, #24]
  406d1e:	9b08      	ldr	r3, [sp, #32]
  406d20:	2b00      	cmp	r3, #0
  406d22:	dd05      	ble.n	406d30 <_dtoa_r+0x528>
  406d24:	4649      	mov	r1, r9
  406d26:	461a      	mov	r2, r3
  406d28:	4620      	mov	r0, r4
  406d2a:	f001 fba9 	bl	408480 <__lshift>
  406d2e:	4681      	mov	r9, r0
  406d30:	9b06      	ldr	r3, [sp, #24]
  406d32:	2b00      	cmp	r3, #0
  406d34:	dd05      	ble.n	406d42 <_dtoa_r+0x53a>
  406d36:	4641      	mov	r1, r8
  406d38:	461a      	mov	r2, r3
  406d3a:	4620      	mov	r0, r4
  406d3c:	f001 fba0 	bl	408480 <__lshift>
  406d40:	4680      	mov	r8, r0
  406d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406d44:	2b00      	cmp	r3, #0
  406d46:	f040 8086 	bne.w	406e56 <_dtoa_r+0x64e>
  406d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d4c:	2b00      	cmp	r3, #0
  406d4e:	f340 8266 	ble.w	40721e <_dtoa_r+0xa16>
  406d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d54:	2b00      	cmp	r3, #0
  406d56:	f000 8098 	beq.w	406e8a <_dtoa_r+0x682>
  406d5a:	2d00      	cmp	r5, #0
  406d5c:	dd05      	ble.n	406d6a <_dtoa_r+0x562>
  406d5e:	4631      	mov	r1, r6
  406d60:	462a      	mov	r2, r5
  406d62:	4620      	mov	r0, r4
  406d64:	f001 fb8c 	bl	408480 <__lshift>
  406d68:	4606      	mov	r6, r0
  406d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406d6c:	2b00      	cmp	r3, #0
  406d6e:	f040 8337 	bne.w	4073e0 <_dtoa_r+0xbd8>
  406d72:	9606      	str	r6, [sp, #24]
  406d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d76:	9a04      	ldr	r2, [sp, #16]
  406d78:	f8dd b018 	ldr.w	fp, [sp, #24]
  406d7c:	3b01      	subs	r3, #1
  406d7e:	18d3      	adds	r3, r2, r3
  406d80:	930b      	str	r3, [sp, #44]	; 0x2c
  406d82:	f00a 0301 	and.w	r3, sl, #1
  406d86:	930c      	str	r3, [sp, #48]	; 0x30
  406d88:	4617      	mov	r7, r2
  406d8a:	46c2      	mov	sl, r8
  406d8c:	4651      	mov	r1, sl
  406d8e:	4648      	mov	r0, r9
  406d90:	f7ff fca6 	bl	4066e0 <quorem>
  406d94:	4631      	mov	r1, r6
  406d96:	4605      	mov	r5, r0
  406d98:	4648      	mov	r0, r9
  406d9a:	f001 fbc3 	bl	408524 <__mcmp>
  406d9e:	465a      	mov	r2, fp
  406da0:	900a      	str	r0, [sp, #40]	; 0x28
  406da2:	4651      	mov	r1, sl
  406da4:	4620      	mov	r0, r4
  406da6:	f001 fbd9 	bl	40855c <__mdiff>
  406daa:	68c2      	ldr	r2, [r0, #12]
  406dac:	4680      	mov	r8, r0
  406dae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406db2:	2a00      	cmp	r2, #0
  406db4:	f040 822b 	bne.w	40720e <_dtoa_r+0xa06>
  406db8:	4601      	mov	r1, r0
  406dba:	4648      	mov	r0, r9
  406dbc:	9308      	str	r3, [sp, #32]
  406dbe:	f001 fbb1 	bl	408524 <__mcmp>
  406dc2:	4641      	mov	r1, r8
  406dc4:	9006      	str	r0, [sp, #24]
  406dc6:	4620      	mov	r0, r4
  406dc8:	f001 f9d4 	bl	408174 <_Bfree>
  406dcc:	9a06      	ldr	r2, [sp, #24]
  406dce:	9b08      	ldr	r3, [sp, #32]
  406dd0:	b932      	cbnz	r2, 406de0 <_dtoa_r+0x5d8>
  406dd2:	9924      	ldr	r1, [sp, #144]	; 0x90
  406dd4:	b921      	cbnz	r1, 406de0 <_dtoa_r+0x5d8>
  406dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406dd8:	2a00      	cmp	r2, #0
  406dda:	f000 83ef 	beq.w	4075bc <_dtoa_r+0xdb4>
  406dde:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406de0:	990a      	ldr	r1, [sp, #40]	; 0x28
  406de2:	2900      	cmp	r1, #0
  406de4:	f2c0 829f 	blt.w	407326 <_dtoa_r+0xb1e>
  406de8:	d105      	bne.n	406df6 <_dtoa_r+0x5ee>
  406dea:	9924      	ldr	r1, [sp, #144]	; 0x90
  406dec:	b919      	cbnz	r1, 406df6 <_dtoa_r+0x5ee>
  406dee:	990c      	ldr	r1, [sp, #48]	; 0x30
  406df0:	2900      	cmp	r1, #0
  406df2:	f000 8298 	beq.w	407326 <_dtoa_r+0xb1e>
  406df6:	2a00      	cmp	r2, #0
  406df8:	f300 8306 	bgt.w	407408 <_dtoa_r+0xc00>
  406dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406dfe:	703b      	strb	r3, [r7, #0]
  406e00:	f107 0801 	add.w	r8, r7, #1
  406e04:	4297      	cmp	r7, r2
  406e06:	4645      	mov	r5, r8
  406e08:	f000 830c 	beq.w	407424 <_dtoa_r+0xc1c>
  406e0c:	4649      	mov	r1, r9
  406e0e:	2300      	movs	r3, #0
  406e10:	220a      	movs	r2, #10
  406e12:	4620      	mov	r0, r4
  406e14:	f001 f9b8 	bl	408188 <__multadd>
  406e18:	455e      	cmp	r6, fp
  406e1a:	4681      	mov	r9, r0
  406e1c:	4631      	mov	r1, r6
  406e1e:	f04f 0300 	mov.w	r3, #0
  406e22:	f04f 020a 	mov.w	r2, #10
  406e26:	4620      	mov	r0, r4
  406e28:	f000 81eb 	beq.w	407202 <_dtoa_r+0x9fa>
  406e2c:	f001 f9ac 	bl	408188 <__multadd>
  406e30:	4659      	mov	r1, fp
  406e32:	4606      	mov	r6, r0
  406e34:	2300      	movs	r3, #0
  406e36:	220a      	movs	r2, #10
  406e38:	4620      	mov	r0, r4
  406e3a:	f001 f9a5 	bl	408188 <__multadd>
  406e3e:	4647      	mov	r7, r8
  406e40:	4683      	mov	fp, r0
  406e42:	e7a3      	b.n	406d8c <_dtoa_r+0x584>
  406e44:	201c      	movs	r0, #28
  406e46:	9b08      	ldr	r3, [sp, #32]
  406e48:	4403      	add	r3, r0
  406e4a:	9308      	str	r3, [sp, #32]
  406e4c:	9b06      	ldr	r3, [sp, #24]
  406e4e:	4403      	add	r3, r0
  406e50:	4405      	add	r5, r0
  406e52:	9306      	str	r3, [sp, #24]
  406e54:	e763      	b.n	406d1e <_dtoa_r+0x516>
  406e56:	4641      	mov	r1, r8
  406e58:	4648      	mov	r0, r9
  406e5a:	f001 fb63 	bl	408524 <__mcmp>
  406e5e:	2800      	cmp	r0, #0
  406e60:	f6bf af73 	bge.w	406d4a <_dtoa_r+0x542>
  406e64:	9f02      	ldr	r7, [sp, #8]
  406e66:	4649      	mov	r1, r9
  406e68:	2300      	movs	r3, #0
  406e6a:	220a      	movs	r2, #10
  406e6c:	4620      	mov	r0, r4
  406e6e:	3f01      	subs	r7, #1
  406e70:	9702      	str	r7, [sp, #8]
  406e72:	f001 f989 	bl	408188 <__multadd>
  406e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e78:	4681      	mov	r9, r0
  406e7a:	2b00      	cmp	r3, #0
  406e7c:	f040 83b6 	bne.w	4075ec <_dtoa_r+0xde4>
  406e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406e82:	2b00      	cmp	r3, #0
  406e84:	f340 83bf 	ble.w	407606 <_dtoa_r+0xdfe>
  406e88:	930a      	str	r3, [sp, #40]	; 0x28
  406e8a:	f8dd b010 	ldr.w	fp, [sp, #16]
  406e8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406e90:	465d      	mov	r5, fp
  406e92:	e002      	b.n	406e9a <_dtoa_r+0x692>
  406e94:	f001 f978 	bl	408188 <__multadd>
  406e98:	4681      	mov	r9, r0
  406e9a:	4641      	mov	r1, r8
  406e9c:	4648      	mov	r0, r9
  406e9e:	f7ff fc1f 	bl	4066e0 <quorem>
  406ea2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406ea6:	f805 ab01 	strb.w	sl, [r5], #1
  406eaa:	eba5 030b 	sub.w	r3, r5, fp
  406eae:	42bb      	cmp	r3, r7
  406eb0:	f04f 020a 	mov.w	r2, #10
  406eb4:	f04f 0300 	mov.w	r3, #0
  406eb8:	4649      	mov	r1, r9
  406eba:	4620      	mov	r0, r4
  406ebc:	dbea      	blt.n	406e94 <_dtoa_r+0x68c>
  406ebe:	9b04      	ldr	r3, [sp, #16]
  406ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406ec2:	2a01      	cmp	r2, #1
  406ec4:	bfac      	ite	ge
  406ec6:	189b      	addge	r3, r3, r2
  406ec8:	3301      	addlt	r3, #1
  406eca:	461d      	mov	r5, r3
  406ecc:	f04f 0b00 	mov.w	fp, #0
  406ed0:	4649      	mov	r1, r9
  406ed2:	2201      	movs	r2, #1
  406ed4:	4620      	mov	r0, r4
  406ed6:	f001 fad3 	bl	408480 <__lshift>
  406eda:	4641      	mov	r1, r8
  406edc:	4681      	mov	r9, r0
  406ede:	f001 fb21 	bl	408524 <__mcmp>
  406ee2:	2800      	cmp	r0, #0
  406ee4:	f340 823d 	ble.w	407362 <_dtoa_r+0xb5a>
  406ee8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406eec:	9904      	ldr	r1, [sp, #16]
  406eee:	1e6b      	subs	r3, r5, #1
  406ef0:	e004      	b.n	406efc <_dtoa_r+0x6f4>
  406ef2:	428b      	cmp	r3, r1
  406ef4:	f000 81ae 	beq.w	407254 <_dtoa_r+0xa4c>
  406ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406efc:	2a39      	cmp	r2, #57	; 0x39
  406efe:	f103 0501 	add.w	r5, r3, #1
  406f02:	d0f6      	beq.n	406ef2 <_dtoa_r+0x6ea>
  406f04:	3201      	adds	r2, #1
  406f06:	701a      	strb	r2, [r3, #0]
  406f08:	4641      	mov	r1, r8
  406f0a:	4620      	mov	r0, r4
  406f0c:	f001 f932 	bl	408174 <_Bfree>
  406f10:	2e00      	cmp	r6, #0
  406f12:	f43f ae3d 	beq.w	406b90 <_dtoa_r+0x388>
  406f16:	f1bb 0f00 	cmp.w	fp, #0
  406f1a:	d005      	beq.n	406f28 <_dtoa_r+0x720>
  406f1c:	45b3      	cmp	fp, r6
  406f1e:	d003      	beq.n	406f28 <_dtoa_r+0x720>
  406f20:	4659      	mov	r1, fp
  406f22:	4620      	mov	r0, r4
  406f24:	f001 f926 	bl	408174 <_Bfree>
  406f28:	4631      	mov	r1, r6
  406f2a:	4620      	mov	r0, r4
  406f2c:	f001 f922 	bl	408174 <_Bfree>
  406f30:	e62e      	b.n	406b90 <_dtoa_r+0x388>
  406f32:	2300      	movs	r3, #0
  406f34:	930b      	str	r3, [sp, #44]	; 0x2c
  406f36:	9b02      	ldr	r3, [sp, #8]
  406f38:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406f3a:	4413      	add	r3, r2
  406f3c:	930f      	str	r3, [sp, #60]	; 0x3c
  406f3e:	3301      	adds	r3, #1
  406f40:	2b01      	cmp	r3, #1
  406f42:	461f      	mov	r7, r3
  406f44:	461e      	mov	r6, r3
  406f46:	930a      	str	r3, [sp, #40]	; 0x28
  406f48:	bfb8      	it	lt
  406f4a:	2701      	movlt	r7, #1
  406f4c:	2100      	movs	r1, #0
  406f4e:	2f17      	cmp	r7, #23
  406f50:	6461      	str	r1, [r4, #68]	; 0x44
  406f52:	d90a      	bls.n	406f6a <_dtoa_r+0x762>
  406f54:	2201      	movs	r2, #1
  406f56:	2304      	movs	r3, #4
  406f58:	005b      	lsls	r3, r3, #1
  406f5a:	f103 0014 	add.w	r0, r3, #20
  406f5e:	4287      	cmp	r7, r0
  406f60:	4611      	mov	r1, r2
  406f62:	f102 0201 	add.w	r2, r2, #1
  406f66:	d2f7      	bcs.n	406f58 <_dtoa_r+0x750>
  406f68:	6461      	str	r1, [r4, #68]	; 0x44
  406f6a:	4620      	mov	r0, r4
  406f6c:	f001 f8dc 	bl	408128 <_Balloc>
  406f70:	2e0e      	cmp	r6, #14
  406f72:	9004      	str	r0, [sp, #16]
  406f74:	6420      	str	r0, [r4, #64]	; 0x40
  406f76:	f63f ad41 	bhi.w	4069fc <_dtoa_r+0x1f4>
  406f7a:	2d00      	cmp	r5, #0
  406f7c:	f43f ad3e 	beq.w	4069fc <_dtoa_r+0x1f4>
  406f80:	9902      	ldr	r1, [sp, #8]
  406f82:	2900      	cmp	r1, #0
  406f84:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406f88:	f340 8202 	ble.w	407390 <_dtoa_r+0xb88>
  406f8c:	4bb8      	ldr	r3, [pc, #736]	; (407270 <_dtoa_r+0xa68>)
  406f8e:	f001 020f 	and.w	r2, r1, #15
  406f92:	110d      	asrs	r5, r1, #4
  406f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406f98:	06e9      	lsls	r1, r5, #27
  406f9a:	e9d3 6700 	ldrd	r6, r7, [r3]
  406f9e:	f140 81ae 	bpl.w	4072fe <_dtoa_r+0xaf6>
  406fa2:	4bb4      	ldr	r3, [pc, #720]	; (407274 <_dtoa_r+0xa6c>)
  406fa4:	4650      	mov	r0, sl
  406fa6:	4659      	mov	r1, fp
  406fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406fac:	f7fc ff64 	bl	403e78 <__aeabi_ddiv>
  406fb0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406fb4:	f005 050f 	and.w	r5, r5, #15
  406fb8:	f04f 0a03 	mov.w	sl, #3
  406fbc:	b18d      	cbz	r5, 406fe2 <_dtoa_r+0x7da>
  406fbe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407274 <_dtoa_r+0xa6c>
  406fc2:	07ea      	lsls	r2, r5, #31
  406fc4:	d509      	bpl.n	406fda <_dtoa_r+0x7d2>
  406fc6:	4630      	mov	r0, r6
  406fc8:	4639      	mov	r1, r7
  406fca:	e9d8 2300 	ldrd	r2, r3, [r8]
  406fce:	f7fc fe29 	bl	403c24 <__aeabi_dmul>
  406fd2:	f10a 0a01 	add.w	sl, sl, #1
  406fd6:	4606      	mov	r6, r0
  406fd8:	460f      	mov	r7, r1
  406fda:	106d      	asrs	r5, r5, #1
  406fdc:	f108 0808 	add.w	r8, r8, #8
  406fe0:	d1ef      	bne.n	406fc2 <_dtoa_r+0x7ba>
  406fe2:	463b      	mov	r3, r7
  406fe4:	4632      	mov	r2, r6
  406fe6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406fea:	f7fc ff45 	bl	403e78 <__aeabi_ddiv>
  406fee:	4607      	mov	r7, r0
  406ff0:	4688      	mov	r8, r1
  406ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406ff4:	b143      	cbz	r3, 407008 <_dtoa_r+0x800>
  406ff6:	2200      	movs	r2, #0
  406ff8:	4b9f      	ldr	r3, [pc, #636]	; (407278 <_dtoa_r+0xa70>)
  406ffa:	4638      	mov	r0, r7
  406ffc:	4641      	mov	r1, r8
  406ffe:	f7fd f883 	bl	404108 <__aeabi_dcmplt>
  407002:	2800      	cmp	r0, #0
  407004:	f040 8286 	bne.w	407514 <_dtoa_r+0xd0c>
  407008:	4650      	mov	r0, sl
  40700a:	f7fc fda5 	bl	403b58 <__aeabi_i2d>
  40700e:	463a      	mov	r2, r7
  407010:	4643      	mov	r3, r8
  407012:	f7fc fe07 	bl	403c24 <__aeabi_dmul>
  407016:	4b99      	ldr	r3, [pc, #612]	; (40727c <_dtoa_r+0xa74>)
  407018:	2200      	movs	r2, #0
  40701a:	f7fc fc51 	bl	4038c0 <__adddf3>
  40701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407020:	4605      	mov	r5, r0
  407022:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407026:	2b00      	cmp	r3, #0
  407028:	f000 813e 	beq.w	4072a8 <_dtoa_r+0xaa0>
  40702c:	9b02      	ldr	r3, [sp, #8]
  40702e:	9315      	str	r3, [sp, #84]	; 0x54
  407030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407032:	9312      	str	r3, [sp, #72]	; 0x48
  407034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407036:	2b00      	cmp	r3, #0
  407038:	f000 81fa 	beq.w	407430 <_dtoa_r+0xc28>
  40703c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40703e:	4b8c      	ldr	r3, [pc, #560]	; (407270 <_dtoa_r+0xa68>)
  407040:	498f      	ldr	r1, [pc, #572]	; (407280 <_dtoa_r+0xa78>)
  407042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40704a:	2000      	movs	r0, #0
  40704c:	f7fc ff14 	bl	403e78 <__aeabi_ddiv>
  407050:	462a      	mov	r2, r5
  407052:	4633      	mov	r3, r6
  407054:	f7fc fc32 	bl	4038bc <__aeabi_dsub>
  407058:	4682      	mov	sl, r0
  40705a:	468b      	mov	fp, r1
  40705c:	4638      	mov	r0, r7
  40705e:	4641      	mov	r1, r8
  407060:	f002 f84c 	bl	4090fc <__aeabi_d2iz>
  407064:	4605      	mov	r5, r0
  407066:	f7fc fd77 	bl	403b58 <__aeabi_i2d>
  40706a:	4602      	mov	r2, r0
  40706c:	460b      	mov	r3, r1
  40706e:	4638      	mov	r0, r7
  407070:	4641      	mov	r1, r8
  407072:	f7fc fc23 	bl	4038bc <__aeabi_dsub>
  407076:	3530      	adds	r5, #48	; 0x30
  407078:	fa5f f885 	uxtb.w	r8, r5
  40707c:	9d04      	ldr	r5, [sp, #16]
  40707e:	4606      	mov	r6, r0
  407080:	460f      	mov	r7, r1
  407082:	f885 8000 	strb.w	r8, [r5]
  407086:	4602      	mov	r2, r0
  407088:	460b      	mov	r3, r1
  40708a:	4650      	mov	r0, sl
  40708c:	4659      	mov	r1, fp
  40708e:	3501      	adds	r5, #1
  407090:	f7fd f858 	bl	404144 <__aeabi_dcmpgt>
  407094:	2800      	cmp	r0, #0
  407096:	d154      	bne.n	407142 <_dtoa_r+0x93a>
  407098:	4632      	mov	r2, r6
  40709a:	463b      	mov	r3, r7
  40709c:	2000      	movs	r0, #0
  40709e:	4976      	ldr	r1, [pc, #472]	; (407278 <_dtoa_r+0xa70>)
  4070a0:	f7fc fc0c 	bl	4038bc <__aeabi_dsub>
  4070a4:	4602      	mov	r2, r0
  4070a6:	460b      	mov	r3, r1
  4070a8:	4650      	mov	r0, sl
  4070aa:	4659      	mov	r1, fp
  4070ac:	f7fd f84a 	bl	404144 <__aeabi_dcmpgt>
  4070b0:	2800      	cmp	r0, #0
  4070b2:	f040 8270 	bne.w	407596 <_dtoa_r+0xd8e>
  4070b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4070b8:	2a01      	cmp	r2, #1
  4070ba:	f000 8111 	beq.w	4072e0 <_dtoa_r+0xad8>
  4070be:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070c0:	9a04      	ldr	r2, [sp, #16]
  4070c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4070c6:	4413      	add	r3, r2
  4070c8:	4699      	mov	r9, r3
  4070ca:	e00d      	b.n	4070e8 <_dtoa_r+0x8e0>
  4070cc:	2000      	movs	r0, #0
  4070ce:	496a      	ldr	r1, [pc, #424]	; (407278 <_dtoa_r+0xa70>)
  4070d0:	f7fc fbf4 	bl	4038bc <__aeabi_dsub>
  4070d4:	4652      	mov	r2, sl
  4070d6:	465b      	mov	r3, fp
  4070d8:	f7fd f816 	bl	404108 <__aeabi_dcmplt>
  4070dc:	2800      	cmp	r0, #0
  4070de:	f040 8258 	bne.w	407592 <_dtoa_r+0xd8a>
  4070e2:	454d      	cmp	r5, r9
  4070e4:	f000 80fa 	beq.w	4072dc <_dtoa_r+0xad4>
  4070e8:	4650      	mov	r0, sl
  4070ea:	4659      	mov	r1, fp
  4070ec:	2200      	movs	r2, #0
  4070ee:	4b65      	ldr	r3, [pc, #404]	; (407284 <_dtoa_r+0xa7c>)
  4070f0:	f7fc fd98 	bl	403c24 <__aeabi_dmul>
  4070f4:	2200      	movs	r2, #0
  4070f6:	4b63      	ldr	r3, [pc, #396]	; (407284 <_dtoa_r+0xa7c>)
  4070f8:	4682      	mov	sl, r0
  4070fa:	468b      	mov	fp, r1
  4070fc:	4630      	mov	r0, r6
  4070fe:	4639      	mov	r1, r7
  407100:	f7fc fd90 	bl	403c24 <__aeabi_dmul>
  407104:	460f      	mov	r7, r1
  407106:	4606      	mov	r6, r0
  407108:	f001 fff8 	bl	4090fc <__aeabi_d2iz>
  40710c:	4680      	mov	r8, r0
  40710e:	f7fc fd23 	bl	403b58 <__aeabi_i2d>
  407112:	4602      	mov	r2, r0
  407114:	460b      	mov	r3, r1
  407116:	4630      	mov	r0, r6
  407118:	4639      	mov	r1, r7
  40711a:	f7fc fbcf 	bl	4038bc <__aeabi_dsub>
  40711e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407122:	fa5f f888 	uxtb.w	r8, r8
  407126:	4652      	mov	r2, sl
  407128:	465b      	mov	r3, fp
  40712a:	f805 8b01 	strb.w	r8, [r5], #1
  40712e:	4606      	mov	r6, r0
  407130:	460f      	mov	r7, r1
  407132:	f7fc ffe9 	bl	404108 <__aeabi_dcmplt>
  407136:	4632      	mov	r2, r6
  407138:	463b      	mov	r3, r7
  40713a:	2800      	cmp	r0, #0
  40713c:	d0c6      	beq.n	4070cc <_dtoa_r+0x8c4>
  40713e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407142:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407144:	9302      	str	r3, [sp, #8]
  407146:	e523      	b.n	406b90 <_dtoa_r+0x388>
  407148:	2300      	movs	r3, #0
  40714a:	930b      	str	r3, [sp, #44]	; 0x2c
  40714c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40714e:	2b00      	cmp	r3, #0
  407150:	f340 80dc 	ble.w	40730c <_dtoa_r+0xb04>
  407154:	461f      	mov	r7, r3
  407156:	461e      	mov	r6, r3
  407158:	930f      	str	r3, [sp, #60]	; 0x3c
  40715a:	930a      	str	r3, [sp, #40]	; 0x28
  40715c:	e6f6      	b.n	406f4c <_dtoa_r+0x744>
  40715e:	2301      	movs	r3, #1
  407160:	930b      	str	r3, [sp, #44]	; 0x2c
  407162:	e7f3      	b.n	40714c <_dtoa_r+0x944>
  407164:	f1ba 0f00 	cmp.w	sl, #0
  407168:	f47f ada8 	bne.w	406cbc <_dtoa_r+0x4b4>
  40716c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407170:	2b00      	cmp	r3, #0
  407172:	f47f adba 	bne.w	406cea <_dtoa_r+0x4e2>
  407176:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40717a:	0d3f      	lsrs	r7, r7, #20
  40717c:	053f      	lsls	r7, r7, #20
  40717e:	2f00      	cmp	r7, #0
  407180:	f000 820d 	beq.w	40759e <_dtoa_r+0xd96>
  407184:	9b08      	ldr	r3, [sp, #32]
  407186:	3301      	adds	r3, #1
  407188:	9308      	str	r3, [sp, #32]
  40718a:	9b06      	ldr	r3, [sp, #24]
  40718c:	3301      	adds	r3, #1
  40718e:	9306      	str	r3, [sp, #24]
  407190:	2301      	movs	r3, #1
  407192:	930c      	str	r3, [sp, #48]	; 0x30
  407194:	e5ab      	b.n	406cee <_dtoa_r+0x4e6>
  407196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407198:	2b00      	cmp	r3, #0
  40719a:	f73f ac42 	bgt.w	406a22 <_dtoa_r+0x21a>
  40719e:	f040 8221 	bne.w	4075e4 <_dtoa_r+0xddc>
  4071a2:	2200      	movs	r2, #0
  4071a4:	4b38      	ldr	r3, [pc, #224]	; (407288 <_dtoa_r+0xa80>)
  4071a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4071aa:	f7fc fd3b 	bl	403c24 <__aeabi_dmul>
  4071ae:	4652      	mov	r2, sl
  4071b0:	465b      	mov	r3, fp
  4071b2:	f7fc ffbd 	bl	404130 <__aeabi_dcmpge>
  4071b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4071ba:	4646      	mov	r6, r8
  4071bc:	2800      	cmp	r0, #0
  4071be:	d041      	beq.n	407244 <_dtoa_r+0xa3c>
  4071c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4071c2:	9d04      	ldr	r5, [sp, #16]
  4071c4:	43db      	mvns	r3, r3
  4071c6:	9302      	str	r3, [sp, #8]
  4071c8:	4641      	mov	r1, r8
  4071ca:	4620      	mov	r0, r4
  4071cc:	f000 ffd2 	bl	408174 <_Bfree>
  4071d0:	2e00      	cmp	r6, #0
  4071d2:	f43f acdd 	beq.w	406b90 <_dtoa_r+0x388>
  4071d6:	e6a7      	b.n	406f28 <_dtoa_r+0x720>
  4071d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4071da:	4649      	mov	r1, r9
  4071dc:	4620      	mov	r0, r4
  4071de:	f001 f8ff 	bl	4083e0 <__pow5mult>
  4071e2:	4681      	mov	r9, r0
  4071e4:	e558      	b.n	406c98 <_dtoa_r+0x490>
  4071e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4071e8:	2a00      	cmp	r2, #0
  4071ea:	f000 8187 	beq.w	4074fc <_dtoa_r+0xcf4>
  4071ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4071f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4071f4:	9d08      	ldr	r5, [sp, #32]
  4071f6:	e4f2      	b.n	406bde <_dtoa_r+0x3d6>
  4071f8:	f1ba 0f00 	cmp.w	sl, #0
  4071fc:	f47f ad75 	bne.w	406cea <_dtoa_r+0x4e2>
  407200:	e7b4      	b.n	40716c <_dtoa_r+0x964>
  407202:	f000 ffc1 	bl	408188 <__multadd>
  407206:	4647      	mov	r7, r8
  407208:	4606      	mov	r6, r0
  40720a:	4683      	mov	fp, r0
  40720c:	e5be      	b.n	406d8c <_dtoa_r+0x584>
  40720e:	4601      	mov	r1, r0
  407210:	4620      	mov	r0, r4
  407212:	9306      	str	r3, [sp, #24]
  407214:	f000 ffae 	bl	408174 <_Bfree>
  407218:	2201      	movs	r2, #1
  40721a:	9b06      	ldr	r3, [sp, #24]
  40721c:	e5e0      	b.n	406de0 <_dtoa_r+0x5d8>
  40721e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407220:	2b02      	cmp	r3, #2
  407222:	f77f ad96 	ble.w	406d52 <_dtoa_r+0x54a>
  407226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407228:	2b00      	cmp	r3, #0
  40722a:	d1c9      	bne.n	4071c0 <_dtoa_r+0x9b8>
  40722c:	4641      	mov	r1, r8
  40722e:	2205      	movs	r2, #5
  407230:	4620      	mov	r0, r4
  407232:	f000 ffa9 	bl	408188 <__multadd>
  407236:	4601      	mov	r1, r0
  407238:	4680      	mov	r8, r0
  40723a:	4648      	mov	r0, r9
  40723c:	f001 f972 	bl	408524 <__mcmp>
  407240:	2800      	cmp	r0, #0
  407242:	ddbd      	ble.n	4071c0 <_dtoa_r+0x9b8>
  407244:	9a02      	ldr	r2, [sp, #8]
  407246:	9904      	ldr	r1, [sp, #16]
  407248:	2331      	movs	r3, #49	; 0x31
  40724a:	3201      	adds	r2, #1
  40724c:	9202      	str	r2, [sp, #8]
  40724e:	700b      	strb	r3, [r1, #0]
  407250:	1c4d      	adds	r5, r1, #1
  407252:	e7b9      	b.n	4071c8 <_dtoa_r+0x9c0>
  407254:	9a02      	ldr	r2, [sp, #8]
  407256:	3201      	adds	r2, #1
  407258:	9202      	str	r2, [sp, #8]
  40725a:	9a04      	ldr	r2, [sp, #16]
  40725c:	2331      	movs	r3, #49	; 0x31
  40725e:	7013      	strb	r3, [r2, #0]
  407260:	e652      	b.n	406f08 <_dtoa_r+0x700>
  407262:	2301      	movs	r3, #1
  407264:	930b      	str	r3, [sp, #44]	; 0x2c
  407266:	e666      	b.n	406f36 <_dtoa_r+0x72e>
  407268:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40726c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40726e:	e48f      	b.n	406b90 <_dtoa_r+0x388>
  407270:	004092f0 	.word	0x004092f0
  407274:	004092c8 	.word	0x004092c8
  407278:	3ff00000 	.word	0x3ff00000
  40727c:	401c0000 	.word	0x401c0000
  407280:	3fe00000 	.word	0x3fe00000
  407284:	40240000 	.word	0x40240000
  407288:	40140000 	.word	0x40140000
  40728c:	4650      	mov	r0, sl
  40728e:	f7fc fc63 	bl	403b58 <__aeabi_i2d>
  407292:	463a      	mov	r2, r7
  407294:	4643      	mov	r3, r8
  407296:	f7fc fcc5 	bl	403c24 <__aeabi_dmul>
  40729a:	2200      	movs	r2, #0
  40729c:	4bc1      	ldr	r3, [pc, #772]	; (4075a4 <_dtoa_r+0xd9c>)
  40729e:	f7fc fb0f 	bl	4038c0 <__adddf3>
  4072a2:	4605      	mov	r5, r0
  4072a4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4072a8:	4641      	mov	r1, r8
  4072aa:	2200      	movs	r2, #0
  4072ac:	4bbe      	ldr	r3, [pc, #760]	; (4075a8 <_dtoa_r+0xda0>)
  4072ae:	4638      	mov	r0, r7
  4072b0:	f7fc fb04 	bl	4038bc <__aeabi_dsub>
  4072b4:	462a      	mov	r2, r5
  4072b6:	4633      	mov	r3, r6
  4072b8:	4682      	mov	sl, r0
  4072ba:	468b      	mov	fp, r1
  4072bc:	f7fc ff42 	bl	404144 <__aeabi_dcmpgt>
  4072c0:	4680      	mov	r8, r0
  4072c2:	2800      	cmp	r0, #0
  4072c4:	f040 8110 	bne.w	4074e8 <_dtoa_r+0xce0>
  4072c8:	462a      	mov	r2, r5
  4072ca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4072ce:	4650      	mov	r0, sl
  4072d0:	4659      	mov	r1, fp
  4072d2:	f7fc ff19 	bl	404108 <__aeabi_dcmplt>
  4072d6:	b118      	cbz	r0, 4072e0 <_dtoa_r+0xad8>
  4072d8:	4646      	mov	r6, r8
  4072da:	e771      	b.n	4071c0 <_dtoa_r+0x9b8>
  4072dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4072e0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4072e4:	f7ff bb8a 	b.w	4069fc <_dtoa_r+0x1f4>
  4072e8:	9804      	ldr	r0, [sp, #16]
  4072ea:	f7ff babb 	b.w	406864 <_dtoa_r+0x5c>
  4072ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4072f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4072f2:	970c      	str	r7, [sp, #48]	; 0x30
  4072f4:	1afb      	subs	r3, r7, r3
  4072f6:	441a      	add	r2, r3
  4072f8:	920d      	str	r2, [sp, #52]	; 0x34
  4072fa:	2700      	movs	r7, #0
  4072fc:	e469      	b.n	406bd2 <_dtoa_r+0x3ca>
  4072fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407302:	f04f 0a02 	mov.w	sl, #2
  407306:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40730a:	e657      	b.n	406fbc <_dtoa_r+0x7b4>
  40730c:	2100      	movs	r1, #0
  40730e:	2301      	movs	r3, #1
  407310:	6461      	str	r1, [r4, #68]	; 0x44
  407312:	4620      	mov	r0, r4
  407314:	9325      	str	r3, [sp, #148]	; 0x94
  407316:	f000 ff07 	bl	408128 <_Balloc>
  40731a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40731c:	9004      	str	r0, [sp, #16]
  40731e:	6420      	str	r0, [r4, #64]	; 0x40
  407320:	930a      	str	r3, [sp, #40]	; 0x28
  407322:	930f      	str	r3, [sp, #60]	; 0x3c
  407324:	e629      	b.n	406f7a <_dtoa_r+0x772>
  407326:	2a00      	cmp	r2, #0
  407328:	46d0      	mov	r8, sl
  40732a:	f8cd b018 	str.w	fp, [sp, #24]
  40732e:	469a      	mov	sl, r3
  407330:	dd11      	ble.n	407356 <_dtoa_r+0xb4e>
  407332:	4649      	mov	r1, r9
  407334:	2201      	movs	r2, #1
  407336:	4620      	mov	r0, r4
  407338:	f001 f8a2 	bl	408480 <__lshift>
  40733c:	4641      	mov	r1, r8
  40733e:	4681      	mov	r9, r0
  407340:	f001 f8f0 	bl	408524 <__mcmp>
  407344:	2800      	cmp	r0, #0
  407346:	f340 8146 	ble.w	4075d6 <_dtoa_r+0xdce>
  40734a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40734e:	f000 8106 	beq.w	40755e <_dtoa_r+0xd56>
  407352:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407356:	46b3      	mov	fp, r6
  407358:	f887 a000 	strb.w	sl, [r7]
  40735c:	1c7d      	adds	r5, r7, #1
  40735e:	9e06      	ldr	r6, [sp, #24]
  407360:	e5d2      	b.n	406f08 <_dtoa_r+0x700>
  407362:	d104      	bne.n	40736e <_dtoa_r+0xb66>
  407364:	f01a 0f01 	tst.w	sl, #1
  407368:	d001      	beq.n	40736e <_dtoa_r+0xb66>
  40736a:	e5bd      	b.n	406ee8 <_dtoa_r+0x6e0>
  40736c:	4615      	mov	r5, r2
  40736e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407372:	2b30      	cmp	r3, #48	; 0x30
  407374:	f105 32ff 	add.w	r2, r5, #4294967295
  407378:	d0f8      	beq.n	40736c <_dtoa_r+0xb64>
  40737a:	e5c5      	b.n	406f08 <_dtoa_r+0x700>
  40737c:	9904      	ldr	r1, [sp, #16]
  40737e:	2230      	movs	r2, #48	; 0x30
  407380:	700a      	strb	r2, [r1, #0]
  407382:	9a02      	ldr	r2, [sp, #8]
  407384:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407388:	3201      	adds	r2, #1
  40738a:	9202      	str	r2, [sp, #8]
  40738c:	f7ff bbfc 	b.w	406b88 <_dtoa_r+0x380>
  407390:	f000 80bb 	beq.w	40750a <_dtoa_r+0xd02>
  407394:	9b02      	ldr	r3, [sp, #8]
  407396:	425d      	negs	r5, r3
  407398:	4b84      	ldr	r3, [pc, #528]	; (4075ac <_dtoa_r+0xda4>)
  40739a:	f005 020f 	and.w	r2, r5, #15
  40739e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4073aa:	f7fc fc3b 	bl	403c24 <__aeabi_dmul>
  4073ae:	112d      	asrs	r5, r5, #4
  4073b0:	4607      	mov	r7, r0
  4073b2:	4688      	mov	r8, r1
  4073b4:	f000 812c 	beq.w	407610 <_dtoa_r+0xe08>
  4073b8:	4e7d      	ldr	r6, [pc, #500]	; (4075b0 <_dtoa_r+0xda8>)
  4073ba:	f04f 0a02 	mov.w	sl, #2
  4073be:	07eb      	lsls	r3, r5, #31
  4073c0:	d509      	bpl.n	4073d6 <_dtoa_r+0xbce>
  4073c2:	4638      	mov	r0, r7
  4073c4:	4641      	mov	r1, r8
  4073c6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4073ca:	f7fc fc2b 	bl	403c24 <__aeabi_dmul>
  4073ce:	f10a 0a01 	add.w	sl, sl, #1
  4073d2:	4607      	mov	r7, r0
  4073d4:	4688      	mov	r8, r1
  4073d6:	106d      	asrs	r5, r5, #1
  4073d8:	f106 0608 	add.w	r6, r6, #8
  4073dc:	d1ef      	bne.n	4073be <_dtoa_r+0xbb6>
  4073de:	e608      	b.n	406ff2 <_dtoa_r+0x7ea>
  4073e0:	6871      	ldr	r1, [r6, #4]
  4073e2:	4620      	mov	r0, r4
  4073e4:	f000 fea0 	bl	408128 <_Balloc>
  4073e8:	6933      	ldr	r3, [r6, #16]
  4073ea:	3302      	adds	r3, #2
  4073ec:	009a      	lsls	r2, r3, #2
  4073ee:	4605      	mov	r5, r0
  4073f0:	f106 010c 	add.w	r1, r6, #12
  4073f4:	300c      	adds	r0, #12
  4073f6:	f7fd fb1f 	bl	404a38 <memcpy>
  4073fa:	4629      	mov	r1, r5
  4073fc:	2201      	movs	r2, #1
  4073fe:	4620      	mov	r0, r4
  407400:	f001 f83e 	bl	408480 <__lshift>
  407404:	9006      	str	r0, [sp, #24]
  407406:	e4b5      	b.n	406d74 <_dtoa_r+0x56c>
  407408:	2b39      	cmp	r3, #57	; 0x39
  40740a:	f8cd b018 	str.w	fp, [sp, #24]
  40740e:	46d0      	mov	r8, sl
  407410:	f000 80a5 	beq.w	40755e <_dtoa_r+0xd56>
  407414:	f103 0a01 	add.w	sl, r3, #1
  407418:	46b3      	mov	fp, r6
  40741a:	f887 a000 	strb.w	sl, [r7]
  40741e:	1c7d      	adds	r5, r7, #1
  407420:	9e06      	ldr	r6, [sp, #24]
  407422:	e571      	b.n	406f08 <_dtoa_r+0x700>
  407424:	465a      	mov	r2, fp
  407426:	46d0      	mov	r8, sl
  407428:	46b3      	mov	fp, r6
  40742a:	469a      	mov	sl, r3
  40742c:	4616      	mov	r6, r2
  40742e:	e54f      	b.n	406ed0 <_dtoa_r+0x6c8>
  407430:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407432:	495e      	ldr	r1, [pc, #376]	; (4075ac <_dtoa_r+0xda4>)
  407434:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407438:	462a      	mov	r2, r5
  40743a:	4633      	mov	r3, r6
  40743c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407440:	f7fc fbf0 	bl	403c24 <__aeabi_dmul>
  407444:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407448:	4638      	mov	r0, r7
  40744a:	4641      	mov	r1, r8
  40744c:	f001 fe56 	bl	4090fc <__aeabi_d2iz>
  407450:	4605      	mov	r5, r0
  407452:	f7fc fb81 	bl	403b58 <__aeabi_i2d>
  407456:	460b      	mov	r3, r1
  407458:	4602      	mov	r2, r0
  40745a:	4641      	mov	r1, r8
  40745c:	4638      	mov	r0, r7
  40745e:	f7fc fa2d 	bl	4038bc <__aeabi_dsub>
  407462:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407464:	460f      	mov	r7, r1
  407466:	9904      	ldr	r1, [sp, #16]
  407468:	3530      	adds	r5, #48	; 0x30
  40746a:	2b01      	cmp	r3, #1
  40746c:	700d      	strb	r5, [r1, #0]
  40746e:	4606      	mov	r6, r0
  407470:	f101 0501 	add.w	r5, r1, #1
  407474:	d026      	beq.n	4074c4 <_dtoa_r+0xcbc>
  407476:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407478:	9a04      	ldr	r2, [sp, #16]
  40747a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4075b8 <_dtoa_r+0xdb0>
  40747e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407482:	4413      	add	r3, r2
  407484:	f04f 0a00 	mov.w	sl, #0
  407488:	4699      	mov	r9, r3
  40748a:	4652      	mov	r2, sl
  40748c:	465b      	mov	r3, fp
  40748e:	4630      	mov	r0, r6
  407490:	4639      	mov	r1, r7
  407492:	f7fc fbc7 	bl	403c24 <__aeabi_dmul>
  407496:	460f      	mov	r7, r1
  407498:	4606      	mov	r6, r0
  40749a:	f001 fe2f 	bl	4090fc <__aeabi_d2iz>
  40749e:	4680      	mov	r8, r0
  4074a0:	f7fc fb5a 	bl	403b58 <__aeabi_i2d>
  4074a4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4074a8:	4602      	mov	r2, r0
  4074aa:	460b      	mov	r3, r1
  4074ac:	4630      	mov	r0, r6
  4074ae:	4639      	mov	r1, r7
  4074b0:	f7fc fa04 	bl	4038bc <__aeabi_dsub>
  4074b4:	f805 8b01 	strb.w	r8, [r5], #1
  4074b8:	454d      	cmp	r5, r9
  4074ba:	4606      	mov	r6, r0
  4074bc:	460f      	mov	r7, r1
  4074be:	d1e4      	bne.n	40748a <_dtoa_r+0xc82>
  4074c0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4074c4:	4b3b      	ldr	r3, [pc, #236]	; (4075b4 <_dtoa_r+0xdac>)
  4074c6:	2200      	movs	r2, #0
  4074c8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4074cc:	f7fc f9f8 	bl	4038c0 <__adddf3>
  4074d0:	4632      	mov	r2, r6
  4074d2:	463b      	mov	r3, r7
  4074d4:	f7fc fe18 	bl	404108 <__aeabi_dcmplt>
  4074d8:	2800      	cmp	r0, #0
  4074da:	d046      	beq.n	40756a <_dtoa_r+0xd62>
  4074dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4074de:	9302      	str	r3, [sp, #8]
  4074e0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4074e4:	f7ff bb43 	b.w	406b6e <_dtoa_r+0x366>
  4074e8:	f04f 0800 	mov.w	r8, #0
  4074ec:	4646      	mov	r6, r8
  4074ee:	e6a9      	b.n	407244 <_dtoa_r+0xa3c>
  4074f0:	9b08      	ldr	r3, [sp, #32]
  4074f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4074f4:	1a9d      	subs	r5, r3, r2
  4074f6:	2300      	movs	r3, #0
  4074f8:	f7ff bb71 	b.w	406bde <_dtoa_r+0x3d6>
  4074fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4074fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407500:	9d08      	ldr	r5, [sp, #32]
  407502:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407506:	f7ff bb6a 	b.w	406bde <_dtoa_r+0x3d6>
  40750a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40750e:	f04f 0a02 	mov.w	sl, #2
  407512:	e56e      	b.n	406ff2 <_dtoa_r+0x7ea>
  407514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407516:	2b00      	cmp	r3, #0
  407518:	f43f aeb8 	beq.w	40728c <_dtoa_r+0xa84>
  40751c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40751e:	2b00      	cmp	r3, #0
  407520:	f77f aede 	ble.w	4072e0 <_dtoa_r+0xad8>
  407524:	2200      	movs	r2, #0
  407526:	4b24      	ldr	r3, [pc, #144]	; (4075b8 <_dtoa_r+0xdb0>)
  407528:	4638      	mov	r0, r7
  40752a:	4641      	mov	r1, r8
  40752c:	f7fc fb7a 	bl	403c24 <__aeabi_dmul>
  407530:	4607      	mov	r7, r0
  407532:	4688      	mov	r8, r1
  407534:	f10a 0001 	add.w	r0, sl, #1
  407538:	f7fc fb0e 	bl	403b58 <__aeabi_i2d>
  40753c:	463a      	mov	r2, r7
  40753e:	4643      	mov	r3, r8
  407540:	f7fc fb70 	bl	403c24 <__aeabi_dmul>
  407544:	2200      	movs	r2, #0
  407546:	4b17      	ldr	r3, [pc, #92]	; (4075a4 <_dtoa_r+0xd9c>)
  407548:	f7fc f9ba 	bl	4038c0 <__adddf3>
  40754c:	9a02      	ldr	r2, [sp, #8]
  40754e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407550:	9312      	str	r3, [sp, #72]	; 0x48
  407552:	3a01      	subs	r2, #1
  407554:	4605      	mov	r5, r0
  407556:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40755a:	9215      	str	r2, [sp, #84]	; 0x54
  40755c:	e56a      	b.n	407034 <_dtoa_r+0x82c>
  40755e:	2239      	movs	r2, #57	; 0x39
  407560:	46b3      	mov	fp, r6
  407562:	703a      	strb	r2, [r7, #0]
  407564:	9e06      	ldr	r6, [sp, #24]
  407566:	1c7d      	adds	r5, r7, #1
  407568:	e4c0      	b.n	406eec <_dtoa_r+0x6e4>
  40756a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40756e:	2000      	movs	r0, #0
  407570:	4910      	ldr	r1, [pc, #64]	; (4075b4 <_dtoa_r+0xdac>)
  407572:	f7fc f9a3 	bl	4038bc <__aeabi_dsub>
  407576:	4632      	mov	r2, r6
  407578:	463b      	mov	r3, r7
  40757a:	f7fc fde3 	bl	404144 <__aeabi_dcmpgt>
  40757e:	b908      	cbnz	r0, 407584 <_dtoa_r+0xd7c>
  407580:	e6ae      	b.n	4072e0 <_dtoa_r+0xad8>
  407582:	4615      	mov	r5, r2
  407584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407588:	2b30      	cmp	r3, #48	; 0x30
  40758a:	f105 32ff 	add.w	r2, r5, #4294967295
  40758e:	d0f8      	beq.n	407582 <_dtoa_r+0xd7a>
  407590:	e5d7      	b.n	407142 <_dtoa_r+0x93a>
  407592:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407596:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407598:	9302      	str	r3, [sp, #8]
  40759a:	f7ff bae8 	b.w	406b6e <_dtoa_r+0x366>
  40759e:	970c      	str	r7, [sp, #48]	; 0x30
  4075a0:	f7ff bba5 	b.w	406cee <_dtoa_r+0x4e6>
  4075a4:	401c0000 	.word	0x401c0000
  4075a8:	40140000 	.word	0x40140000
  4075ac:	004092f0 	.word	0x004092f0
  4075b0:	004092c8 	.word	0x004092c8
  4075b4:	3fe00000 	.word	0x3fe00000
  4075b8:	40240000 	.word	0x40240000
  4075bc:	2b39      	cmp	r3, #57	; 0x39
  4075be:	f8cd b018 	str.w	fp, [sp, #24]
  4075c2:	46d0      	mov	r8, sl
  4075c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4075c8:	469a      	mov	sl, r3
  4075ca:	d0c8      	beq.n	40755e <_dtoa_r+0xd56>
  4075cc:	f1bb 0f00 	cmp.w	fp, #0
  4075d0:	f73f aebf 	bgt.w	407352 <_dtoa_r+0xb4a>
  4075d4:	e6bf      	b.n	407356 <_dtoa_r+0xb4e>
  4075d6:	f47f aebe 	bne.w	407356 <_dtoa_r+0xb4e>
  4075da:	f01a 0f01 	tst.w	sl, #1
  4075de:	f43f aeba 	beq.w	407356 <_dtoa_r+0xb4e>
  4075e2:	e6b2      	b.n	40734a <_dtoa_r+0xb42>
  4075e4:	f04f 0800 	mov.w	r8, #0
  4075e8:	4646      	mov	r6, r8
  4075ea:	e5e9      	b.n	4071c0 <_dtoa_r+0x9b8>
  4075ec:	4631      	mov	r1, r6
  4075ee:	2300      	movs	r3, #0
  4075f0:	220a      	movs	r2, #10
  4075f2:	4620      	mov	r0, r4
  4075f4:	f000 fdc8 	bl	408188 <__multadd>
  4075f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4075fa:	2b00      	cmp	r3, #0
  4075fc:	4606      	mov	r6, r0
  4075fe:	dd0a      	ble.n	407616 <_dtoa_r+0xe0e>
  407600:	930a      	str	r3, [sp, #40]	; 0x28
  407602:	f7ff bbaa 	b.w	406d5a <_dtoa_r+0x552>
  407606:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407608:	2b02      	cmp	r3, #2
  40760a:	dc23      	bgt.n	407654 <_dtoa_r+0xe4c>
  40760c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40760e:	e43b      	b.n	406e88 <_dtoa_r+0x680>
  407610:	f04f 0a02 	mov.w	sl, #2
  407614:	e4ed      	b.n	406ff2 <_dtoa_r+0x7ea>
  407616:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407618:	2b02      	cmp	r3, #2
  40761a:	dc1b      	bgt.n	407654 <_dtoa_r+0xe4c>
  40761c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40761e:	e7ef      	b.n	407600 <_dtoa_r+0xdf8>
  407620:	2500      	movs	r5, #0
  407622:	6465      	str	r5, [r4, #68]	; 0x44
  407624:	4629      	mov	r1, r5
  407626:	4620      	mov	r0, r4
  407628:	f000 fd7e 	bl	408128 <_Balloc>
  40762c:	f04f 33ff 	mov.w	r3, #4294967295
  407630:	930a      	str	r3, [sp, #40]	; 0x28
  407632:	930f      	str	r3, [sp, #60]	; 0x3c
  407634:	2301      	movs	r3, #1
  407636:	9004      	str	r0, [sp, #16]
  407638:	9525      	str	r5, [sp, #148]	; 0x94
  40763a:	6420      	str	r0, [r4, #64]	; 0x40
  40763c:	930b      	str	r3, [sp, #44]	; 0x2c
  40763e:	f7ff b9dd 	b.w	4069fc <_dtoa_r+0x1f4>
  407642:	2501      	movs	r5, #1
  407644:	f7ff b9a5 	b.w	406992 <_dtoa_r+0x18a>
  407648:	f43f ab69 	beq.w	406d1e <_dtoa_r+0x516>
  40764c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407650:	f7ff bbf9 	b.w	406e46 <_dtoa_r+0x63e>
  407654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407656:	930a      	str	r3, [sp, #40]	; 0x28
  407658:	e5e5      	b.n	407226 <_dtoa_r+0xa1e>
  40765a:	bf00      	nop

0040765c <__sflush_r>:
  40765c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407660:	b29a      	uxth	r2, r3
  407662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407666:	460d      	mov	r5, r1
  407668:	0711      	lsls	r1, r2, #28
  40766a:	4680      	mov	r8, r0
  40766c:	d43a      	bmi.n	4076e4 <__sflush_r+0x88>
  40766e:	686a      	ldr	r2, [r5, #4]
  407670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407674:	2a00      	cmp	r2, #0
  407676:	81ab      	strh	r3, [r5, #12]
  407678:	dd6f      	ble.n	40775a <__sflush_r+0xfe>
  40767a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40767c:	2c00      	cmp	r4, #0
  40767e:	d049      	beq.n	407714 <__sflush_r+0xb8>
  407680:	2200      	movs	r2, #0
  407682:	b29b      	uxth	r3, r3
  407684:	f8d8 6000 	ldr.w	r6, [r8]
  407688:	f8c8 2000 	str.w	r2, [r8]
  40768c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407690:	d067      	beq.n	407762 <__sflush_r+0x106>
  407692:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407694:	075f      	lsls	r7, r3, #29
  407696:	d505      	bpl.n	4076a4 <__sflush_r+0x48>
  407698:	6869      	ldr	r1, [r5, #4]
  40769a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40769c:	1a52      	subs	r2, r2, r1
  40769e:	b10b      	cbz	r3, 4076a4 <__sflush_r+0x48>
  4076a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4076a2:	1ad2      	subs	r2, r2, r3
  4076a4:	2300      	movs	r3, #0
  4076a6:	69e9      	ldr	r1, [r5, #28]
  4076a8:	4640      	mov	r0, r8
  4076aa:	47a0      	blx	r4
  4076ac:	1c44      	adds	r4, r0, #1
  4076ae:	d03c      	beq.n	40772a <__sflush_r+0xce>
  4076b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4076b4:	692a      	ldr	r2, [r5, #16]
  4076b6:	602a      	str	r2, [r5, #0]
  4076b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4076bc:	2200      	movs	r2, #0
  4076be:	81ab      	strh	r3, [r5, #12]
  4076c0:	04db      	lsls	r3, r3, #19
  4076c2:	606a      	str	r2, [r5, #4]
  4076c4:	d447      	bmi.n	407756 <__sflush_r+0xfa>
  4076c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4076c8:	f8c8 6000 	str.w	r6, [r8]
  4076cc:	b311      	cbz	r1, 407714 <__sflush_r+0xb8>
  4076ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4076d2:	4299      	cmp	r1, r3
  4076d4:	d002      	beq.n	4076dc <__sflush_r+0x80>
  4076d6:	4640      	mov	r0, r8
  4076d8:	f000 f95a 	bl	407990 <_free_r>
  4076dc:	2000      	movs	r0, #0
  4076de:	6328      	str	r0, [r5, #48]	; 0x30
  4076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4076e4:	692e      	ldr	r6, [r5, #16]
  4076e6:	b1ae      	cbz	r6, 407714 <__sflush_r+0xb8>
  4076e8:	682c      	ldr	r4, [r5, #0]
  4076ea:	602e      	str	r6, [r5, #0]
  4076ec:	0791      	lsls	r1, r2, #30
  4076ee:	bf0c      	ite	eq
  4076f0:	696b      	ldreq	r3, [r5, #20]
  4076f2:	2300      	movne	r3, #0
  4076f4:	1ba4      	subs	r4, r4, r6
  4076f6:	60ab      	str	r3, [r5, #8]
  4076f8:	e00a      	b.n	407710 <__sflush_r+0xb4>
  4076fa:	4623      	mov	r3, r4
  4076fc:	4632      	mov	r2, r6
  4076fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407700:	69e9      	ldr	r1, [r5, #28]
  407702:	4640      	mov	r0, r8
  407704:	47b8      	blx	r7
  407706:	2800      	cmp	r0, #0
  407708:	eba4 0400 	sub.w	r4, r4, r0
  40770c:	4406      	add	r6, r0
  40770e:	dd04      	ble.n	40771a <__sflush_r+0xbe>
  407710:	2c00      	cmp	r4, #0
  407712:	dcf2      	bgt.n	4076fa <__sflush_r+0x9e>
  407714:	2000      	movs	r0, #0
  407716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40771a:	89ab      	ldrh	r3, [r5, #12]
  40771c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407720:	81ab      	strh	r3, [r5, #12]
  407722:	f04f 30ff 	mov.w	r0, #4294967295
  407726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40772a:	f8d8 4000 	ldr.w	r4, [r8]
  40772e:	2c1d      	cmp	r4, #29
  407730:	d8f3      	bhi.n	40771a <__sflush_r+0xbe>
  407732:	4b19      	ldr	r3, [pc, #100]	; (407798 <__sflush_r+0x13c>)
  407734:	40e3      	lsrs	r3, r4
  407736:	43db      	mvns	r3, r3
  407738:	f013 0301 	ands.w	r3, r3, #1
  40773c:	d1ed      	bne.n	40771a <__sflush_r+0xbe>
  40773e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407742:	606b      	str	r3, [r5, #4]
  407744:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407748:	6929      	ldr	r1, [r5, #16]
  40774a:	81ab      	strh	r3, [r5, #12]
  40774c:	04da      	lsls	r2, r3, #19
  40774e:	6029      	str	r1, [r5, #0]
  407750:	d5b9      	bpl.n	4076c6 <__sflush_r+0x6a>
  407752:	2c00      	cmp	r4, #0
  407754:	d1b7      	bne.n	4076c6 <__sflush_r+0x6a>
  407756:	6528      	str	r0, [r5, #80]	; 0x50
  407758:	e7b5      	b.n	4076c6 <__sflush_r+0x6a>
  40775a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40775c:	2a00      	cmp	r2, #0
  40775e:	dc8c      	bgt.n	40767a <__sflush_r+0x1e>
  407760:	e7d8      	b.n	407714 <__sflush_r+0xb8>
  407762:	2301      	movs	r3, #1
  407764:	69e9      	ldr	r1, [r5, #28]
  407766:	4640      	mov	r0, r8
  407768:	47a0      	blx	r4
  40776a:	1c43      	adds	r3, r0, #1
  40776c:	4602      	mov	r2, r0
  40776e:	d002      	beq.n	407776 <__sflush_r+0x11a>
  407770:	89ab      	ldrh	r3, [r5, #12]
  407772:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407774:	e78e      	b.n	407694 <__sflush_r+0x38>
  407776:	f8d8 3000 	ldr.w	r3, [r8]
  40777a:	2b00      	cmp	r3, #0
  40777c:	d0f8      	beq.n	407770 <__sflush_r+0x114>
  40777e:	2b1d      	cmp	r3, #29
  407780:	d001      	beq.n	407786 <__sflush_r+0x12a>
  407782:	2b16      	cmp	r3, #22
  407784:	d102      	bne.n	40778c <__sflush_r+0x130>
  407786:	f8c8 6000 	str.w	r6, [r8]
  40778a:	e7c3      	b.n	407714 <__sflush_r+0xb8>
  40778c:	89ab      	ldrh	r3, [r5, #12]
  40778e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407792:	81ab      	strh	r3, [r5, #12]
  407794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407798:	20400001 	.word	0x20400001

0040779c <_fflush_r>:
  40779c:	b538      	push	{r3, r4, r5, lr}
  40779e:	460d      	mov	r5, r1
  4077a0:	4604      	mov	r4, r0
  4077a2:	b108      	cbz	r0, 4077a8 <_fflush_r+0xc>
  4077a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4077a6:	b1bb      	cbz	r3, 4077d8 <_fflush_r+0x3c>
  4077a8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4077ac:	b188      	cbz	r0, 4077d2 <_fflush_r+0x36>
  4077ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4077b0:	07db      	lsls	r3, r3, #31
  4077b2:	d401      	bmi.n	4077b8 <_fflush_r+0x1c>
  4077b4:	0581      	lsls	r1, r0, #22
  4077b6:	d517      	bpl.n	4077e8 <_fflush_r+0x4c>
  4077b8:	4620      	mov	r0, r4
  4077ba:	4629      	mov	r1, r5
  4077bc:	f7ff ff4e 	bl	40765c <__sflush_r>
  4077c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4077c2:	07da      	lsls	r2, r3, #31
  4077c4:	4604      	mov	r4, r0
  4077c6:	d402      	bmi.n	4077ce <_fflush_r+0x32>
  4077c8:	89ab      	ldrh	r3, [r5, #12]
  4077ca:	059b      	lsls	r3, r3, #22
  4077cc:	d507      	bpl.n	4077de <_fflush_r+0x42>
  4077ce:	4620      	mov	r0, r4
  4077d0:	bd38      	pop	{r3, r4, r5, pc}
  4077d2:	4604      	mov	r4, r0
  4077d4:	4620      	mov	r0, r4
  4077d6:	bd38      	pop	{r3, r4, r5, pc}
  4077d8:	f000 f838 	bl	40784c <__sinit>
  4077dc:	e7e4      	b.n	4077a8 <_fflush_r+0xc>
  4077de:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4077e0:	f000 fb72 	bl	407ec8 <__retarget_lock_release_recursive>
  4077e4:	4620      	mov	r0, r4
  4077e6:	bd38      	pop	{r3, r4, r5, pc}
  4077e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4077ea:	f000 fb6b 	bl	407ec4 <__retarget_lock_acquire_recursive>
  4077ee:	e7e3      	b.n	4077b8 <_fflush_r+0x1c>

004077f0 <_cleanup_r>:
  4077f0:	4901      	ldr	r1, [pc, #4]	; (4077f8 <_cleanup_r+0x8>)
  4077f2:	f000 bb2b 	b.w	407e4c <_fwalk_reent>
  4077f6:	bf00      	nop
  4077f8:	00408cf9 	.word	0x00408cf9

004077fc <std.isra.0>:
  4077fc:	b510      	push	{r4, lr}
  4077fe:	2300      	movs	r3, #0
  407800:	4604      	mov	r4, r0
  407802:	8181      	strh	r1, [r0, #12]
  407804:	81c2      	strh	r2, [r0, #14]
  407806:	6003      	str	r3, [r0, #0]
  407808:	6043      	str	r3, [r0, #4]
  40780a:	6083      	str	r3, [r0, #8]
  40780c:	6643      	str	r3, [r0, #100]	; 0x64
  40780e:	6103      	str	r3, [r0, #16]
  407810:	6143      	str	r3, [r0, #20]
  407812:	6183      	str	r3, [r0, #24]
  407814:	4619      	mov	r1, r3
  407816:	2208      	movs	r2, #8
  407818:	305c      	adds	r0, #92	; 0x5c
  40781a:	f7fd f9a7 	bl	404b6c <memset>
  40781e:	4807      	ldr	r0, [pc, #28]	; (40783c <std.isra.0+0x40>)
  407820:	4907      	ldr	r1, [pc, #28]	; (407840 <std.isra.0+0x44>)
  407822:	4a08      	ldr	r2, [pc, #32]	; (407844 <std.isra.0+0x48>)
  407824:	4b08      	ldr	r3, [pc, #32]	; (407848 <std.isra.0+0x4c>)
  407826:	6220      	str	r0, [r4, #32]
  407828:	61e4      	str	r4, [r4, #28]
  40782a:	6261      	str	r1, [r4, #36]	; 0x24
  40782c:	62a2      	str	r2, [r4, #40]	; 0x28
  40782e:	62e3      	str	r3, [r4, #44]	; 0x2c
  407830:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407838:	f000 bb40 	b.w	407ebc <__retarget_lock_init_recursive>
  40783c:	00408a69 	.word	0x00408a69
  407840:	00408a8d 	.word	0x00408a8d
  407844:	00408ac9 	.word	0x00408ac9
  407848:	00408ae9 	.word	0x00408ae9

0040784c <__sinit>:
  40784c:	b510      	push	{r4, lr}
  40784e:	4604      	mov	r4, r0
  407850:	4812      	ldr	r0, [pc, #72]	; (40789c <__sinit+0x50>)
  407852:	f000 fb37 	bl	407ec4 <__retarget_lock_acquire_recursive>
  407856:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407858:	b9d2      	cbnz	r2, 407890 <__sinit+0x44>
  40785a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40785e:	4810      	ldr	r0, [pc, #64]	; (4078a0 <__sinit+0x54>)
  407860:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407864:	2103      	movs	r1, #3
  407866:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40786a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40786c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407870:	6860      	ldr	r0, [r4, #4]
  407872:	2104      	movs	r1, #4
  407874:	f7ff ffc2 	bl	4077fc <std.isra.0>
  407878:	2201      	movs	r2, #1
  40787a:	2109      	movs	r1, #9
  40787c:	68a0      	ldr	r0, [r4, #8]
  40787e:	f7ff ffbd 	bl	4077fc <std.isra.0>
  407882:	2202      	movs	r2, #2
  407884:	2112      	movs	r1, #18
  407886:	68e0      	ldr	r0, [r4, #12]
  407888:	f7ff ffb8 	bl	4077fc <std.isra.0>
  40788c:	2301      	movs	r3, #1
  40788e:	63a3      	str	r3, [r4, #56]	; 0x38
  407890:	4802      	ldr	r0, [pc, #8]	; (40789c <__sinit+0x50>)
  407892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407896:	f000 bb17 	b.w	407ec8 <__retarget_lock_release_recursive>
  40789a:	bf00      	nop
  40789c:	20400e38 	.word	0x20400e38
  4078a0:	004077f1 	.word	0x004077f1

004078a4 <__sfp_lock_acquire>:
  4078a4:	4801      	ldr	r0, [pc, #4]	; (4078ac <__sfp_lock_acquire+0x8>)
  4078a6:	f000 bb0d 	b.w	407ec4 <__retarget_lock_acquire_recursive>
  4078aa:	bf00      	nop
  4078ac:	20400e4c 	.word	0x20400e4c

004078b0 <__sfp_lock_release>:
  4078b0:	4801      	ldr	r0, [pc, #4]	; (4078b8 <__sfp_lock_release+0x8>)
  4078b2:	f000 bb09 	b.w	407ec8 <__retarget_lock_release_recursive>
  4078b6:	bf00      	nop
  4078b8:	20400e4c 	.word	0x20400e4c

004078bc <__libc_fini_array>:
  4078bc:	b538      	push	{r3, r4, r5, lr}
  4078be:	4c0a      	ldr	r4, [pc, #40]	; (4078e8 <__libc_fini_array+0x2c>)
  4078c0:	4d0a      	ldr	r5, [pc, #40]	; (4078ec <__libc_fini_array+0x30>)
  4078c2:	1b64      	subs	r4, r4, r5
  4078c4:	10a4      	asrs	r4, r4, #2
  4078c6:	d00a      	beq.n	4078de <__libc_fini_array+0x22>
  4078c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4078cc:	3b01      	subs	r3, #1
  4078ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4078d2:	3c01      	subs	r4, #1
  4078d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4078d8:	4798      	blx	r3
  4078da:	2c00      	cmp	r4, #0
  4078dc:	d1f9      	bne.n	4078d2 <__libc_fini_array+0x16>
  4078de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4078e2:	f001 be03 	b.w	4094ec <_fini>
  4078e6:	bf00      	nop
  4078e8:	004094fc 	.word	0x004094fc
  4078ec:	004094f8 	.word	0x004094f8

004078f0 <_malloc_trim_r>:
  4078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078f2:	4f24      	ldr	r7, [pc, #144]	; (407984 <_malloc_trim_r+0x94>)
  4078f4:	460c      	mov	r4, r1
  4078f6:	4606      	mov	r6, r0
  4078f8:	f7fd f986 	bl	404c08 <__malloc_lock>
  4078fc:	68bb      	ldr	r3, [r7, #8]
  4078fe:	685d      	ldr	r5, [r3, #4]
  407900:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407904:	310f      	adds	r1, #15
  407906:	f025 0503 	bic.w	r5, r5, #3
  40790a:	4429      	add	r1, r5
  40790c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407910:	f021 010f 	bic.w	r1, r1, #15
  407914:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407918:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40791c:	db07      	blt.n	40792e <_malloc_trim_r+0x3e>
  40791e:	2100      	movs	r1, #0
  407920:	4630      	mov	r0, r6
  407922:	f7fd fa11 	bl	404d48 <_sbrk_r>
  407926:	68bb      	ldr	r3, [r7, #8]
  407928:	442b      	add	r3, r5
  40792a:	4298      	cmp	r0, r3
  40792c:	d004      	beq.n	407938 <_malloc_trim_r+0x48>
  40792e:	4630      	mov	r0, r6
  407930:	f7fd f970 	bl	404c14 <__malloc_unlock>
  407934:	2000      	movs	r0, #0
  407936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407938:	4261      	negs	r1, r4
  40793a:	4630      	mov	r0, r6
  40793c:	f7fd fa04 	bl	404d48 <_sbrk_r>
  407940:	3001      	adds	r0, #1
  407942:	d00d      	beq.n	407960 <_malloc_trim_r+0x70>
  407944:	4b10      	ldr	r3, [pc, #64]	; (407988 <_malloc_trim_r+0x98>)
  407946:	68ba      	ldr	r2, [r7, #8]
  407948:	6819      	ldr	r1, [r3, #0]
  40794a:	1b2d      	subs	r5, r5, r4
  40794c:	f045 0501 	orr.w	r5, r5, #1
  407950:	4630      	mov	r0, r6
  407952:	1b09      	subs	r1, r1, r4
  407954:	6055      	str	r5, [r2, #4]
  407956:	6019      	str	r1, [r3, #0]
  407958:	f7fd f95c 	bl	404c14 <__malloc_unlock>
  40795c:	2001      	movs	r0, #1
  40795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407960:	2100      	movs	r1, #0
  407962:	4630      	mov	r0, r6
  407964:	f7fd f9f0 	bl	404d48 <_sbrk_r>
  407968:	68ba      	ldr	r2, [r7, #8]
  40796a:	1a83      	subs	r3, r0, r2
  40796c:	2b0f      	cmp	r3, #15
  40796e:	ddde      	ble.n	40792e <_malloc_trim_r+0x3e>
  407970:	4c06      	ldr	r4, [pc, #24]	; (40798c <_malloc_trim_r+0x9c>)
  407972:	4905      	ldr	r1, [pc, #20]	; (407988 <_malloc_trim_r+0x98>)
  407974:	6824      	ldr	r4, [r4, #0]
  407976:	f043 0301 	orr.w	r3, r3, #1
  40797a:	1b00      	subs	r0, r0, r4
  40797c:	6053      	str	r3, [r2, #4]
  40797e:	6008      	str	r0, [r1, #0]
  407980:	e7d5      	b.n	40792e <_malloc_trim_r+0x3e>
  407982:	bf00      	nop
  407984:	20400440 	.word	0x20400440
  407988:	20400da0 	.word	0x20400da0
  40798c:	20400848 	.word	0x20400848

00407990 <_free_r>:
  407990:	2900      	cmp	r1, #0
  407992:	d044      	beq.n	407a1e <_free_r+0x8e>
  407994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407998:	460d      	mov	r5, r1
  40799a:	4680      	mov	r8, r0
  40799c:	f7fd f934 	bl	404c08 <__malloc_lock>
  4079a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4079a4:	4969      	ldr	r1, [pc, #420]	; (407b4c <_free_r+0x1bc>)
  4079a6:	f027 0301 	bic.w	r3, r7, #1
  4079aa:	f1a5 0408 	sub.w	r4, r5, #8
  4079ae:	18e2      	adds	r2, r4, r3
  4079b0:	688e      	ldr	r6, [r1, #8]
  4079b2:	6850      	ldr	r0, [r2, #4]
  4079b4:	42b2      	cmp	r2, r6
  4079b6:	f020 0003 	bic.w	r0, r0, #3
  4079ba:	d05e      	beq.n	407a7a <_free_r+0xea>
  4079bc:	07fe      	lsls	r6, r7, #31
  4079be:	6050      	str	r0, [r2, #4]
  4079c0:	d40b      	bmi.n	4079da <_free_r+0x4a>
  4079c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4079c6:	1be4      	subs	r4, r4, r7
  4079c8:	f101 0e08 	add.w	lr, r1, #8
  4079cc:	68a5      	ldr	r5, [r4, #8]
  4079ce:	4575      	cmp	r5, lr
  4079d0:	443b      	add	r3, r7
  4079d2:	d06d      	beq.n	407ab0 <_free_r+0x120>
  4079d4:	68e7      	ldr	r7, [r4, #12]
  4079d6:	60ef      	str	r7, [r5, #12]
  4079d8:	60bd      	str	r5, [r7, #8]
  4079da:	1815      	adds	r5, r2, r0
  4079dc:	686d      	ldr	r5, [r5, #4]
  4079de:	07ed      	lsls	r5, r5, #31
  4079e0:	d53e      	bpl.n	407a60 <_free_r+0xd0>
  4079e2:	f043 0201 	orr.w	r2, r3, #1
  4079e6:	6062      	str	r2, [r4, #4]
  4079e8:	50e3      	str	r3, [r4, r3]
  4079ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4079ee:	d217      	bcs.n	407a20 <_free_r+0x90>
  4079f0:	08db      	lsrs	r3, r3, #3
  4079f2:	1c58      	adds	r0, r3, #1
  4079f4:	109a      	asrs	r2, r3, #2
  4079f6:	684d      	ldr	r5, [r1, #4]
  4079f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4079fc:	60a7      	str	r7, [r4, #8]
  4079fe:	2301      	movs	r3, #1
  407a00:	4093      	lsls	r3, r2
  407a02:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407a06:	432b      	orrs	r3, r5
  407a08:	3a08      	subs	r2, #8
  407a0a:	60e2      	str	r2, [r4, #12]
  407a0c:	604b      	str	r3, [r1, #4]
  407a0e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407a12:	60fc      	str	r4, [r7, #12]
  407a14:	4640      	mov	r0, r8
  407a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407a1a:	f7fd b8fb 	b.w	404c14 <__malloc_unlock>
  407a1e:	4770      	bx	lr
  407a20:	0a5a      	lsrs	r2, r3, #9
  407a22:	2a04      	cmp	r2, #4
  407a24:	d852      	bhi.n	407acc <_free_r+0x13c>
  407a26:	099a      	lsrs	r2, r3, #6
  407a28:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407a2c:	00ff      	lsls	r7, r7, #3
  407a2e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407a32:	19c8      	adds	r0, r1, r7
  407a34:	59ca      	ldr	r2, [r1, r7]
  407a36:	3808      	subs	r0, #8
  407a38:	4290      	cmp	r0, r2
  407a3a:	d04f      	beq.n	407adc <_free_r+0x14c>
  407a3c:	6851      	ldr	r1, [r2, #4]
  407a3e:	f021 0103 	bic.w	r1, r1, #3
  407a42:	428b      	cmp	r3, r1
  407a44:	d232      	bcs.n	407aac <_free_r+0x11c>
  407a46:	6892      	ldr	r2, [r2, #8]
  407a48:	4290      	cmp	r0, r2
  407a4a:	d1f7      	bne.n	407a3c <_free_r+0xac>
  407a4c:	68c3      	ldr	r3, [r0, #12]
  407a4e:	60a0      	str	r0, [r4, #8]
  407a50:	60e3      	str	r3, [r4, #12]
  407a52:	609c      	str	r4, [r3, #8]
  407a54:	60c4      	str	r4, [r0, #12]
  407a56:	4640      	mov	r0, r8
  407a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407a5c:	f7fd b8da 	b.w	404c14 <__malloc_unlock>
  407a60:	6895      	ldr	r5, [r2, #8]
  407a62:	4f3b      	ldr	r7, [pc, #236]	; (407b50 <_free_r+0x1c0>)
  407a64:	42bd      	cmp	r5, r7
  407a66:	4403      	add	r3, r0
  407a68:	d040      	beq.n	407aec <_free_r+0x15c>
  407a6a:	68d0      	ldr	r0, [r2, #12]
  407a6c:	60e8      	str	r0, [r5, #12]
  407a6e:	f043 0201 	orr.w	r2, r3, #1
  407a72:	6085      	str	r5, [r0, #8]
  407a74:	6062      	str	r2, [r4, #4]
  407a76:	50e3      	str	r3, [r4, r3]
  407a78:	e7b7      	b.n	4079ea <_free_r+0x5a>
  407a7a:	07ff      	lsls	r7, r7, #31
  407a7c:	4403      	add	r3, r0
  407a7e:	d407      	bmi.n	407a90 <_free_r+0x100>
  407a80:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407a84:	1aa4      	subs	r4, r4, r2
  407a86:	4413      	add	r3, r2
  407a88:	68a0      	ldr	r0, [r4, #8]
  407a8a:	68e2      	ldr	r2, [r4, #12]
  407a8c:	60c2      	str	r2, [r0, #12]
  407a8e:	6090      	str	r0, [r2, #8]
  407a90:	4a30      	ldr	r2, [pc, #192]	; (407b54 <_free_r+0x1c4>)
  407a92:	6812      	ldr	r2, [r2, #0]
  407a94:	f043 0001 	orr.w	r0, r3, #1
  407a98:	4293      	cmp	r3, r2
  407a9a:	6060      	str	r0, [r4, #4]
  407a9c:	608c      	str	r4, [r1, #8]
  407a9e:	d3b9      	bcc.n	407a14 <_free_r+0x84>
  407aa0:	4b2d      	ldr	r3, [pc, #180]	; (407b58 <_free_r+0x1c8>)
  407aa2:	4640      	mov	r0, r8
  407aa4:	6819      	ldr	r1, [r3, #0]
  407aa6:	f7ff ff23 	bl	4078f0 <_malloc_trim_r>
  407aaa:	e7b3      	b.n	407a14 <_free_r+0x84>
  407aac:	4610      	mov	r0, r2
  407aae:	e7cd      	b.n	407a4c <_free_r+0xbc>
  407ab0:	1811      	adds	r1, r2, r0
  407ab2:	6849      	ldr	r1, [r1, #4]
  407ab4:	07c9      	lsls	r1, r1, #31
  407ab6:	d444      	bmi.n	407b42 <_free_r+0x1b2>
  407ab8:	6891      	ldr	r1, [r2, #8]
  407aba:	68d2      	ldr	r2, [r2, #12]
  407abc:	60ca      	str	r2, [r1, #12]
  407abe:	4403      	add	r3, r0
  407ac0:	f043 0001 	orr.w	r0, r3, #1
  407ac4:	6091      	str	r1, [r2, #8]
  407ac6:	6060      	str	r0, [r4, #4]
  407ac8:	50e3      	str	r3, [r4, r3]
  407aca:	e7a3      	b.n	407a14 <_free_r+0x84>
  407acc:	2a14      	cmp	r2, #20
  407ace:	d816      	bhi.n	407afe <_free_r+0x16e>
  407ad0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407ad4:	00ff      	lsls	r7, r7, #3
  407ad6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407ada:	e7aa      	b.n	407a32 <_free_r+0xa2>
  407adc:	10aa      	asrs	r2, r5, #2
  407ade:	2301      	movs	r3, #1
  407ae0:	684d      	ldr	r5, [r1, #4]
  407ae2:	4093      	lsls	r3, r2
  407ae4:	432b      	orrs	r3, r5
  407ae6:	604b      	str	r3, [r1, #4]
  407ae8:	4603      	mov	r3, r0
  407aea:	e7b0      	b.n	407a4e <_free_r+0xbe>
  407aec:	f043 0201 	orr.w	r2, r3, #1
  407af0:	614c      	str	r4, [r1, #20]
  407af2:	610c      	str	r4, [r1, #16]
  407af4:	60e5      	str	r5, [r4, #12]
  407af6:	60a5      	str	r5, [r4, #8]
  407af8:	6062      	str	r2, [r4, #4]
  407afa:	50e3      	str	r3, [r4, r3]
  407afc:	e78a      	b.n	407a14 <_free_r+0x84>
  407afe:	2a54      	cmp	r2, #84	; 0x54
  407b00:	d806      	bhi.n	407b10 <_free_r+0x180>
  407b02:	0b1a      	lsrs	r2, r3, #12
  407b04:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407b08:	00ff      	lsls	r7, r7, #3
  407b0a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407b0e:	e790      	b.n	407a32 <_free_r+0xa2>
  407b10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407b14:	d806      	bhi.n	407b24 <_free_r+0x194>
  407b16:	0bda      	lsrs	r2, r3, #15
  407b18:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407b1c:	00ff      	lsls	r7, r7, #3
  407b1e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407b22:	e786      	b.n	407a32 <_free_r+0xa2>
  407b24:	f240 5054 	movw	r0, #1364	; 0x554
  407b28:	4282      	cmp	r2, r0
  407b2a:	d806      	bhi.n	407b3a <_free_r+0x1aa>
  407b2c:	0c9a      	lsrs	r2, r3, #18
  407b2e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407b32:	00ff      	lsls	r7, r7, #3
  407b34:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407b38:	e77b      	b.n	407a32 <_free_r+0xa2>
  407b3a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407b3e:	257e      	movs	r5, #126	; 0x7e
  407b40:	e777      	b.n	407a32 <_free_r+0xa2>
  407b42:	f043 0101 	orr.w	r1, r3, #1
  407b46:	6061      	str	r1, [r4, #4]
  407b48:	6013      	str	r3, [r2, #0]
  407b4a:	e763      	b.n	407a14 <_free_r+0x84>
  407b4c:	20400440 	.word	0x20400440
  407b50:	20400448 	.word	0x20400448
  407b54:	2040084c 	.word	0x2040084c
  407b58:	20400dd0 	.word	0x20400dd0

00407b5c <__sfvwrite_r>:
  407b5c:	6893      	ldr	r3, [r2, #8]
  407b5e:	2b00      	cmp	r3, #0
  407b60:	d073      	beq.n	407c4a <__sfvwrite_r+0xee>
  407b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b66:	898b      	ldrh	r3, [r1, #12]
  407b68:	b083      	sub	sp, #12
  407b6a:	460c      	mov	r4, r1
  407b6c:	0719      	lsls	r1, r3, #28
  407b6e:	9000      	str	r0, [sp, #0]
  407b70:	4616      	mov	r6, r2
  407b72:	d526      	bpl.n	407bc2 <__sfvwrite_r+0x66>
  407b74:	6922      	ldr	r2, [r4, #16]
  407b76:	b322      	cbz	r2, 407bc2 <__sfvwrite_r+0x66>
  407b78:	f013 0002 	ands.w	r0, r3, #2
  407b7c:	6835      	ldr	r5, [r6, #0]
  407b7e:	d02c      	beq.n	407bda <__sfvwrite_r+0x7e>
  407b80:	f04f 0900 	mov.w	r9, #0
  407b84:	4fb0      	ldr	r7, [pc, #704]	; (407e48 <__sfvwrite_r+0x2ec>)
  407b86:	46c8      	mov	r8, r9
  407b88:	46b2      	mov	sl, r6
  407b8a:	45b8      	cmp	r8, r7
  407b8c:	4643      	mov	r3, r8
  407b8e:	464a      	mov	r2, r9
  407b90:	bf28      	it	cs
  407b92:	463b      	movcs	r3, r7
  407b94:	9800      	ldr	r0, [sp, #0]
  407b96:	f1b8 0f00 	cmp.w	r8, #0
  407b9a:	d050      	beq.n	407c3e <__sfvwrite_r+0xe2>
  407b9c:	69e1      	ldr	r1, [r4, #28]
  407b9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407ba0:	47b0      	blx	r6
  407ba2:	2800      	cmp	r0, #0
  407ba4:	dd58      	ble.n	407c58 <__sfvwrite_r+0xfc>
  407ba6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407baa:	1a1b      	subs	r3, r3, r0
  407bac:	4481      	add	r9, r0
  407bae:	eba8 0800 	sub.w	r8, r8, r0
  407bb2:	f8ca 3008 	str.w	r3, [sl, #8]
  407bb6:	2b00      	cmp	r3, #0
  407bb8:	d1e7      	bne.n	407b8a <__sfvwrite_r+0x2e>
  407bba:	2000      	movs	r0, #0
  407bbc:	b003      	add	sp, #12
  407bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bc2:	4621      	mov	r1, r4
  407bc4:	9800      	ldr	r0, [sp, #0]
  407bc6:	f7fe fd17 	bl	4065f8 <__swsetup_r>
  407bca:	2800      	cmp	r0, #0
  407bcc:	f040 8133 	bne.w	407e36 <__sfvwrite_r+0x2da>
  407bd0:	89a3      	ldrh	r3, [r4, #12]
  407bd2:	6835      	ldr	r5, [r6, #0]
  407bd4:	f013 0002 	ands.w	r0, r3, #2
  407bd8:	d1d2      	bne.n	407b80 <__sfvwrite_r+0x24>
  407bda:	f013 0901 	ands.w	r9, r3, #1
  407bde:	d145      	bne.n	407c6c <__sfvwrite_r+0x110>
  407be0:	464f      	mov	r7, r9
  407be2:	9601      	str	r6, [sp, #4]
  407be4:	b337      	cbz	r7, 407c34 <__sfvwrite_r+0xd8>
  407be6:	059a      	lsls	r2, r3, #22
  407be8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407bec:	f140 8083 	bpl.w	407cf6 <__sfvwrite_r+0x19a>
  407bf0:	4547      	cmp	r7, r8
  407bf2:	46c3      	mov	fp, r8
  407bf4:	f0c0 80ab 	bcc.w	407d4e <__sfvwrite_r+0x1f2>
  407bf8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407bfc:	f040 80ac 	bne.w	407d58 <__sfvwrite_r+0x1fc>
  407c00:	6820      	ldr	r0, [r4, #0]
  407c02:	46ba      	mov	sl, r7
  407c04:	465a      	mov	r2, fp
  407c06:	4649      	mov	r1, r9
  407c08:	f000 fa2a 	bl	408060 <memmove>
  407c0c:	68a2      	ldr	r2, [r4, #8]
  407c0e:	6823      	ldr	r3, [r4, #0]
  407c10:	eba2 0208 	sub.w	r2, r2, r8
  407c14:	445b      	add	r3, fp
  407c16:	60a2      	str	r2, [r4, #8]
  407c18:	6023      	str	r3, [r4, #0]
  407c1a:	9a01      	ldr	r2, [sp, #4]
  407c1c:	6893      	ldr	r3, [r2, #8]
  407c1e:	eba3 030a 	sub.w	r3, r3, sl
  407c22:	44d1      	add	r9, sl
  407c24:	eba7 070a 	sub.w	r7, r7, sl
  407c28:	6093      	str	r3, [r2, #8]
  407c2a:	2b00      	cmp	r3, #0
  407c2c:	d0c5      	beq.n	407bba <__sfvwrite_r+0x5e>
  407c2e:	89a3      	ldrh	r3, [r4, #12]
  407c30:	2f00      	cmp	r7, #0
  407c32:	d1d8      	bne.n	407be6 <__sfvwrite_r+0x8a>
  407c34:	f8d5 9000 	ldr.w	r9, [r5]
  407c38:	686f      	ldr	r7, [r5, #4]
  407c3a:	3508      	adds	r5, #8
  407c3c:	e7d2      	b.n	407be4 <__sfvwrite_r+0x88>
  407c3e:	f8d5 9000 	ldr.w	r9, [r5]
  407c42:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407c46:	3508      	adds	r5, #8
  407c48:	e79f      	b.n	407b8a <__sfvwrite_r+0x2e>
  407c4a:	2000      	movs	r0, #0
  407c4c:	4770      	bx	lr
  407c4e:	4621      	mov	r1, r4
  407c50:	9800      	ldr	r0, [sp, #0]
  407c52:	f7ff fda3 	bl	40779c <_fflush_r>
  407c56:	b370      	cbz	r0, 407cb6 <__sfvwrite_r+0x15a>
  407c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c60:	f04f 30ff 	mov.w	r0, #4294967295
  407c64:	81a3      	strh	r3, [r4, #12]
  407c66:	b003      	add	sp, #12
  407c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c6c:	4681      	mov	r9, r0
  407c6e:	4633      	mov	r3, r6
  407c70:	464e      	mov	r6, r9
  407c72:	46a8      	mov	r8, r5
  407c74:	469a      	mov	sl, r3
  407c76:	464d      	mov	r5, r9
  407c78:	b34e      	cbz	r6, 407cce <__sfvwrite_r+0x172>
  407c7a:	b380      	cbz	r0, 407cde <__sfvwrite_r+0x182>
  407c7c:	6820      	ldr	r0, [r4, #0]
  407c7e:	6923      	ldr	r3, [r4, #16]
  407c80:	6962      	ldr	r2, [r4, #20]
  407c82:	45b1      	cmp	r9, r6
  407c84:	46cb      	mov	fp, r9
  407c86:	bf28      	it	cs
  407c88:	46b3      	movcs	fp, r6
  407c8a:	4298      	cmp	r0, r3
  407c8c:	465f      	mov	r7, fp
  407c8e:	d904      	bls.n	407c9a <__sfvwrite_r+0x13e>
  407c90:	68a3      	ldr	r3, [r4, #8]
  407c92:	4413      	add	r3, r2
  407c94:	459b      	cmp	fp, r3
  407c96:	f300 80a6 	bgt.w	407de6 <__sfvwrite_r+0x28a>
  407c9a:	4593      	cmp	fp, r2
  407c9c:	db4b      	blt.n	407d36 <__sfvwrite_r+0x1da>
  407c9e:	4613      	mov	r3, r2
  407ca0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407ca2:	69e1      	ldr	r1, [r4, #28]
  407ca4:	9800      	ldr	r0, [sp, #0]
  407ca6:	462a      	mov	r2, r5
  407ca8:	47b8      	blx	r7
  407caa:	1e07      	subs	r7, r0, #0
  407cac:	ddd4      	ble.n	407c58 <__sfvwrite_r+0xfc>
  407cae:	ebb9 0907 	subs.w	r9, r9, r7
  407cb2:	d0cc      	beq.n	407c4e <__sfvwrite_r+0xf2>
  407cb4:	2001      	movs	r0, #1
  407cb6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407cba:	1bdb      	subs	r3, r3, r7
  407cbc:	443d      	add	r5, r7
  407cbe:	1bf6      	subs	r6, r6, r7
  407cc0:	f8ca 3008 	str.w	r3, [sl, #8]
  407cc4:	2b00      	cmp	r3, #0
  407cc6:	f43f af78 	beq.w	407bba <__sfvwrite_r+0x5e>
  407cca:	2e00      	cmp	r6, #0
  407ccc:	d1d5      	bne.n	407c7a <__sfvwrite_r+0x11e>
  407cce:	f108 0308 	add.w	r3, r8, #8
  407cd2:	e913 0060 	ldmdb	r3, {r5, r6}
  407cd6:	4698      	mov	r8, r3
  407cd8:	3308      	adds	r3, #8
  407cda:	2e00      	cmp	r6, #0
  407cdc:	d0f9      	beq.n	407cd2 <__sfvwrite_r+0x176>
  407cde:	4632      	mov	r2, r6
  407ce0:	210a      	movs	r1, #10
  407ce2:	4628      	mov	r0, r5
  407ce4:	f000 f96c 	bl	407fc0 <memchr>
  407ce8:	2800      	cmp	r0, #0
  407cea:	f000 80a1 	beq.w	407e30 <__sfvwrite_r+0x2d4>
  407cee:	3001      	adds	r0, #1
  407cf0:	eba0 0905 	sub.w	r9, r0, r5
  407cf4:	e7c2      	b.n	407c7c <__sfvwrite_r+0x120>
  407cf6:	6820      	ldr	r0, [r4, #0]
  407cf8:	6923      	ldr	r3, [r4, #16]
  407cfa:	4298      	cmp	r0, r3
  407cfc:	d802      	bhi.n	407d04 <__sfvwrite_r+0x1a8>
  407cfe:	6963      	ldr	r3, [r4, #20]
  407d00:	429f      	cmp	r7, r3
  407d02:	d25d      	bcs.n	407dc0 <__sfvwrite_r+0x264>
  407d04:	45b8      	cmp	r8, r7
  407d06:	bf28      	it	cs
  407d08:	46b8      	movcs	r8, r7
  407d0a:	4642      	mov	r2, r8
  407d0c:	4649      	mov	r1, r9
  407d0e:	f000 f9a7 	bl	408060 <memmove>
  407d12:	68a3      	ldr	r3, [r4, #8]
  407d14:	6822      	ldr	r2, [r4, #0]
  407d16:	eba3 0308 	sub.w	r3, r3, r8
  407d1a:	4442      	add	r2, r8
  407d1c:	60a3      	str	r3, [r4, #8]
  407d1e:	6022      	str	r2, [r4, #0]
  407d20:	b10b      	cbz	r3, 407d26 <__sfvwrite_r+0x1ca>
  407d22:	46c2      	mov	sl, r8
  407d24:	e779      	b.n	407c1a <__sfvwrite_r+0xbe>
  407d26:	4621      	mov	r1, r4
  407d28:	9800      	ldr	r0, [sp, #0]
  407d2a:	f7ff fd37 	bl	40779c <_fflush_r>
  407d2e:	2800      	cmp	r0, #0
  407d30:	d192      	bne.n	407c58 <__sfvwrite_r+0xfc>
  407d32:	46c2      	mov	sl, r8
  407d34:	e771      	b.n	407c1a <__sfvwrite_r+0xbe>
  407d36:	465a      	mov	r2, fp
  407d38:	4629      	mov	r1, r5
  407d3a:	f000 f991 	bl	408060 <memmove>
  407d3e:	68a2      	ldr	r2, [r4, #8]
  407d40:	6823      	ldr	r3, [r4, #0]
  407d42:	eba2 020b 	sub.w	r2, r2, fp
  407d46:	445b      	add	r3, fp
  407d48:	60a2      	str	r2, [r4, #8]
  407d4a:	6023      	str	r3, [r4, #0]
  407d4c:	e7af      	b.n	407cae <__sfvwrite_r+0x152>
  407d4e:	6820      	ldr	r0, [r4, #0]
  407d50:	46b8      	mov	r8, r7
  407d52:	46ba      	mov	sl, r7
  407d54:	46bb      	mov	fp, r7
  407d56:	e755      	b.n	407c04 <__sfvwrite_r+0xa8>
  407d58:	6962      	ldr	r2, [r4, #20]
  407d5a:	6820      	ldr	r0, [r4, #0]
  407d5c:	6921      	ldr	r1, [r4, #16]
  407d5e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407d62:	eba0 0a01 	sub.w	sl, r0, r1
  407d66:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407d6a:	f10a 0001 	add.w	r0, sl, #1
  407d6e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407d72:	4438      	add	r0, r7
  407d74:	4540      	cmp	r0, r8
  407d76:	4642      	mov	r2, r8
  407d78:	bf84      	itt	hi
  407d7a:	4680      	movhi	r8, r0
  407d7c:	4642      	movhi	r2, r8
  407d7e:	055b      	lsls	r3, r3, #21
  407d80:	d544      	bpl.n	407e0c <__sfvwrite_r+0x2b0>
  407d82:	4611      	mov	r1, r2
  407d84:	9800      	ldr	r0, [sp, #0]
  407d86:	f7fc fba7 	bl	4044d8 <_malloc_r>
  407d8a:	4683      	mov	fp, r0
  407d8c:	2800      	cmp	r0, #0
  407d8e:	d055      	beq.n	407e3c <__sfvwrite_r+0x2e0>
  407d90:	4652      	mov	r2, sl
  407d92:	6921      	ldr	r1, [r4, #16]
  407d94:	f7fc fe50 	bl	404a38 <memcpy>
  407d98:	89a3      	ldrh	r3, [r4, #12]
  407d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407da2:	81a3      	strh	r3, [r4, #12]
  407da4:	eb0b 000a 	add.w	r0, fp, sl
  407da8:	eba8 030a 	sub.w	r3, r8, sl
  407dac:	f8c4 b010 	str.w	fp, [r4, #16]
  407db0:	f8c4 8014 	str.w	r8, [r4, #20]
  407db4:	6020      	str	r0, [r4, #0]
  407db6:	60a3      	str	r3, [r4, #8]
  407db8:	46b8      	mov	r8, r7
  407dba:	46ba      	mov	sl, r7
  407dbc:	46bb      	mov	fp, r7
  407dbe:	e721      	b.n	407c04 <__sfvwrite_r+0xa8>
  407dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407dc4:	42b9      	cmp	r1, r7
  407dc6:	bf28      	it	cs
  407dc8:	4639      	movcs	r1, r7
  407dca:	464a      	mov	r2, r9
  407dcc:	fb91 f1f3 	sdiv	r1, r1, r3
  407dd0:	9800      	ldr	r0, [sp, #0]
  407dd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407dd4:	fb03 f301 	mul.w	r3, r3, r1
  407dd8:	69e1      	ldr	r1, [r4, #28]
  407dda:	47b0      	blx	r6
  407ddc:	f1b0 0a00 	subs.w	sl, r0, #0
  407de0:	f73f af1b 	bgt.w	407c1a <__sfvwrite_r+0xbe>
  407de4:	e738      	b.n	407c58 <__sfvwrite_r+0xfc>
  407de6:	461a      	mov	r2, r3
  407de8:	4629      	mov	r1, r5
  407dea:	9301      	str	r3, [sp, #4]
  407dec:	f000 f938 	bl	408060 <memmove>
  407df0:	6822      	ldr	r2, [r4, #0]
  407df2:	9b01      	ldr	r3, [sp, #4]
  407df4:	9800      	ldr	r0, [sp, #0]
  407df6:	441a      	add	r2, r3
  407df8:	6022      	str	r2, [r4, #0]
  407dfa:	4621      	mov	r1, r4
  407dfc:	f7ff fcce 	bl	40779c <_fflush_r>
  407e00:	9b01      	ldr	r3, [sp, #4]
  407e02:	2800      	cmp	r0, #0
  407e04:	f47f af28 	bne.w	407c58 <__sfvwrite_r+0xfc>
  407e08:	461f      	mov	r7, r3
  407e0a:	e750      	b.n	407cae <__sfvwrite_r+0x152>
  407e0c:	9800      	ldr	r0, [sp, #0]
  407e0e:	f000 fc85 	bl	40871c <_realloc_r>
  407e12:	4683      	mov	fp, r0
  407e14:	2800      	cmp	r0, #0
  407e16:	d1c5      	bne.n	407da4 <__sfvwrite_r+0x248>
  407e18:	9d00      	ldr	r5, [sp, #0]
  407e1a:	6921      	ldr	r1, [r4, #16]
  407e1c:	4628      	mov	r0, r5
  407e1e:	f7ff fdb7 	bl	407990 <_free_r>
  407e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e26:	220c      	movs	r2, #12
  407e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407e2c:	602a      	str	r2, [r5, #0]
  407e2e:	e715      	b.n	407c5c <__sfvwrite_r+0x100>
  407e30:	f106 0901 	add.w	r9, r6, #1
  407e34:	e722      	b.n	407c7c <__sfvwrite_r+0x120>
  407e36:	f04f 30ff 	mov.w	r0, #4294967295
  407e3a:	e6bf      	b.n	407bbc <__sfvwrite_r+0x60>
  407e3c:	9a00      	ldr	r2, [sp, #0]
  407e3e:	230c      	movs	r3, #12
  407e40:	6013      	str	r3, [r2, #0]
  407e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e46:	e709      	b.n	407c5c <__sfvwrite_r+0x100>
  407e48:	7ffffc00 	.word	0x7ffffc00

00407e4c <_fwalk_reent>:
  407e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407e50:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407e54:	d01f      	beq.n	407e96 <_fwalk_reent+0x4a>
  407e56:	4688      	mov	r8, r1
  407e58:	4606      	mov	r6, r0
  407e5a:	f04f 0900 	mov.w	r9, #0
  407e5e:	687d      	ldr	r5, [r7, #4]
  407e60:	68bc      	ldr	r4, [r7, #8]
  407e62:	3d01      	subs	r5, #1
  407e64:	d411      	bmi.n	407e8a <_fwalk_reent+0x3e>
  407e66:	89a3      	ldrh	r3, [r4, #12]
  407e68:	2b01      	cmp	r3, #1
  407e6a:	f105 35ff 	add.w	r5, r5, #4294967295
  407e6e:	d908      	bls.n	407e82 <_fwalk_reent+0x36>
  407e70:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407e74:	3301      	adds	r3, #1
  407e76:	4621      	mov	r1, r4
  407e78:	4630      	mov	r0, r6
  407e7a:	d002      	beq.n	407e82 <_fwalk_reent+0x36>
  407e7c:	47c0      	blx	r8
  407e7e:	ea49 0900 	orr.w	r9, r9, r0
  407e82:	1c6b      	adds	r3, r5, #1
  407e84:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407e88:	d1ed      	bne.n	407e66 <_fwalk_reent+0x1a>
  407e8a:	683f      	ldr	r7, [r7, #0]
  407e8c:	2f00      	cmp	r7, #0
  407e8e:	d1e6      	bne.n	407e5e <_fwalk_reent+0x12>
  407e90:	4648      	mov	r0, r9
  407e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407e96:	46b9      	mov	r9, r7
  407e98:	4648      	mov	r0, r9
  407e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407e9e:	bf00      	nop

00407ea0 <_localeconv_r>:
  407ea0:	4a04      	ldr	r2, [pc, #16]	; (407eb4 <_localeconv_r+0x14>)
  407ea2:	4b05      	ldr	r3, [pc, #20]	; (407eb8 <_localeconv_r+0x18>)
  407ea4:	6812      	ldr	r2, [r2, #0]
  407ea6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407ea8:	2800      	cmp	r0, #0
  407eaa:	bf08      	it	eq
  407eac:	4618      	moveq	r0, r3
  407eae:	30f0      	adds	r0, #240	; 0xf0
  407eb0:	4770      	bx	lr
  407eb2:	bf00      	nop
  407eb4:	20400014 	.word	0x20400014
  407eb8:	20400854 	.word	0x20400854

00407ebc <__retarget_lock_init_recursive>:
  407ebc:	4770      	bx	lr
  407ebe:	bf00      	nop

00407ec0 <__retarget_lock_close_recursive>:
  407ec0:	4770      	bx	lr
  407ec2:	bf00      	nop

00407ec4 <__retarget_lock_acquire_recursive>:
  407ec4:	4770      	bx	lr
  407ec6:	bf00      	nop

00407ec8 <__retarget_lock_release_recursive>:
  407ec8:	4770      	bx	lr
  407eca:	bf00      	nop

00407ecc <__swhatbuf_r>:
  407ecc:	b570      	push	{r4, r5, r6, lr}
  407ece:	460c      	mov	r4, r1
  407ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407ed4:	2900      	cmp	r1, #0
  407ed6:	b090      	sub	sp, #64	; 0x40
  407ed8:	4615      	mov	r5, r2
  407eda:	461e      	mov	r6, r3
  407edc:	db14      	blt.n	407f08 <__swhatbuf_r+0x3c>
  407ede:	aa01      	add	r2, sp, #4
  407ee0:	f000 fff0 	bl	408ec4 <_fstat_r>
  407ee4:	2800      	cmp	r0, #0
  407ee6:	db0f      	blt.n	407f08 <__swhatbuf_r+0x3c>
  407ee8:	9a02      	ldr	r2, [sp, #8]
  407eea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407eee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407ef2:	fab2 f282 	clz	r2, r2
  407ef6:	0952      	lsrs	r2, r2, #5
  407ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407efc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407f00:	6032      	str	r2, [r6, #0]
  407f02:	602b      	str	r3, [r5, #0]
  407f04:	b010      	add	sp, #64	; 0x40
  407f06:	bd70      	pop	{r4, r5, r6, pc}
  407f08:	89a2      	ldrh	r2, [r4, #12]
  407f0a:	2300      	movs	r3, #0
  407f0c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407f10:	6033      	str	r3, [r6, #0]
  407f12:	d004      	beq.n	407f1e <__swhatbuf_r+0x52>
  407f14:	2240      	movs	r2, #64	; 0x40
  407f16:	4618      	mov	r0, r3
  407f18:	602a      	str	r2, [r5, #0]
  407f1a:	b010      	add	sp, #64	; 0x40
  407f1c:	bd70      	pop	{r4, r5, r6, pc}
  407f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407f22:	602b      	str	r3, [r5, #0]
  407f24:	b010      	add	sp, #64	; 0x40
  407f26:	bd70      	pop	{r4, r5, r6, pc}

00407f28 <__smakebuf_r>:
  407f28:	898a      	ldrh	r2, [r1, #12]
  407f2a:	0792      	lsls	r2, r2, #30
  407f2c:	460b      	mov	r3, r1
  407f2e:	d506      	bpl.n	407f3e <__smakebuf_r+0x16>
  407f30:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407f34:	2101      	movs	r1, #1
  407f36:	601a      	str	r2, [r3, #0]
  407f38:	611a      	str	r2, [r3, #16]
  407f3a:	6159      	str	r1, [r3, #20]
  407f3c:	4770      	bx	lr
  407f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407f40:	b083      	sub	sp, #12
  407f42:	ab01      	add	r3, sp, #4
  407f44:	466a      	mov	r2, sp
  407f46:	460c      	mov	r4, r1
  407f48:	4606      	mov	r6, r0
  407f4a:	f7ff ffbf 	bl	407ecc <__swhatbuf_r>
  407f4e:	9900      	ldr	r1, [sp, #0]
  407f50:	4605      	mov	r5, r0
  407f52:	4630      	mov	r0, r6
  407f54:	f7fc fac0 	bl	4044d8 <_malloc_r>
  407f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f5c:	b1d8      	cbz	r0, 407f96 <__smakebuf_r+0x6e>
  407f5e:	9a01      	ldr	r2, [sp, #4]
  407f60:	4f15      	ldr	r7, [pc, #84]	; (407fb8 <__smakebuf_r+0x90>)
  407f62:	9900      	ldr	r1, [sp, #0]
  407f64:	63f7      	str	r7, [r6, #60]	; 0x3c
  407f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407f6a:	81a3      	strh	r3, [r4, #12]
  407f6c:	6020      	str	r0, [r4, #0]
  407f6e:	6120      	str	r0, [r4, #16]
  407f70:	6161      	str	r1, [r4, #20]
  407f72:	b91a      	cbnz	r2, 407f7c <__smakebuf_r+0x54>
  407f74:	432b      	orrs	r3, r5
  407f76:	81a3      	strh	r3, [r4, #12]
  407f78:	b003      	add	sp, #12
  407f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407f7c:	4630      	mov	r0, r6
  407f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407f82:	f000 ffb3 	bl	408eec <_isatty_r>
  407f86:	b1a0      	cbz	r0, 407fb2 <__smakebuf_r+0x8a>
  407f88:	89a3      	ldrh	r3, [r4, #12]
  407f8a:	f023 0303 	bic.w	r3, r3, #3
  407f8e:	f043 0301 	orr.w	r3, r3, #1
  407f92:	b21b      	sxth	r3, r3
  407f94:	e7ee      	b.n	407f74 <__smakebuf_r+0x4c>
  407f96:	059a      	lsls	r2, r3, #22
  407f98:	d4ee      	bmi.n	407f78 <__smakebuf_r+0x50>
  407f9a:	f023 0303 	bic.w	r3, r3, #3
  407f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407fa2:	f043 0302 	orr.w	r3, r3, #2
  407fa6:	2101      	movs	r1, #1
  407fa8:	81a3      	strh	r3, [r4, #12]
  407faa:	6022      	str	r2, [r4, #0]
  407fac:	6122      	str	r2, [r4, #16]
  407fae:	6161      	str	r1, [r4, #20]
  407fb0:	e7e2      	b.n	407f78 <__smakebuf_r+0x50>
  407fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fb6:	e7dd      	b.n	407f74 <__smakebuf_r+0x4c>
  407fb8:	004077f1 	.word	0x004077f1
  407fbc:	00000000 	.word	0x00000000

00407fc0 <memchr>:
  407fc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407fc4:	2a10      	cmp	r2, #16
  407fc6:	db2b      	blt.n	408020 <memchr+0x60>
  407fc8:	f010 0f07 	tst.w	r0, #7
  407fcc:	d008      	beq.n	407fe0 <memchr+0x20>
  407fce:	f810 3b01 	ldrb.w	r3, [r0], #1
  407fd2:	3a01      	subs	r2, #1
  407fd4:	428b      	cmp	r3, r1
  407fd6:	d02d      	beq.n	408034 <memchr+0x74>
  407fd8:	f010 0f07 	tst.w	r0, #7
  407fdc:	b342      	cbz	r2, 408030 <memchr+0x70>
  407fde:	d1f6      	bne.n	407fce <memchr+0xe>
  407fe0:	b4f0      	push	{r4, r5, r6, r7}
  407fe2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407fe6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407fea:	f022 0407 	bic.w	r4, r2, #7
  407fee:	f07f 0700 	mvns.w	r7, #0
  407ff2:	2300      	movs	r3, #0
  407ff4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407ff8:	3c08      	subs	r4, #8
  407ffa:	ea85 0501 	eor.w	r5, r5, r1
  407ffe:	ea86 0601 	eor.w	r6, r6, r1
  408002:	fa85 f547 	uadd8	r5, r5, r7
  408006:	faa3 f587 	sel	r5, r3, r7
  40800a:	fa86 f647 	uadd8	r6, r6, r7
  40800e:	faa5 f687 	sel	r6, r5, r7
  408012:	b98e      	cbnz	r6, 408038 <memchr+0x78>
  408014:	d1ee      	bne.n	407ff4 <memchr+0x34>
  408016:	bcf0      	pop	{r4, r5, r6, r7}
  408018:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40801c:	f002 0207 	and.w	r2, r2, #7
  408020:	b132      	cbz	r2, 408030 <memchr+0x70>
  408022:	f810 3b01 	ldrb.w	r3, [r0], #1
  408026:	3a01      	subs	r2, #1
  408028:	ea83 0301 	eor.w	r3, r3, r1
  40802c:	b113      	cbz	r3, 408034 <memchr+0x74>
  40802e:	d1f8      	bne.n	408022 <memchr+0x62>
  408030:	2000      	movs	r0, #0
  408032:	4770      	bx	lr
  408034:	3801      	subs	r0, #1
  408036:	4770      	bx	lr
  408038:	2d00      	cmp	r5, #0
  40803a:	bf06      	itte	eq
  40803c:	4635      	moveq	r5, r6
  40803e:	3803      	subeq	r0, #3
  408040:	3807      	subne	r0, #7
  408042:	f015 0f01 	tst.w	r5, #1
  408046:	d107      	bne.n	408058 <memchr+0x98>
  408048:	3001      	adds	r0, #1
  40804a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40804e:	bf02      	ittt	eq
  408050:	3001      	addeq	r0, #1
  408052:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408056:	3001      	addeq	r0, #1
  408058:	bcf0      	pop	{r4, r5, r6, r7}
  40805a:	3801      	subs	r0, #1
  40805c:	4770      	bx	lr
  40805e:	bf00      	nop

00408060 <memmove>:
  408060:	4288      	cmp	r0, r1
  408062:	b5f0      	push	{r4, r5, r6, r7, lr}
  408064:	d90d      	bls.n	408082 <memmove+0x22>
  408066:	188b      	adds	r3, r1, r2
  408068:	4298      	cmp	r0, r3
  40806a:	d20a      	bcs.n	408082 <memmove+0x22>
  40806c:	1884      	adds	r4, r0, r2
  40806e:	2a00      	cmp	r2, #0
  408070:	d051      	beq.n	408116 <memmove+0xb6>
  408072:	4622      	mov	r2, r4
  408074:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408078:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40807c:	4299      	cmp	r1, r3
  40807e:	d1f9      	bne.n	408074 <memmove+0x14>
  408080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408082:	2a0f      	cmp	r2, #15
  408084:	d948      	bls.n	408118 <memmove+0xb8>
  408086:	ea41 0300 	orr.w	r3, r1, r0
  40808a:	079b      	lsls	r3, r3, #30
  40808c:	d146      	bne.n	40811c <memmove+0xbc>
  40808e:	f100 0410 	add.w	r4, r0, #16
  408092:	f101 0310 	add.w	r3, r1, #16
  408096:	4615      	mov	r5, r2
  408098:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40809c:	f844 6c10 	str.w	r6, [r4, #-16]
  4080a0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4080a4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4080a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4080ac:	f844 6c08 	str.w	r6, [r4, #-8]
  4080b0:	3d10      	subs	r5, #16
  4080b2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4080b6:	f844 6c04 	str.w	r6, [r4, #-4]
  4080ba:	2d0f      	cmp	r5, #15
  4080bc:	f103 0310 	add.w	r3, r3, #16
  4080c0:	f104 0410 	add.w	r4, r4, #16
  4080c4:	d8e8      	bhi.n	408098 <memmove+0x38>
  4080c6:	f1a2 0310 	sub.w	r3, r2, #16
  4080ca:	f023 030f 	bic.w	r3, r3, #15
  4080ce:	f002 0e0f 	and.w	lr, r2, #15
  4080d2:	3310      	adds	r3, #16
  4080d4:	f1be 0f03 	cmp.w	lr, #3
  4080d8:	4419      	add	r1, r3
  4080da:	4403      	add	r3, r0
  4080dc:	d921      	bls.n	408122 <memmove+0xc2>
  4080de:	1f1e      	subs	r6, r3, #4
  4080e0:	460d      	mov	r5, r1
  4080e2:	4674      	mov	r4, lr
  4080e4:	3c04      	subs	r4, #4
  4080e6:	f855 7b04 	ldr.w	r7, [r5], #4
  4080ea:	f846 7f04 	str.w	r7, [r6, #4]!
  4080ee:	2c03      	cmp	r4, #3
  4080f0:	d8f8      	bhi.n	4080e4 <memmove+0x84>
  4080f2:	f1ae 0404 	sub.w	r4, lr, #4
  4080f6:	f024 0403 	bic.w	r4, r4, #3
  4080fa:	3404      	adds	r4, #4
  4080fc:	4421      	add	r1, r4
  4080fe:	4423      	add	r3, r4
  408100:	f002 0203 	and.w	r2, r2, #3
  408104:	b162      	cbz	r2, 408120 <memmove+0xc0>
  408106:	3b01      	subs	r3, #1
  408108:	440a      	add	r2, r1
  40810a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40810e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408112:	428a      	cmp	r2, r1
  408114:	d1f9      	bne.n	40810a <memmove+0xaa>
  408116:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408118:	4603      	mov	r3, r0
  40811a:	e7f3      	b.n	408104 <memmove+0xa4>
  40811c:	4603      	mov	r3, r0
  40811e:	e7f2      	b.n	408106 <memmove+0xa6>
  408120:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408122:	4672      	mov	r2, lr
  408124:	e7ee      	b.n	408104 <memmove+0xa4>
  408126:	bf00      	nop

00408128 <_Balloc>:
  408128:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40812a:	b570      	push	{r4, r5, r6, lr}
  40812c:	4605      	mov	r5, r0
  40812e:	460c      	mov	r4, r1
  408130:	b14b      	cbz	r3, 408146 <_Balloc+0x1e>
  408132:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408136:	b180      	cbz	r0, 40815a <_Balloc+0x32>
  408138:	6802      	ldr	r2, [r0, #0]
  40813a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40813e:	2300      	movs	r3, #0
  408140:	6103      	str	r3, [r0, #16]
  408142:	60c3      	str	r3, [r0, #12]
  408144:	bd70      	pop	{r4, r5, r6, pc}
  408146:	2221      	movs	r2, #33	; 0x21
  408148:	2104      	movs	r1, #4
  40814a:	f000 fd93 	bl	408c74 <_calloc_r>
  40814e:	64e8      	str	r0, [r5, #76]	; 0x4c
  408150:	4603      	mov	r3, r0
  408152:	2800      	cmp	r0, #0
  408154:	d1ed      	bne.n	408132 <_Balloc+0xa>
  408156:	2000      	movs	r0, #0
  408158:	bd70      	pop	{r4, r5, r6, pc}
  40815a:	2101      	movs	r1, #1
  40815c:	fa01 f604 	lsl.w	r6, r1, r4
  408160:	1d72      	adds	r2, r6, #5
  408162:	4628      	mov	r0, r5
  408164:	0092      	lsls	r2, r2, #2
  408166:	f000 fd85 	bl	408c74 <_calloc_r>
  40816a:	2800      	cmp	r0, #0
  40816c:	d0f3      	beq.n	408156 <_Balloc+0x2e>
  40816e:	6044      	str	r4, [r0, #4]
  408170:	6086      	str	r6, [r0, #8]
  408172:	e7e4      	b.n	40813e <_Balloc+0x16>

00408174 <_Bfree>:
  408174:	b131      	cbz	r1, 408184 <_Bfree+0x10>
  408176:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408178:	684a      	ldr	r2, [r1, #4]
  40817a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40817e:	6008      	str	r0, [r1, #0]
  408180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408184:	4770      	bx	lr
  408186:	bf00      	nop

00408188 <__multadd>:
  408188:	b5f0      	push	{r4, r5, r6, r7, lr}
  40818a:	690c      	ldr	r4, [r1, #16]
  40818c:	b083      	sub	sp, #12
  40818e:	460d      	mov	r5, r1
  408190:	4606      	mov	r6, r0
  408192:	f101 0e14 	add.w	lr, r1, #20
  408196:	2700      	movs	r7, #0
  408198:	f8de 0000 	ldr.w	r0, [lr]
  40819c:	b281      	uxth	r1, r0
  40819e:	fb02 3301 	mla	r3, r2, r1, r3
  4081a2:	0c01      	lsrs	r1, r0, #16
  4081a4:	0c18      	lsrs	r0, r3, #16
  4081a6:	fb02 0101 	mla	r1, r2, r1, r0
  4081aa:	b29b      	uxth	r3, r3
  4081ac:	3701      	adds	r7, #1
  4081ae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4081b2:	42bc      	cmp	r4, r7
  4081b4:	f84e 3b04 	str.w	r3, [lr], #4
  4081b8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4081bc:	dcec      	bgt.n	408198 <__multadd+0x10>
  4081be:	b13b      	cbz	r3, 4081d0 <__multadd+0x48>
  4081c0:	68aa      	ldr	r2, [r5, #8]
  4081c2:	4294      	cmp	r4, r2
  4081c4:	da07      	bge.n	4081d6 <__multadd+0x4e>
  4081c6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4081ca:	3401      	adds	r4, #1
  4081cc:	6153      	str	r3, [r2, #20]
  4081ce:	612c      	str	r4, [r5, #16]
  4081d0:	4628      	mov	r0, r5
  4081d2:	b003      	add	sp, #12
  4081d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081d6:	6869      	ldr	r1, [r5, #4]
  4081d8:	9301      	str	r3, [sp, #4]
  4081da:	3101      	adds	r1, #1
  4081dc:	4630      	mov	r0, r6
  4081de:	f7ff ffa3 	bl	408128 <_Balloc>
  4081e2:	692a      	ldr	r2, [r5, #16]
  4081e4:	3202      	adds	r2, #2
  4081e6:	f105 010c 	add.w	r1, r5, #12
  4081ea:	4607      	mov	r7, r0
  4081ec:	0092      	lsls	r2, r2, #2
  4081ee:	300c      	adds	r0, #12
  4081f0:	f7fc fc22 	bl	404a38 <memcpy>
  4081f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4081f6:	6869      	ldr	r1, [r5, #4]
  4081f8:	9b01      	ldr	r3, [sp, #4]
  4081fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4081fe:	6028      	str	r0, [r5, #0]
  408200:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408204:	463d      	mov	r5, r7
  408206:	e7de      	b.n	4081c6 <__multadd+0x3e>

00408208 <__hi0bits>:
  408208:	0c02      	lsrs	r2, r0, #16
  40820a:	0412      	lsls	r2, r2, #16
  40820c:	4603      	mov	r3, r0
  40820e:	b9b2      	cbnz	r2, 40823e <__hi0bits+0x36>
  408210:	0403      	lsls	r3, r0, #16
  408212:	2010      	movs	r0, #16
  408214:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408218:	bf04      	itt	eq
  40821a:	021b      	lsleq	r3, r3, #8
  40821c:	3008      	addeq	r0, #8
  40821e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408222:	bf04      	itt	eq
  408224:	011b      	lsleq	r3, r3, #4
  408226:	3004      	addeq	r0, #4
  408228:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40822c:	bf04      	itt	eq
  40822e:	009b      	lsleq	r3, r3, #2
  408230:	3002      	addeq	r0, #2
  408232:	2b00      	cmp	r3, #0
  408234:	db02      	blt.n	40823c <__hi0bits+0x34>
  408236:	005b      	lsls	r3, r3, #1
  408238:	d403      	bmi.n	408242 <__hi0bits+0x3a>
  40823a:	2020      	movs	r0, #32
  40823c:	4770      	bx	lr
  40823e:	2000      	movs	r0, #0
  408240:	e7e8      	b.n	408214 <__hi0bits+0xc>
  408242:	3001      	adds	r0, #1
  408244:	4770      	bx	lr
  408246:	bf00      	nop

00408248 <__lo0bits>:
  408248:	6803      	ldr	r3, [r0, #0]
  40824a:	f013 0207 	ands.w	r2, r3, #7
  40824e:	4601      	mov	r1, r0
  408250:	d007      	beq.n	408262 <__lo0bits+0x1a>
  408252:	07da      	lsls	r2, r3, #31
  408254:	d421      	bmi.n	40829a <__lo0bits+0x52>
  408256:	0798      	lsls	r0, r3, #30
  408258:	d421      	bmi.n	40829e <__lo0bits+0x56>
  40825a:	089b      	lsrs	r3, r3, #2
  40825c:	600b      	str	r3, [r1, #0]
  40825e:	2002      	movs	r0, #2
  408260:	4770      	bx	lr
  408262:	b298      	uxth	r0, r3
  408264:	b198      	cbz	r0, 40828e <__lo0bits+0x46>
  408266:	4610      	mov	r0, r2
  408268:	f013 0fff 	tst.w	r3, #255	; 0xff
  40826c:	bf04      	itt	eq
  40826e:	0a1b      	lsreq	r3, r3, #8
  408270:	3008      	addeq	r0, #8
  408272:	071a      	lsls	r2, r3, #28
  408274:	bf04      	itt	eq
  408276:	091b      	lsreq	r3, r3, #4
  408278:	3004      	addeq	r0, #4
  40827a:	079a      	lsls	r2, r3, #30
  40827c:	bf04      	itt	eq
  40827e:	089b      	lsreq	r3, r3, #2
  408280:	3002      	addeq	r0, #2
  408282:	07da      	lsls	r2, r3, #31
  408284:	d407      	bmi.n	408296 <__lo0bits+0x4e>
  408286:	085b      	lsrs	r3, r3, #1
  408288:	d104      	bne.n	408294 <__lo0bits+0x4c>
  40828a:	2020      	movs	r0, #32
  40828c:	4770      	bx	lr
  40828e:	0c1b      	lsrs	r3, r3, #16
  408290:	2010      	movs	r0, #16
  408292:	e7e9      	b.n	408268 <__lo0bits+0x20>
  408294:	3001      	adds	r0, #1
  408296:	600b      	str	r3, [r1, #0]
  408298:	4770      	bx	lr
  40829a:	2000      	movs	r0, #0
  40829c:	4770      	bx	lr
  40829e:	085b      	lsrs	r3, r3, #1
  4082a0:	600b      	str	r3, [r1, #0]
  4082a2:	2001      	movs	r0, #1
  4082a4:	4770      	bx	lr
  4082a6:	bf00      	nop

004082a8 <__i2b>:
  4082a8:	b510      	push	{r4, lr}
  4082aa:	460c      	mov	r4, r1
  4082ac:	2101      	movs	r1, #1
  4082ae:	f7ff ff3b 	bl	408128 <_Balloc>
  4082b2:	2201      	movs	r2, #1
  4082b4:	6144      	str	r4, [r0, #20]
  4082b6:	6102      	str	r2, [r0, #16]
  4082b8:	bd10      	pop	{r4, pc}
  4082ba:	bf00      	nop

004082bc <__multiply>:
  4082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082c0:	690c      	ldr	r4, [r1, #16]
  4082c2:	6915      	ldr	r5, [r2, #16]
  4082c4:	42ac      	cmp	r4, r5
  4082c6:	b083      	sub	sp, #12
  4082c8:	468b      	mov	fp, r1
  4082ca:	4616      	mov	r6, r2
  4082cc:	da04      	bge.n	4082d8 <__multiply+0x1c>
  4082ce:	4622      	mov	r2, r4
  4082d0:	46b3      	mov	fp, r6
  4082d2:	462c      	mov	r4, r5
  4082d4:	460e      	mov	r6, r1
  4082d6:	4615      	mov	r5, r2
  4082d8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4082dc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4082e0:	eb04 0805 	add.w	r8, r4, r5
  4082e4:	4598      	cmp	r8, r3
  4082e6:	bfc8      	it	gt
  4082e8:	3101      	addgt	r1, #1
  4082ea:	f7ff ff1d 	bl	408128 <_Balloc>
  4082ee:	f100 0914 	add.w	r9, r0, #20
  4082f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4082f6:	45d1      	cmp	r9, sl
  4082f8:	9000      	str	r0, [sp, #0]
  4082fa:	d205      	bcs.n	408308 <__multiply+0x4c>
  4082fc:	464b      	mov	r3, r9
  4082fe:	2100      	movs	r1, #0
  408300:	f843 1b04 	str.w	r1, [r3], #4
  408304:	459a      	cmp	sl, r3
  408306:	d8fb      	bhi.n	408300 <__multiply+0x44>
  408308:	f106 0c14 	add.w	ip, r6, #20
  40830c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408310:	f10b 0b14 	add.w	fp, fp, #20
  408314:	459c      	cmp	ip, r3
  408316:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40831a:	d24c      	bcs.n	4083b6 <__multiply+0xfa>
  40831c:	f8cd a004 	str.w	sl, [sp, #4]
  408320:	469a      	mov	sl, r3
  408322:	f8dc 5000 	ldr.w	r5, [ip]
  408326:	b2af      	uxth	r7, r5
  408328:	b1ef      	cbz	r7, 408366 <__multiply+0xaa>
  40832a:	2100      	movs	r1, #0
  40832c:	464d      	mov	r5, r9
  40832e:	465e      	mov	r6, fp
  408330:	460c      	mov	r4, r1
  408332:	f856 2b04 	ldr.w	r2, [r6], #4
  408336:	6828      	ldr	r0, [r5, #0]
  408338:	b293      	uxth	r3, r2
  40833a:	b281      	uxth	r1, r0
  40833c:	fb07 1303 	mla	r3, r7, r3, r1
  408340:	0c12      	lsrs	r2, r2, #16
  408342:	0c01      	lsrs	r1, r0, #16
  408344:	4423      	add	r3, r4
  408346:	fb07 1102 	mla	r1, r7, r2, r1
  40834a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40834e:	b29b      	uxth	r3, r3
  408350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408354:	45b6      	cmp	lr, r6
  408356:	f845 3b04 	str.w	r3, [r5], #4
  40835a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40835e:	d8e8      	bhi.n	408332 <__multiply+0x76>
  408360:	602c      	str	r4, [r5, #0]
  408362:	f8dc 5000 	ldr.w	r5, [ip]
  408366:	0c2d      	lsrs	r5, r5, #16
  408368:	d01d      	beq.n	4083a6 <__multiply+0xea>
  40836a:	f8d9 3000 	ldr.w	r3, [r9]
  40836e:	4648      	mov	r0, r9
  408370:	461c      	mov	r4, r3
  408372:	4659      	mov	r1, fp
  408374:	2200      	movs	r2, #0
  408376:	880e      	ldrh	r6, [r1, #0]
  408378:	0c24      	lsrs	r4, r4, #16
  40837a:	fb05 4406 	mla	r4, r5, r6, r4
  40837e:	4422      	add	r2, r4
  408380:	b29b      	uxth	r3, r3
  408382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408386:	f840 3b04 	str.w	r3, [r0], #4
  40838a:	f851 3b04 	ldr.w	r3, [r1], #4
  40838e:	6804      	ldr	r4, [r0, #0]
  408390:	0c1b      	lsrs	r3, r3, #16
  408392:	b2a6      	uxth	r6, r4
  408394:	fb05 6303 	mla	r3, r5, r3, r6
  408398:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40839c:	458e      	cmp	lr, r1
  40839e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4083a2:	d8e8      	bhi.n	408376 <__multiply+0xba>
  4083a4:	6003      	str	r3, [r0, #0]
  4083a6:	f10c 0c04 	add.w	ip, ip, #4
  4083aa:	45e2      	cmp	sl, ip
  4083ac:	f109 0904 	add.w	r9, r9, #4
  4083b0:	d8b7      	bhi.n	408322 <__multiply+0x66>
  4083b2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4083b6:	f1b8 0f00 	cmp.w	r8, #0
  4083ba:	dd0b      	ble.n	4083d4 <__multiply+0x118>
  4083bc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4083c0:	f1aa 0a04 	sub.w	sl, sl, #4
  4083c4:	b11b      	cbz	r3, 4083ce <__multiply+0x112>
  4083c6:	e005      	b.n	4083d4 <__multiply+0x118>
  4083c8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4083cc:	b913      	cbnz	r3, 4083d4 <__multiply+0x118>
  4083ce:	f1b8 0801 	subs.w	r8, r8, #1
  4083d2:	d1f9      	bne.n	4083c8 <__multiply+0x10c>
  4083d4:	9800      	ldr	r0, [sp, #0]
  4083d6:	f8c0 8010 	str.w	r8, [r0, #16]
  4083da:	b003      	add	sp, #12
  4083dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004083e0 <__pow5mult>:
  4083e0:	f012 0303 	ands.w	r3, r2, #3
  4083e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083e8:	4614      	mov	r4, r2
  4083ea:	4607      	mov	r7, r0
  4083ec:	d12e      	bne.n	40844c <__pow5mult+0x6c>
  4083ee:	460d      	mov	r5, r1
  4083f0:	10a4      	asrs	r4, r4, #2
  4083f2:	d01c      	beq.n	40842e <__pow5mult+0x4e>
  4083f4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4083f6:	b396      	cbz	r6, 40845e <__pow5mult+0x7e>
  4083f8:	07e3      	lsls	r3, r4, #31
  4083fa:	f04f 0800 	mov.w	r8, #0
  4083fe:	d406      	bmi.n	40840e <__pow5mult+0x2e>
  408400:	1064      	asrs	r4, r4, #1
  408402:	d014      	beq.n	40842e <__pow5mult+0x4e>
  408404:	6830      	ldr	r0, [r6, #0]
  408406:	b1a8      	cbz	r0, 408434 <__pow5mult+0x54>
  408408:	4606      	mov	r6, r0
  40840a:	07e3      	lsls	r3, r4, #31
  40840c:	d5f8      	bpl.n	408400 <__pow5mult+0x20>
  40840e:	4632      	mov	r2, r6
  408410:	4629      	mov	r1, r5
  408412:	4638      	mov	r0, r7
  408414:	f7ff ff52 	bl	4082bc <__multiply>
  408418:	b1b5      	cbz	r5, 408448 <__pow5mult+0x68>
  40841a:	686a      	ldr	r2, [r5, #4]
  40841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40841e:	1064      	asrs	r4, r4, #1
  408420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408424:	6029      	str	r1, [r5, #0]
  408426:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40842a:	4605      	mov	r5, r0
  40842c:	d1ea      	bne.n	408404 <__pow5mult+0x24>
  40842e:	4628      	mov	r0, r5
  408430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408434:	4632      	mov	r2, r6
  408436:	4631      	mov	r1, r6
  408438:	4638      	mov	r0, r7
  40843a:	f7ff ff3f 	bl	4082bc <__multiply>
  40843e:	6030      	str	r0, [r6, #0]
  408440:	f8c0 8000 	str.w	r8, [r0]
  408444:	4606      	mov	r6, r0
  408446:	e7e0      	b.n	40840a <__pow5mult+0x2a>
  408448:	4605      	mov	r5, r0
  40844a:	e7d9      	b.n	408400 <__pow5mult+0x20>
  40844c:	1e5a      	subs	r2, r3, #1
  40844e:	4d0b      	ldr	r5, [pc, #44]	; (40847c <__pow5mult+0x9c>)
  408450:	2300      	movs	r3, #0
  408452:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408456:	f7ff fe97 	bl	408188 <__multadd>
  40845a:	4605      	mov	r5, r0
  40845c:	e7c8      	b.n	4083f0 <__pow5mult+0x10>
  40845e:	2101      	movs	r1, #1
  408460:	4638      	mov	r0, r7
  408462:	f7ff fe61 	bl	408128 <_Balloc>
  408466:	f240 2171 	movw	r1, #625	; 0x271
  40846a:	2201      	movs	r2, #1
  40846c:	2300      	movs	r3, #0
  40846e:	6141      	str	r1, [r0, #20]
  408470:	6102      	str	r2, [r0, #16]
  408472:	4606      	mov	r6, r0
  408474:	64b8      	str	r0, [r7, #72]	; 0x48
  408476:	6003      	str	r3, [r0, #0]
  408478:	e7be      	b.n	4083f8 <__pow5mult+0x18>
  40847a:	bf00      	nop
  40847c:	004093b8 	.word	0x004093b8

00408480 <__lshift>:
  408480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408484:	4691      	mov	r9, r2
  408486:	690a      	ldr	r2, [r1, #16]
  408488:	688b      	ldr	r3, [r1, #8]
  40848a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40848e:	eb04 0802 	add.w	r8, r4, r2
  408492:	f108 0501 	add.w	r5, r8, #1
  408496:	429d      	cmp	r5, r3
  408498:	460e      	mov	r6, r1
  40849a:	4607      	mov	r7, r0
  40849c:	6849      	ldr	r1, [r1, #4]
  40849e:	dd04      	ble.n	4084aa <__lshift+0x2a>
  4084a0:	005b      	lsls	r3, r3, #1
  4084a2:	429d      	cmp	r5, r3
  4084a4:	f101 0101 	add.w	r1, r1, #1
  4084a8:	dcfa      	bgt.n	4084a0 <__lshift+0x20>
  4084aa:	4638      	mov	r0, r7
  4084ac:	f7ff fe3c 	bl	408128 <_Balloc>
  4084b0:	2c00      	cmp	r4, #0
  4084b2:	f100 0314 	add.w	r3, r0, #20
  4084b6:	dd06      	ble.n	4084c6 <__lshift+0x46>
  4084b8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4084bc:	2100      	movs	r1, #0
  4084be:	f843 1b04 	str.w	r1, [r3], #4
  4084c2:	429a      	cmp	r2, r3
  4084c4:	d1fb      	bne.n	4084be <__lshift+0x3e>
  4084c6:	6934      	ldr	r4, [r6, #16]
  4084c8:	f106 0114 	add.w	r1, r6, #20
  4084cc:	f019 091f 	ands.w	r9, r9, #31
  4084d0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4084d4:	d01d      	beq.n	408512 <__lshift+0x92>
  4084d6:	f1c9 0c20 	rsb	ip, r9, #32
  4084da:	2200      	movs	r2, #0
  4084dc:	680c      	ldr	r4, [r1, #0]
  4084de:	fa04 f409 	lsl.w	r4, r4, r9
  4084e2:	4314      	orrs	r4, r2
  4084e4:	f843 4b04 	str.w	r4, [r3], #4
  4084e8:	f851 2b04 	ldr.w	r2, [r1], #4
  4084ec:	458e      	cmp	lr, r1
  4084ee:	fa22 f20c 	lsr.w	r2, r2, ip
  4084f2:	d8f3      	bhi.n	4084dc <__lshift+0x5c>
  4084f4:	601a      	str	r2, [r3, #0]
  4084f6:	b10a      	cbz	r2, 4084fc <__lshift+0x7c>
  4084f8:	f108 0502 	add.w	r5, r8, #2
  4084fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4084fe:	6872      	ldr	r2, [r6, #4]
  408500:	3d01      	subs	r5, #1
  408502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408506:	6105      	str	r5, [r0, #16]
  408508:	6031      	str	r1, [r6, #0]
  40850a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408512:	3b04      	subs	r3, #4
  408514:	f851 2b04 	ldr.w	r2, [r1], #4
  408518:	f843 2f04 	str.w	r2, [r3, #4]!
  40851c:	458e      	cmp	lr, r1
  40851e:	d8f9      	bhi.n	408514 <__lshift+0x94>
  408520:	e7ec      	b.n	4084fc <__lshift+0x7c>
  408522:	bf00      	nop

00408524 <__mcmp>:
  408524:	b430      	push	{r4, r5}
  408526:	690b      	ldr	r3, [r1, #16]
  408528:	4605      	mov	r5, r0
  40852a:	6900      	ldr	r0, [r0, #16]
  40852c:	1ac0      	subs	r0, r0, r3
  40852e:	d10f      	bne.n	408550 <__mcmp+0x2c>
  408530:	009b      	lsls	r3, r3, #2
  408532:	3514      	adds	r5, #20
  408534:	3114      	adds	r1, #20
  408536:	4419      	add	r1, r3
  408538:	442b      	add	r3, r5
  40853a:	e001      	b.n	408540 <__mcmp+0x1c>
  40853c:	429d      	cmp	r5, r3
  40853e:	d207      	bcs.n	408550 <__mcmp+0x2c>
  408540:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408548:	4294      	cmp	r4, r2
  40854a:	d0f7      	beq.n	40853c <__mcmp+0x18>
  40854c:	d302      	bcc.n	408554 <__mcmp+0x30>
  40854e:	2001      	movs	r0, #1
  408550:	bc30      	pop	{r4, r5}
  408552:	4770      	bx	lr
  408554:	f04f 30ff 	mov.w	r0, #4294967295
  408558:	e7fa      	b.n	408550 <__mcmp+0x2c>
  40855a:	bf00      	nop

0040855c <__mdiff>:
  40855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408560:	690f      	ldr	r7, [r1, #16]
  408562:	460e      	mov	r6, r1
  408564:	6911      	ldr	r1, [r2, #16]
  408566:	1a7f      	subs	r7, r7, r1
  408568:	2f00      	cmp	r7, #0
  40856a:	4690      	mov	r8, r2
  40856c:	d117      	bne.n	40859e <__mdiff+0x42>
  40856e:	0089      	lsls	r1, r1, #2
  408570:	f106 0514 	add.w	r5, r6, #20
  408574:	f102 0e14 	add.w	lr, r2, #20
  408578:	186b      	adds	r3, r5, r1
  40857a:	4471      	add	r1, lr
  40857c:	e001      	b.n	408582 <__mdiff+0x26>
  40857e:	429d      	cmp	r5, r3
  408580:	d25c      	bcs.n	40863c <__mdiff+0xe0>
  408582:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408586:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40858a:	42a2      	cmp	r2, r4
  40858c:	d0f7      	beq.n	40857e <__mdiff+0x22>
  40858e:	d25e      	bcs.n	40864e <__mdiff+0xf2>
  408590:	4633      	mov	r3, r6
  408592:	462c      	mov	r4, r5
  408594:	4646      	mov	r6, r8
  408596:	4675      	mov	r5, lr
  408598:	4698      	mov	r8, r3
  40859a:	2701      	movs	r7, #1
  40859c:	e005      	b.n	4085aa <__mdiff+0x4e>
  40859e:	db58      	blt.n	408652 <__mdiff+0xf6>
  4085a0:	f106 0514 	add.w	r5, r6, #20
  4085a4:	f108 0414 	add.w	r4, r8, #20
  4085a8:	2700      	movs	r7, #0
  4085aa:	6871      	ldr	r1, [r6, #4]
  4085ac:	f7ff fdbc 	bl	408128 <_Balloc>
  4085b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4085b4:	6936      	ldr	r6, [r6, #16]
  4085b6:	60c7      	str	r7, [r0, #12]
  4085b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4085bc:	46a6      	mov	lr, r4
  4085be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4085c2:	f100 0414 	add.w	r4, r0, #20
  4085c6:	2300      	movs	r3, #0
  4085c8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4085cc:	f855 8b04 	ldr.w	r8, [r5], #4
  4085d0:	b28a      	uxth	r2, r1
  4085d2:	fa13 f388 	uxtah	r3, r3, r8
  4085d6:	0c09      	lsrs	r1, r1, #16
  4085d8:	1a9a      	subs	r2, r3, r2
  4085da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4085de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4085e2:	b292      	uxth	r2, r2
  4085e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4085e8:	45f4      	cmp	ip, lr
  4085ea:	f844 2b04 	str.w	r2, [r4], #4
  4085ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4085f2:	d8e9      	bhi.n	4085c8 <__mdiff+0x6c>
  4085f4:	42af      	cmp	r7, r5
  4085f6:	d917      	bls.n	408628 <__mdiff+0xcc>
  4085f8:	46a4      	mov	ip, r4
  4085fa:	46ae      	mov	lr, r5
  4085fc:	f85e 2b04 	ldr.w	r2, [lr], #4
  408600:	fa13 f382 	uxtah	r3, r3, r2
  408604:	1419      	asrs	r1, r3, #16
  408606:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40860a:	b29b      	uxth	r3, r3
  40860c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408610:	4577      	cmp	r7, lr
  408612:	f84c 2b04 	str.w	r2, [ip], #4
  408616:	ea4f 4321 	mov.w	r3, r1, asr #16
  40861a:	d8ef      	bhi.n	4085fc <__mdiff+0xa0>
  40861c:	43ed      	mvns	r5, r5
  40861e:	442f      	add	r7, r5
  408620:	f027 0703 	bic.w	r7, r7, #3
  408624:	3704      	adds	r7, #4
  408626:	443c      	add	r4, r7
  408628:	3c04      	subs	r4, #4
  40862a:	b922      	cbnz	r2, 408636 <__mdiff+0xda>
  40862c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408630:	3e01      	subs	r6, #1
  408632:	2b00      	cmp	r3, #0
  408634:	d0fa      	beq.n	40862c <__mdiff+0xd0>
  408636:	6106      	str	r6, [r0, #16]
  408638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40863c:	2100      	movs	r1, #0
  40863e:	f7ff fd73 	bl	408128 <_Balloc>
  408642:	2201      	movs	r2, #1
  408644:	2300      	movs	r3, #0
  408646:	6102      	str	r2, [r0, #16]
  408648:	6143      	str	r3, [r0, #20]
  40864a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40864e:	4674      	mov	r4, lr
  408650:	e7ab      	b.n	4085aa <__mdiff+0x4e>
  408652:	4633      	mov	r3, r6
  408654:	f106 0414 	add.w	r4, r6, #20
  408658:	f102 0514 	add.w	r5, r2, #20
  40865c:	4616      	mov	r6, r2
  40865e:	2701      	movs	r7, #1
  408660:	4698      	mov	r8, r3
  408662:	e7a2      	b.n	4085aa <__mdiff+0x4e>

00408664 <__d2b>:
  408664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408668:	b082      	sub	sp, #8
  40866a:	2101      	movs	r1, #1
  40866c:	461c      	mov	r4, r3
  40866e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408672:	4615      	mov	r5, r2
  408674:	9e08      	ldr	r6, [sp, #32]
  408676:	f7ff fd57 	bl	408128 <_Balloc>
  40867a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40867e:	4680      	mov	r8, r0
  408680:	b10f      	cbz	r7, 408686 <__d2b+0x22>
  408682:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408686:	9401      	str	r4, [sp, #4]
  408688:	b31d      	cbz	r5, 4086d2 <__d2b+0x6e>
  40868a:	a802      	add	r0, sp, #8
  40868c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408690:	f7ff fdda 	bl	408248 <__lo0bits>
  408694:	2800      	cmp	r0, #0
  408696:	d134      	bne.n	408702 <__d2b+0x9e>
  408698:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40869c:	f8c8 2014 	str.w	r2, [r8, #20]
  4086a0:	2b00      	cmp	r3, #0
  4086a2:	bf0c      	ite	eq
  4086a4:	2101      	moveq	r1, #1
  4086a6:	2102      	movne	r1, #2
  4086a8:	f8c8 3018 	str.w	r3, [r8, #24]
  4086ac:	f8c8 1010 	str.w	r1, [r8, #16]
  4086b0:	b9df      	cbnz	r7, 4086ea <__d2b+0x86>
  4086b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4086b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4086ba:	6030      	str	r0, [r6, #0]
  4086bc:	6918      	ldr	r0, [r3, #16]
  4086be:	f7ff fda3 	bl	408208 <__hi0bits>
  4086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4086c8:	6018      	str	r0, [r3, #0]
  4086ca:	4640      	mov	r0, r8
  4086cc:	b002      	add	sp, #8
  4086ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4086d2:	a801      	add	r0, sp, #4
  4086d4:	f7ff fdb8 	bl	408248 <__lo0bits>
  4086d8:	9b01      	ldr	r3, [sp, #4]
  4086da:	f8c8 3014 	str.w	r3, [r8, #20]
  4086de:	2101      	movs	r1, #1
  4086e0:	3020      	adds	r0, #32
  4086e2:	f8c8 1010 	str.w	r1, [r8, #16]
  4086e6:	2f00      	cmp	r7, #0
  4086e8:	d0e3      	beq.n	4086b2 <__d2b+0x4e>
  4086ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086ec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4086f0:	4407      	add	r7, r0
  4086f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4086f6:	6037      	str	r7, [r6, #0]
  4086f8:	6018      	str	r0, [r3, #0]
  4086fa:	4640      	mov	r0, r8
  4086fc:	b002      	add	sp, #8
  4086fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408702:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408706:	f1c0 0220 	rsb	r2, r0, #32
  40870a:	fa03 f202 	lsl.w	r2, r3, r2
  40870e:	430a      	orrs	r2, r1
  408710:	40c3      	lsrs	r3, r0
  408712:	9301      	str	r3, [sp, #4]
  408714:	f8c8 2014 	str.w	r2, [r8, #20]
  408718:	e7c2      	b.n	4086a0 <__d2b+0x3c>
  40871a:	bf00      	nop

0040871c <_realloc_r>:
  40871c:	2900      	cmp	r1, #0
  40871e:	f000 8095 	beq.w	40884c <_realloc_r+0x130>
  408722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408726:	460d      	mov	r5, r1
  408728:	4616      	mov	r6, r2
  40872a:	b083      	sub	sp, #12
  40872c:	4680      	mov	r8, r0
  40872e:	f106 070b 	add.w	r7, r6, #11
  408732:	f7fc fa69 	bl	404c08 <__malloc_lock>
  408736:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40873a:	2f16      	cmp	r7, #22
  40873c:	f02e 0403 	bic.w	r4, lr, #3
  408740:	f1a5 0908 	sub.w	r9, r5, #8
  408744:	d83c      	bhi.n	4087c0 <_realloc_r+0xa4>
  408746:	2210      	movs	r2, #16
  408748:	4617      	mov	r7, r2
  40874a:	42be      	cmp	r6, r7
  40874c:	d83d      	bhi.n	4087ca <_realloc_r+0xae>
  40874e:	4294      	cmp	r4, r2
  408750:	da43      	bge.n	4087da <_realloc_r+0xbe>
  408752:	4bc4      	ldr	r3, [pc, #784]	; (408a64 <_realloc_r+0x348>)
  408754:	6899      	ldr	r1, [r3, #8]
  408756:	eb09 0004 	add.w	r0, r9, r4
  40875a:	4288      	cmp	r0, r1
  40875c:	f000 80b4 	beq.w	4088c8 <_realloc_r+0x1ac>
  408760:	6843      	ldr	r3, [r0, #4]
  408762:	f023 0101 	bic.w	r1, r3, #1
  408766:	4401      	add	r1, r0
  408768:	6849      	ldr	r1, [r1, #4]
  40876a:	07c9      	lsls	r1, r1, #31
  40876c:	d54c      	bpl.n	408808 <_realloc_r+0xec>
  40876e:	f01e 0f01 	tst.w	lr, #1
  408772:	f000 809b 	beq.w	4088ac <_realloc_r+0x190>
  408776:	4631      	mov	r1, r6
  408778:	4640      	mov	r0, r8
  40877a:	f7fb fead 	bl	4044d8 <_malloc_r>
  40877e:	4606      	mov	r6, r0
  408780:	2800      	cmp	r0, #0
  408782:	d03a      	beq.n	4087fa <_realloc_r+0xde>
  408784:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408788:	f023 0301 	bic.w	r3, r3, #1
  40878c:	444b      	add	r3, r9
  40878e:	f1a0 0208 	sub.w	r2, r0, #8
  408792:	429a      	cmp	r2, r3
  408794:	f000 8121 	beq.w	4089da <_realloc_r+0x2be>
  408798:	1f22      	subs	r2, r4, #4
  40879a:	2a24      	cmp	r2, #36	; 0x24
  40879c:	f200 8107 	bhi.w	4089ae <_realloc_r+0x292>
  4087a0:	2a13      	cmp	r2, #19
  4087a2:	f200 80db 	bhi.w	40895c <_realloc_r+0x240>
  4087a6:	4603      	mov	r3, r0
  4087a8:	462a      	mov	r2, r5
  4087aa:	6811      	ldr	r1, [r2, #0]
  4087ac:	6019      	str	r1, [r3, #0]
  4087ae:	6851      	ldr	r1, [r2, #4]
  4087b0:	6059      	str	r1, [r3, #4]
  4087b2:	6892      	ldr	r2, [r2, #8]
  4087b4:	609a      	str	r2, [r3, #8]
  4087b6:	4629      	mov	r1, r5
  4087b8:	4640      	mov	r0, r8
  4087ba:	f7ff f8e9 	bl	407990 <_free_r>
  4087be:	e01c      	b.n	4087fa <_realloc_r+0xde>
  4087c0:	f027 0707 	bic.w	r7, r7, #7
  4087c4:	2f00      	cmp	r7, #0
  4087c6:	463a      	mov	r2, r7
  4087c8:	dabf      	bge.n	40874a <_realloc_r+0x2e>
  4087ca:	2600      	movs	r6, #0
  4087cc:	230c      	movs	r3, #12
  4087ce:	4630      	mov	r0, r6
  4087d0:	f8c8 3000 	str.w	r3, [r8]
  4087d4:	b003      	add	sp, #12
  4087d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087da:	462e      	mov	r6, r5
  4087dc:	1be3      	subs	r3, r4, r7
  4087de:	2b0f      	cmp	r3, #15
  4087e0:	d81e      	bhi.n	408820 <_realloc_r+0x104>
  4087e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4087e6:	f003 0301 	and.w	r3, r3, #1
  4087ea:	4323      	orrs	r3, r4
  4087ec:	444c      	add	r4, r9
  4087ee:	f8c9 3004 	str.w	r3, [r9, #4]
  4087f2:	6863      	ldr	r3, [r4, #4]
  4087f4:	f043 0301 	orr.w	r3, r3, #1
  4087f8:	6063      	str	r3, [r4, #4]
  4087fa:	4640      	mov	r0, r8
  4087fc:	f7fc fa0a 	bl	404c14 <__malloc_unlock>
  408800:	4630      	mov	r0, r6
  408802:	b003      	add	sp, #12
  408804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408808:	f023 0303 	bic.w	r3, r3, #3
  40880c:	18e1      	adds	r1, r4, r3
  40880e:	4291      	cmp	r1, r2
  408810:	db1f      	blt.n	408852 <_realloc_r+0x136>
  408812:	68c3      	ldr	r3, [r0, #12]
  408814:	6882      	ldr	r2, [r0, #8]
  408816:	462e      	mov	r6, r5
  408818:	60d3      	str	r3, [r2, #12]
  40881a:	460c      	mov	r4, r1
  40881c:	609a      	str	r2, [r3, #8]
  40881e:	e7dd      	b.n	4087dc <_realloc_r+0xc0>
  408820:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408824:	eb09 0107 	add.w	r1, r9, r7
  408828:	f002 0201 	and.w	r2, r2, #1
  40882c:	444c      	add	r4, r9
  40882e:	f043 0301 	orr.w	r3, r3, #1
  408832:	4317      	orrs	r7, r2
  408834:	f8c9 7004 	str.w	r7, [r9, #4]
  408838:	604b      	str	r3, [r1, #4]
  40883a:	6863      	ldr	r3, [r4, #4]
  40883c:	f043 0301 	orr.w	r3, r3, #1
  408840:	3108      	adds	r1, #8
  408842:	6063      	str	r3, [r4, #4]
  408844:	4640      	mov	r0, r8
  408846:	f7ff f8a3 	bl	407990 <_free_r>
  40884a:	e7d6      	b.n	4087fa <_realloc_r+0xde>
  40884c:	4611      	mov	r1, r2
  40884e:	f7fb be43 	b.w	4044d8 <_malloc_r>
  408852:	f01e 0f01 	tst.w	lr, #1
  408856:	d18e      	bne.n	408776 <_realloc_r+0x5a>
  408858:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40885c:	eba9 0a01 	sub.w	sl, r9, r1
  408860:	f8da 1004 	ldr.w	r1, [sl, #4]
  408864:	f021 0103 	bic.w	r1, r1, #3
  408868:	440b      	add	r3, r1
  40886a:	4423      	add	r3, r4
  40886c:	4293      	cmp	r3, r2
  40886e:	db25      	blt.n	4088bc <_realloc_r+0x1a0>
  408870:	68c2      	ldr	r2, [r0, #12]
  408872:	6881      	ldr	r1, [r0, #8]
  408874:	4656      	mov	r6, sl
  408876:	60ca      	str	r2, [r1, #12]
  408878:	6091      	str	r1, [r2, #8]
  40887a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40887e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408882:	1f22      	subs	r2, r4, #4
  408884:	2a24      	cmp	r2, #36	; 0x24
  408886:	60c1      	str	r1, [r0, #12]
  408888:	6088      	str	r0, [r1, #8]
  40888a:	f200 8094 	bhi.w	4089b6 <_realloc_r+0x29a>
  40888e:	2a13      	cmp	r2, #19
  408890:	d96f      	bls.n	408972 <_realloc_r+0x256>
  408892:	6829      	ldr	r1, [r5, #0]
  408894:	f8ca 1008 	str.w	r1, [sl, #8]
  408898:	6869      	ldr	r1, [r5, #4]
  40889a:	f8ca 100c 	str.w	r1, [sl, #12]
  40889e:	2a1b      	cmp	r2, #27
  4088a0:	f200 80a2 	bhi.w	4089e8 <_realloc_r+0x2cc>
  4088a4:	3508      	adds	r5, #8
  4088a6:	f10a 0210 	add.w	r2, sl, #16
  4088aa:	e063      	b.n	408974 <_realloc_r+0x258>
  4088ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4088b0:	eba9 0a03 	sub.w	sl, r9, r3
  4088b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4088b8:	f021 0103 	bic.w	r1, r1, #3
  4088bc:	1863      	adds	r3, r4, r1
  4088be:	4293      	cmp	r3, r2
  4088c0:	f6ff af59 	blt.w	408776 <_realloc_r+0x5a>
  4088c4:	4656      	mov	r6, sl
  4088c6:	e7d8      	b.n	40887a <_realloc_r+0x15e>
  4088c8:	6841      	ldr	r1, [r0, #4]
  4088ca:	f021 0b03 	bic.w	fp, r1, #3
  4088ce:	44a3      	add	fp, r4
  4088d0:	f107 0010 	add.w	r0, r7, #16
  4088d4:	4583      	cmp	fp, r0
  4088d6:	da56      	bge.n	408986 <_realloc_r+0x26a>
  4088d8:	f01e 0f01 	tst.w	lr, #1
  4088dc:	f47f af4b 	bne.w	408776 <_realloc_r+0x5a>
  4088e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4088e4:	eba9 0a01 	sub.w	sl, r9, r1
  4088e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4088ec:	f021 0103 	bic.w	r1, r1, #3
  4088f0:	448b      	add	fp, r1
  4088f2:	4558      	cmp	r0, fp
  4088f4:	dce2      	bgt.n	4088bc <_realloc_r+0x1a0>
  4088f6:	4656      	mov	r6, sl
  4088f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4088fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408900:	1f22      	subs	r2, r4, #4
  408902:	2a24      	cmp	r2, #36	; 0x24
  408904:	60c1      	str	r1, [r0, #12]
  408906:	6088      	str	r0, [r1, #8]
  408908:	f200 808f 	bhi.w	408a2a <_realloc_r+0x30e>
  40890c:	2a13      	cmp	r2, #19
  40890e:	f240 808a 	bls.w	408a26 <_realloc_r+0x30a>
  408912:	6829      	ldr	r1, [r5, #0]
  408914:	f8ca 1008 	str.w	r1, [sl, #8]
  408918:	6869      	ldr	r1, [r5, #4]
  40891a:	f8ca 100c 	str.w	r1, [sl, #12]
  40891e:	2a1b      	cmp	r2, #27
  408920:	f200 808a 	bhi.w	408a38 <_realloc_r+0x31c>
  408924:	3508      	adds	r5, #8
  408926:	f10a 0210 	add.w	r2, sl, #16
  40892a:	6829      	ldr	r1, [r5, #0]
  40892c:	6011      	str	r1, [r2, #0]
  40892e:	6869      	ldr	r1, [r5, #4]
  408930:	6051      	str	r1, [r2, #4]
  408932:	68a9      	ldr	r1, [r5, #8]
  408934:	6091      	str	r1, [r2, #8]
  408936:	eb0a 0107 	add.w	r1, sl, r7
  40893a:	ebab 0207 	sub.w	r2, fp, r7
  40893e:	f042 0201 	orr.w	r2, r2, #1
  408942:	6099      	str	r1, [r3, #8]
  408944:	604a      	str	r2, [r1, #4]
  408946:	f8da 3004 	ldr.w	r3, [sl, #4]
  40894a:	f003 0301 	and.w	r3, r3, #1
  40894e:	431f      	orrs	r7, r3
  408950:	4640      	mov	r0, r8
  408952:	f8ca 7004 	str.w	r7, [sl, #4]
  408956:	f7fc f95d 	bl	404c14 <__malloc_unlock>
  40895a:	e751      	b.n	408800 <_realloc_r+0xe4>
  40895c:	682b      	ldr	r3, [r5, #0]
  40895e:	6003      	str	r3, [r0, #0]
  408960:	686b      	ldr	r3, [r5, #4]
  408962:	6043      	str	r3, [r0, #4]
  408964:	2a1b      	cmp	r2, #27
  408966:	d82d      	bhi.n	4089c4 <_realloc_r+0x2a8>
  408968:	f100 0308 	add.w	r3, r0, #8
  40896c:	f105 0208 	add.w	r2, r5, #8
  408970:	e71b      	b.n	4087aa <_realloc_r+0x8e>
  408972:	4632      	mov	r2, r6
  408974:	6829      	ldr	r1, [r5, #0]
  408976:	6011      	str	r1, [r2, #0]
  408978:	6869      	ldr	r1, [r5, #4]
  40897a:	6051      	str	r1, [r2, #4]
  40897c:	68a9      	ldr	r1, [r5, #8]
  40897e:	6091      	str	r1, [r2, #8]
  408980:	461c      	mov	r4, r3
  408982:	46d1      	mov	r9, sl
  408984:	e72a      	b.n	4087dc <_realloc_r+0xc0>
  408986:	eb09 0107 	add.w	r1, r9, r7
  40898a:	ebab 0b07 	sub.w	fp, fp, r7
  40898e:	f04b 0201 	orr.w	r2, fp, #1
  408992:	6099      	str	r1, [r3, #8]
  408994:	604a      	str	r2, [r1, #4]
  408996:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40899a:	f003 0301 	and.w	r3, r3, #1
  40899e:	431f      	orrs	r7, r3
  4089a0:	4640      	mov	r0, r8
  4089a2:	f845 7c04 	str.w	r7, [r5, #-4]
  4089a6:	f7fc f935 	bl	404c14 <__malloc_unlock>
  4089aa:	462e      	mov	r6, r5
  4089ac:	e728      	b.n	408800 <_realloc_r+0xe4>
  4089ae:	4629      	mov	r1, r5
  4089b0:	f7ff fb56 	bl	408060 <memmove>
  4089b4:	e6ff      	b.n	4087b6 <_realloc_r+0x9a>
  4089b6:	4629      	mov	r1, r5
  4089b8:	4630      	mov	r0, r6
  4089ba:	461c      	mov	r4, r3
  4089bc:	46d1      	mov	r9, sl
  4089be:	f7ff fb4f 	bl	408060 <memmove>
  4089c2:	e70b      	b.n	4087dc <_realloc_r+0xc0>
  4089c4:	68ab      	ldr	r3, [r5, #8]
  4089c6:	6083      	str	r3, [r0, #8]
  4089c8:	68eb      	ldr	r3, [r5, #12]
  4089ca:	60c3      	str	r3, [r0, #12]
  4089cc:	2a24      	cmp	r2, #36	; 0x24
  4089ce:	d017      	beq.n	408a00 <_realloc_r+0x2e4>
  4089d0:	f100 0310 	add.w	r3, r0, #16
  4089d4:	f105 0210 	add.w	r2, r5, #16
  4089d8:	e6e7      	b.n	4087aa <_realloc_r+0x8e>
  4089da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4089de:	f023 0303 	bic.w	r3, r3, #3
  4089e2:	441c      	add	r4, r3
  4089e4:	462e      	mov	r6, r5
  4089e6:	e6f9      	b.n	4087dc <_realloc_r+0xc0>
  4089e8:	68a9      	ldr	r1, [r5, #8]
  4089ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4089ee:	68e9      	ldr	r1, [r5, #12]
  4089f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4089f4:	2a24      	cmp	r2, #36	; 0x24
  4089f6:	d00c      	beq.n	408a12 <_realloc_r+0x2f6>
  4089f8:	3510      	adds	r5, #16
  4089fa:	f10a 0218 	add.w	r2, sl, #24
  4089fe:	e7b9      	b.n	408974 <_realloc_r+0x258>
  408a00:	692b      	ldr	r3, [r5, #16]
  408a02:	6103      	str	r3, [r0, #16]
  408a04:	696b      	ldr	r3, [r5, #20]
  408a06:	6143      	str	r3, [r0, #20]
  408a08:	f105 0218 	add.w	r2, r5, #24
  408a0c:	f100 0318 	add.w	r3, r0, #24
  408a10:	e6cb      	b.n	4087aa <_realloc_r+0x8e>
  408a12:	692a      	ldr	r2, [r5, #16]
  408a14:	f8ca 2018 	str.w	r2, [sl, #24]
  408a18:	696a      	ldr	r2, [r5, #20]
  408a1a:	f8ca 201c 	str.w	r2, [sl, #28]
  408a1e:	3518      	adds	r5, #24
  408a20:	f10a 0220 	add.w	r2, sl, #32
  408a24:	e7a6      	b.n	408974 <_realloc_r+0x258>
  408a26:	4632      	mov	r2, r6
  408a28:	e77f      	b.n	40892a <_realloc_r+0x20e>
  408a2a:	4629      	mov	r1, r5
  408a2c:	4630      	mov	r0, r6
  408a2e:	9301      	str	r3, [sp, #4]
  408a30:	f7ff fb16 	bl	408060 <memmove>
  408a34:	9b01      	ldr	r3, [sp, #4]
  408a36:	e77e      	b.n	408936 <_realloc_r+0x21a>
  408a38:	68a9      	ldr	r1, [r5, #8]
  408a3a:	f8ca 1010 	str.w	r1, [sl, #16]
  408a3e:	68e9      	ldr	r1, [r5, #12]
  408a40:	f8ca 1014 	str.w	r1, [sl, #20]
  408a44:	2a24      	cmp	r2, #36	; 0x24
  408a46:	d003      	beq.n	408a50 <_realloc_r+0x334>
  408a48:	3510      	adds	r5, #16
  408a4a:	f10a 0218 	add.w	r2, sl, #24
  408a4e:	e76c      	b.n	40892a <_realloc_r+0x20e>
  408a50:	692a      	ldr	r2, [r5, #16]
  408a52:	f8ca 2018 	str.w	r2, [sl, #24]
  408a56:	696a      	ldr	r2, [r5, #20]
  408a58:	f8ca 201c 	str.w	r2, [sl, #28]
  408a5c:	3518      	adds	r5, #24
  408a5e:	f10a 0220 	add.w	r2, sl, #32
  408a62:	e762      	b.n	40892a <_realloc_r+0x20e>
  408a64:	20400440 	.word	0x20400440

00408a68 <__sread>:
  408a68:	b510      	push	{r4, lr}
  408a6a:	460c      	mov	r4, r1
  408a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408a70:	f000 fa88 	bl	408f84 <_read_r>
  408a74:	2800      	cmp	r0, #0
  408a76:	db03      	blt.n	408a80 <__sread+0x18>
  408a78:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408a7a:	4403      	add	r3, r0
  408a7c:	6523      	str	r3, [r4, #80]	; 0x50
  408a7e:	bd10      	pop	{r4, pc}
  408a80:	89a3      	ldrh	r3, [r4, #12]
  408a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408a86:	81a3      	strh	r3, [r4, #12]
  408a88:	bd10      	pop	{r4, pc}
  408a8a:	bf00      	nop

00408a8c <__swrite>:
  408a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408a90:	4616      	mov	r6, r2
  408a92:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408a96:	461f      	mov	r7, r3
  408a98:	05d3      	lsls	r3, r2, #23
  408a9a:	460c      	mov	r4, r1
  408a9c:	4605      	mov	r5, r0
  408a9e:	d507      	bpl.n	408ab0 <__swrite+0x24>
  408aa0:	2200      	movs	r2, #0
  408aa2:	2302      	movs	r3, #2
  408aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408aa8:	f000 fa40 	bl	408f2c <_lseek_r>
  408aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408ab8:	81a2      	strh	r2, [r4, #12]
  408aba:	463b      	mov	r3, r7
  408abc:	4632      	mov	r2, r6
  408abe:	4628      	mov	r0, r5
  408ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408ac4:	f000 b85e 	b.w	408b84 <_write_r>

00408ac8 <__sseek>:
  408ac8:	b510      	push	{r4, lr}
  408aca:	460c      	mov	r4, r1
  408acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ad0:	f000 fa2c 	bl	408f2c <_lseek_r>
  408ad4:	89a3      	ldrh	r3, [r4, #12]
  408ad6:	1c42      	adds	r2, r0, #1
  408ad8:	bf0e      	itee	eq
  408ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408ae2:	6520      	strne	r0, [r4, #80]	; 0x50
  408ae4:	81a3      	strh	r3, [r4, #12]
  408ae6:	bd10      	pop	{r4, pc}

00408ae8 <__sclose>:
  408ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408aec:	f000 b8f2 	b.w	408cd4 <_close_r>

00408af0 <__sprint_r.part.0>:
  408af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408af4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  408af6:	049c      	lsls	r4, r3, #18
  408af8:	4693      	mov	fp, r2
  408afa:	d52f      	bpl.n	408b5c <__sprint_r.part.0+0x6c>
  408afc:	6893      	ldr	r3, [r2, #8]
  408afe:	6812      	ldr	r2, [r2, #0]
  408b00:	b353      	cbz	r3, 408b58 <__sprint_r.part.0+0x68>
  408b02:	460e      	mov	r6, r1
  408b04:	4607      	mov	r7, r0
  408b06:	f102 0908 	add.w	r9, r2, #8
  408b0a:	e919 0420 	ldmdb	r9, {r5, sl}
  408b0e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408b12:	d017      	beq.n	408b44 <__sprint_r.part.0+0x54>
  408b14:	3d04      	subs	r5, #4
  408b16:	2400      	movs	r4, #0
  408b18:	e001      	b.n	408b1e <__sprint_r.part.0+0x2e>
  408b1a:	45a0      	cmp	r8, r4
  408b1c:	d010      	beq.n	408b40 <__sprint_r.part.0+0x50>
  408b1e:	4632      	mov	r2, r6
  408b20:	f855 1f04 	ldr.w	r1, [r5, #4]!
  408b24:	4638      	mov	r0, r7
  408b26:	f000 f999 	bl	408e5c <_fputwc_r>
  408b2a:	1c43      	adds	r3, r0, #1
  408b2c:	f104 0401 	add.w	r4, r4, #1
  408b30:	d1f3      	bne.n	408b1a <__sprint_r.part.0+0x2a>
  408b32:	2300      	movs	r3, #0
  408b34:	f8cb 3008 	str.w	r3, [fp, #8]
  408b38:	f8cb 3004 	str.w	r3, [fp, #4]
  408b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b40:	f8db 3008 	ldr.w	r3, [fp, #8]
  408b44:	f02a 0a03 	bic.w	sl, sl, #3
  408b48:	eba3 030a 	sub.w	r3, r3, sl
  408b4c:	f8cb 3008 	str.w	r3, [fp, #8]
  408b50:	f109 0908 	add.w	r9, r9, #8
  408b54:	2b00      	cmp	r3, #0
  408b56:	d1d8      	bne.n	408b0a <__sprint_r.part.0+0x1a>
  408b58:	2000      	movs	r0, #0
  408b5a:	e7ea      	b.n	408b32 <__sprint_r.part.0+0x42>
  408b5c:	f7fe fffe 	bl	407b5c <__sfvwrite_r>
  408b60:	2300      	movs	r3, #0
  408b62:	f8cb 3008 	str.w	r3, [fp, #8]
  408b66:	f8cb 3004 	str.w	r3, [fp, #4]
  408b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b6e:	bf00      	nop

00408b70 <__sprint_r>:
  408b70:	6893      	ldr	r3, [r2, #8]
  408b72:	b10b      	cbz	r3, 408b78 <__sprint_r+0x8>
  408b74:	f7ff bfbc 	b.w	408af0 <__sprint_r.part.0>
  408b78:	b410      	push	{r4}
  408b7a:	4618      	mov	r0, r3
  408b7c:	6053      	str	r3, [r2, #4]
  408b7e:	bc10      	pop	{r4}
  408b80:	4770      	bx	lr
  408b82:	bf00      	nop

00408b84 <_write_r>:
  408b84:	b570      	push	{r4, r5, r6, lr}
  408b86:	460d      	mov	r5, r1
  408b88:	4c08      	ldr	r4, [pc, #32]	; (408bac <_write_r+0x28>)
  408b8a:	4611      	mov	r1, r2
  408b8c:	4606      	mov	r6, r0
  408b8e:	461a      	mov	r2, r3
  408b90:	4628      	mov	r0, r5
  408b92:	2300      	movs	r3, #0
  408b94:	6023      	str	r3, [r4, #0]
  408b96:	f7f7 ff2d 	bl	4009f4 <_write>
  408b9a:	1c43      	adds	r3, r0, #1
  408b9c:	d000      	beq.n	408ba0 <_write_r+0x1c>
  408b9e:	bd70      	pop	{r4, r5, r6, pc}
  408ba0:	6823      	ldr	r3, [r4, #0]
  408ba2:	2b00      	cmp	r3, #0
  408ba4:	d0fb      	beq.n	408b9e <_write_r+0x1a>
  408ba6:	6033      	str	r3, [r6, #0]
  408ba8:	bd70      	pop	{r4, r5, r6, pc}
  408baa:	bf00      	nop
  408bac:	20400e50 	.word	0x20400e50

00408bb0 <__register_exitproc>:
  408bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408bb4:	4d2c      	ldr	r5, [pc, #176]	; (408c68 <__register_exitproc+0xb8>)
  408bb6:	4606      	mov	r6, r0
  408bb8:	6828      	ldr	r0, [r5, #0]
  408bba:	4698      	mov	r8, r3
  408bbc:	460f      	mov	r7, r1
  408bbe:	4691      	mov	r9, r2
  408bc0:	f7ff f980 	bl	407ec4 <__retarget_lock_acquire_recursive>
  408bc4:	4b29      	ldr	r3, [pc, #164]	; (408c6c <__register_exitproc+0xbc>)
  408bc6:	681c      	ldr	r4, [r3, #0]
  408bc8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408bcc:	2b00      	cmp	r3, #0
  408bce:	d03e      	beq.n	408c4e <__register_exitproc+0x9e>
  408bd0:	685a      	ldr	r2, [r3, #4]
  408bd2:	2a1f      	cmp	r2, #31
  408bd4:	dc1c      	bgt.n	408c10 <__register_exitproc+0x60>
  408bd6:	f102 0e01 	add.w	lr, r2, #1
  408bda:	b176      	cbz	r6, 408bfa <__register_exitproc+0x4a>
  408bdc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408be0:	2401      	movs	r4, #1
  408be2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408be6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408bea:	4094      	lsls	r4, r2
  408bec:	4320      	orrs	r0, r4
  408bee:	2e02      	cmp	r6, #2
  408bf0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408bf4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408bf8:	d023      	beq.n	408c42 <__register_exitproc+0x92>
  408bfa:	3202      	adds	r2, #2
  408bfc:	f8c3 e004 	str.w	lr, [r3, #4]
  408c00:	6828      	ldr	r0, [r5, #0]
  408c02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408c06:	f7ff f95f 	bl	407ec8 <__retarget_lock_release_recursive>
  408c0a:	2000      	movs	r0, #0
  408c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408c10:	4b17      	ldr	r3, [pc, #92]	; (408c70 <__register_exitproc+0xc0>)
  408c12:	b30b      	cbz	r3, 408c58 <__register_exitproc+0xa8>
  408c14:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408c18:	f7fb fc4e 	bl	4044b8 <malloc>
  408c1c:	4603      	mov	r3, r0
  408c1e:	b1d8      	cbz	r0, 408c58 <__register_exitproc+0xa8>
  408c20:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408c24:	6002      	str	r2, [r0, #0]
  408c26:	2100      	movs	r1, #0
  408c28:	6041      	str	r1, [r0, #4]
  408c2a:	460a      	mov	r2, r1
  408c2c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408c30:	f04f 0e01 	mov.w	lr, #1
  408c34:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408c38:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408c3c:	2e00      	cmp	r6, #0
  408c3e:	d0dc      	beq.n	408bfa <__register_exitproc+0x4a>
  408c40:	e7cc      	b.n	408bdc <__register_exitproc+0x2c>
  408c42:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408c46:	430c      	orrs	r4, r1
  408c48:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408c4c:	e7d5      	b.n	408bfa <__register_exitproc+0x4a>
  408c4e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408c52:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408c56:	e7bb      	b.n	408bd0 <__register_exitproc+0x20>
  408c58:	6828      	ldr	r0, [r5, #0]
  408c5a:	f7ff f935 	bl	407ec8 <__retarget_lock_release_recursive>
  408c5e:	f04f 30ff 	mov.w	r0, #4294967295
  408c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408c66:	bf00      	nop
  408c68:	20400850 	.word	0x20400850
  408c6c:	0040924c 	.word	0x0040924c
  408c70:	004044b9 	.word	0x004044b9

00408c74 <_calloc_r>:
  408c74:	b510      	push	{r4, lr}
  408c76:	fb02 f101 	mul.w	r1, r2, r1
  408c7a:	f7fb fc2d 	bl	4044d8 <_malloc_r>
  408c7e:	4604      	mov	r4, r0
  408c80:	b1d8      	cbz	r0, 408cba <_calloc_r+0x46>
  408c82:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408c86:	f022 0203 	bic.w	r2, r2, #3
  408c8a:	3a04      	subs	r2, #4
  408c8c:	2a24      	cmp	r2, #36	; 0x24
  408c8e:	d818      	bhi.n	408cc2 <_calloc_r+0x4e>
  408c90:	2a13      	cmp	r2, #19
  408c92:	d914      	bls.n	408cbe <_calloc_r+0x4a>
  408c94:	2300      	movs	r3, #0
  408c96:	2a1b      	cmp	r2, #27
  408c98:	6003      	str	r3, [r0, #0]
  408c9a:	6043      	str	r3, [r0, #4]
  408c9c:	d916      	bls.n	408ccc <_calloc_r+0x58>
  408c9e:	2a24      	cmp	r2, #36	; 0x24
  408ca0:	6083      	str	r3, [r0, #8]
  408ca2:	60c3      	str	r3, [r0, #12]
  408ca4:	bf11      	iteee	ne
  408ca6:	f100 0210 	addne.w	r2, r0, #16
  408caa:	6103      	streq	r3, [r0, #16]
  408cac:	6143      	streq	r3, [r0, #20]
  408cae:	f100 0218 	addeq.w	r2, r0, #24
  408cb2:	2300      	movs	r3, #0
  408cb4:	6013      	str	r3, [r2, #0]
  408cb6:	6053      	str	r3, [r2, #4]
  408cb8:	6093      	str	r3, [r2, #8]
  408cba:	4620      	mov	r0, r4
  408cbc:	bd10      	pop	{r4, pc}
  408cbe:	4602      	mov	r2, r0
  408cc0:	e7f7      	b.n	408cb2 <_calloc_r+0x3e>
  408cc2:	2100      	movs	r1, #0
  408cc4:	f7fb ff52 	bl	404b6c <memset>
  408cc8:	4620      	mov	r0, r4
  408cca:	bd10      	pop	{r4, pc}
  408ccc:	f100 0208 	add.w	r2, r0, #8
  408cd0:	e7ef      	b.n	408cb2 <_calloc_r+0x3e>
  408cd2:	bf00      	nop

00408cd4 <_close_r>:
  408cd4:	b538      	push	{r3, r4, r5, lr}
  408cd6:	4c07      	ldr	r4, [pc, #28]	; (408cf4 <_close_r+0x20>)
  408cd8:	2300      	movs	r3, #0
  408cda:	4605      	mov	r5, r0
  408cdc:	4608      	mov	r0, r1
  408cde:	6023      	str	r3, [r4, #0]
  408ce0:	f7f8 fba2 	bl	401428 <_close>
  408ce4:	1c43      	adds	r3, r0, #1
  408ce6:	d000      	beq.n	408cea <_close_r+0x16>
  408ce8:	bd38      	pop	{r3, r4, r5, pc}
  408cea:	6823      	ldr	r3, [r4, #0]
  408cec:	2b00      	cmp	r3, #0
  408cee:	d0fb      	beq.n	408ce8 <_close_r+0x14>
  408cf0:	602b      	str	r3, [r5, #0]
  408cf2:	bd38      	pop	{r3, r4, r5, pc}
  408cf4:	20400e50 	.word	0x20400e50

00408cf8 <_fclose_r>:
  408cf8:	b570      	push	{r4, r5, r6, lr}
  408cfa:	b159      	cbz	r1, 408d14 <_fclose_r+0x1c>
  408cfc:	4605      	mov	r5, r0
  408cfe:	460c      	mov	r4, r1
  408d00:	b110      	cbz	r0, 408d08 <_fclose_r+0x10>
  408d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408d04:	2b00      	cmp	r3, #0
  408d06:	d03c      	beq.n	408d82 <_fclose_r+0x8a>
  408d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408d0a:	07d8      	lsls	r0, r3, #31
  408d0c:	d505      	bpl.n	408d1a <_fclose_r+0x22>
  408d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d12:	b92b      	cbnz	r3, 408d20 <_fclose_r+0x28>
  408d14:	2600      	movs	r6, #0
  408d16:	4630      	mov	r0, r6
  408d18:	bd70      	pop	{r4, r5, r6, pc}
  408d1a:	89a3      	ldrh	r3, [r4, #12]
  408d1c:	0599      	lsls	r1, r3, #22
  408d1e:	d53c      	bpl.n	408d9a <_fclose_r+0xa2>
  408d20:	4621      	mov	r1, r4
  408d22:	4628      	mov	r0, r5
  408d24:	f7fe fc9a 	bl	40765c <__sflush_r>
  408d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408d2a:	4606      	mov	r6, r0
  408d2c:	b133      	cbz	r3, 408d3c <_fclose_r+0x44>
  408d2e:	69e1      	ldr	r1, [r4, #28]
  408d30:	4628      	mov	r0, r5
  408d32:	4798      	blx	r3
  408d34:	2800      	cmp	r0, #0
  408d36:	bfb8      	it	lt
  408d38:	f04f 36ff 	movlt.w	r6, #4294967295
  408d3c:	89a3      	ldrh	r3, [r4, #12]
  408d3e:	061a      	lsls	r2, r3, #24
  408d40:	d422      	bmi.n	408d88 <_fclose_r+0x90>
  408d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408d44:	b141      	cbz	r1, 408d58 <_fclose_r+0x60>
  408d46:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408d4a:	4299      	cmp	r1, r3
  408d4c:	d002      	beq.n	408d54 <_fclose_r+0x5c>
  408d4e:	4628      	mov	r0, r5
  408d50:	f7fe fe1e 	bl	407990 <_free_r>
  408d54:	2300      	movs	r3, #0
  408d56:	6323      	str	r3, [r4, #48]	; 0x30
  408d58:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408d5a:	b121      	cbz	r1, 408d66 <_fclose_r+0x6e>
  408d5c:	4628      	mov	r0, r5
  408d5e:	f7fe fe17 	bl	407990 <_free_r>
  408d62:	2300      	movs	r3, #0
  408d64:	6463      	str	r3, [r4, #68]	; 0x44
  408d66:	f7fe fd9d 	bl	4078a4 <__sfp_lock_acquire>
  408d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408d6c:	2200      	movs	r2, #0
  408d6e:	07db      	lsls	r3, r3, #31
  408d70:	81a2      	strh	r2, [r4, #12]
  408d72:	d50e      	bpl.n	408d92 <_fclose_r+0x9a>
  408d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408d76:	f7ff f8a3 	bl	407ec0 <__retarget_lock_close_recursive>
  408d7a:	f7fe fd99 	bl	4078b0 <__sfp_lock_release>
  408d7e:	4630      	mov	r0, r6
  408d80:	bd70      	pop	{r4, r5, r6, pc}
  408d82:	f7fe fd63 	bl	40784c <__sinit>
  408d86:	e7bf      	b.n	408d08 <_fclose_r+0x10>
  408d88:	6921      	ldr	r1, [r4, #16]
  408d8a:	4628      	mov	r0, r5
  408d8c:	f7fe fe00 	bl	407990 <_free_r>
  408d90:	e7d7      	b.n	408d42 <_fclose_r+0x4a>
  408d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408d94:	f7ff f898 	bl	407ec8 <__retarget_lock_release_recursive>
  408d98:	e7ec      	b.n	408d74 <_fclose_r+0x7c>
  408d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408d9c:	f7ff f892 	bl	407ec4 <__retarget_lock_acquire_recursive>
  408da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408da4:	2b00      	cmp	r3, #0
  408da6:	d1bb      	bne.n	408d20 <_fclose_r+0x28>
  408da8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408daa:	f016 0601 	ands.w	r6, r6, #1
  408dae:	d1b1      	bne.n	408d14 <_fclose_r+0x1c>
  408db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408db2:	f7ff f889 	bl	407ec8 <__retarget_lock_release_recursive>
  408db6:	4630      	mov	r0, r6
  408db8:	bd70      	pop	{r4, r5, r6, pc}
  408dba:	bf00      	nop

00408dbc <__fputwc>:
  408dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408dc0:	b082      	sub	sp, #8
  408dc2:	4680      	mov	r8, r0
  408dc4:	4689      	mov	r9, r1
  408dc6:	4614      	mov	r4, r2
  408dc8:	f000 f8a2 	bl	408f10 <__locale_mb_cur_max>
  408dcc:	2801      	cmp	r0, #1
  408dce:	d036      	beq.n	408e3e <__fputwc+0x82>
  408dd0:	464a      	mov	r2, r9
  408dd2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408dd6:	a901      	add	r1, sp, #4
  408dd8:	4640      	mov	r0, r8
  408dda:	f000 f941 	bl	409060 <_wcrtomb_r>
  408dde:	1c42      	adds	r2, r0, #1
  408de0:	4606      	mov	r6, r0
  408de2:	d025      	beq.n	408e30 <__fputwc+0x74>
  408de4:	b3a8      	cbz	r0, 408e52 <__fputwc+0x96>
  408de6:	f89d e004 	ldrb.w	lr, [sp, #4]
  408dea:	2500      	movs	r5, #0
  408dec:	f10d 0a04 	add.w	sl, sp, #4
  408df0:	e009      	b.n	408e06 <__fputwc+0x4a>
  408df2:	6823      	ldr	r3, [r4, #0]
  408df4:	1c5a      	adds	r2, r3, #1
  408df6:	6022      	str	r2, [r4, #0]
  408df8:	f883 e000 	strb.w	lr, [r3]
  408dfc:	3501      	adds	r5, #1
  408dfe:	42b5      	cmp	r5, r6
  408e00:	d227      	bcs.n	408e52 <__fputwc+0x96>
  408e02:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408e06:	68a3      	ldr	r3, [r4, #8]
  408e08:	3b01      	subs	r3, #1
  408e0a:	2b00      	cmp	r3, #0
  408e0c:	60a3      	str	r3, [r4, #8]
  408e0e:	daf0      	bge.n	408df2 <__fputwc+0x36>
  408e10:	69a7      	ldr	r7, [r4, #24]
  408e12:	42bb      	cmp	r3, r7
  408e14:	4671      	mov	r1, lr
  408e16:	4622      	mov	r2, r4
  408e18:	4640      	mov	r0, r8
  408e1a:	db02      	blt.n	408e22 <__fputwc+0x66>
  408e1c:	f1be 0f0a 	cmp.w	lr, #10
  408e20:	d1e7      	bne.n	408df2 <__fputwc+0x36>
  408e22:	f000 f8c5 	bl	408fb0 <__swbuf_r>
  408e26:	1c43      	adds	r3, r0, #1
  408e28:	d1e8      	bne.n	408dfc <__fputwc+0x40>
  408e2a:	b002      	add	sp, #8
  408e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e30:	89a3      	ldrh	r3, [r4, #12]
  408e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e36:	81a3      	strh	r3, [r4, #12]
  408e38:	b002      	add	sp, #8
  408e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e3e:	f109 33ff 	add.w	r3, r9, #4294967295
  408e42:	2bfe      	cmp	r3, #254	; 0xfe
  408e44:	d8c4      	bhi.n	408dd0 <__fputwc+0x14>
  408e46:	fa5f fe89 	uxtb.w	lr, r9
  408e4a:	4606      	mov	r6, r0
  408e4c:	f88d e004 	strb.w	lr, [sp, #4]
  408e50:	e7cb      	b.n	408dea <__fputwc+0x2e>
  408e52:	4648      	mov	r0, r9
  408e54:	b002      	add	sp, #8
  408e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e5a:	bf00      	nop

00408e5c <_fputwc_r>:
  408e5c:	b530      	push	{r4, r5, lr}
  408e5e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408e60:	f013 0f01 	tst.w	r3, #1
  408e64:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408e68:	4614      	mov	r4, r2
  408e6a:	b083      	sub	sp, #12
  408e6c:	4605      	mov	r5, r0
  408e6e:	b29a      	uxth	r2, r3
  408e70:	d101      	bne.n	408e76 <_fputwc_r+0x1a>
  408e72:	0590      	lsls	r0, r2, #22
  408e74:	d51c      	bpl.n	408eb0 <_fputwc_r+0x54>
  408e76:	0490      	lsls	r0, r2, #18
  408e78:	d406      	bmi.n	408e88 <_fputwc_r+0x2c>
  408e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408e7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408e84:	81a3      	strh	r3, [r4, #12]
  408e86:	6662      	str	r2, [r4, #100]	; 0x64
  408e88:	4628      	mov	r0, r5
  408e8a:	4622      	mov	r2, r4
  408e8c:	f7ff ff96 	bl	408dbc <__fputwc>
  408e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408e92:	07da      	lsls	r2, r3, #31
  408e94:	4605      	mov	r5, r0
  408e96:	d402      	bmi.n	408e9e <_fputwc_r+0x42>
  408e98:	89a3      	ldrh	r3, [r4, #12]
  408e9a:	059b      	lsls	r3, r3, #22
  408e9c:	d502      	bpl.n	408ea4 <_fputwc_r+0x48>
  408e9e:	4628      	mov	r0, r5
  408ea0:	b003      	add	sp, #12
  408ea2:	bd30      	pop	{r4, r5, pc}
  408ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408ea6:	f7ff f80f 	bl	407ec8 <__retarget_lock_release_recursive>
  408eaa:	4628      	mov	r0, r5
  408eac:	b003      	add	sp, #12
  408eae:	bd30      	pop	{r4, r5, pc}
  408eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408eb2:	9101      	str	r1, [sp, #4]
  408eb4:	f7ff f806 	bl	407ec4 <__retarget_lock_acquire_recursive>
  408eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ebc:	9901      	ldr	r1, [sp, #4]
  408ebe:	b29a      	uxth	r2, r3
  408ec0:	e7d9      	b.n	408e76 <_fputwc_r+0x1a>
  408ec2:	bf00      	nop

00408ec4 <_fstat_r>:
  408ec4:	b538      	push	{r3, r4, r5, lr}
  408ec6:	460b      	mov	r3, r1
  408ec8:	4c07      	ldr	r4, [pc, #28]	; (408ee8 <_fstat_r+0x24>)
  408eca:	4605      	mov	r5, r0
  408ecc:	4611      	mov	r1, r2
  408ece:	4618      	mov	r0, r3
  408ed0:	2300      	movs	r3, #0
  408ed2:	6023      	str	r3, [r4, #0]
  408ed4:	f7f8 faab 	bl	40142e <_fstat>
  408ed8:	1c43      	adds	r3, r0, #1
  408eda:	d000      	beq.n	408ede <_fstat_r+0x1a>
  408edc:	bd38      	pop	{r3, r4, r5, pc}
  408ede:	6823      	ldr	r3, [r4, #0]
  408ee0:	2b00      	cmp	r3, #0
  408ee2:	d0fb      	beq.n	408edc <_fstat_r+0x18>
  408ee4:	602b      	str	r3, [r5, #0]
  408ee6:	bd38      	pop	{r3, r4, r5, pc}
  408ee8:	20400e50 	.word	0x20400e50

00408eec <_isatty_r>:
  408eec:	b538      	push	{r3, r4, r5, lr}
  408eee:	4c07      	ldr	r4, [pc, #28]	; (408f0c <_isatty_r+0x20>)
  408ef0:	2300      	movs	r3, #0
  408ef2:	4605      	mov	r5, r0
  408ef4:	4608      	mov	r0, r1
  408ef6:	6023      	str	r3, [r4, #0]
  408ef8:	f7f8 fa9e 	bl	401438 <_isatty>
  408efc:	1c43      	adds	r3, r0, #1
  408efe:	d000      	beq.n	408f02 <_isatty_r+0x16>
  408f00:	bd38      	pop	{r3, r4, r5, pc}
  408f02:	6823      	ldr	r3, [r4, #0]
  408f04:	2b00      	cmp	r3, #0
  408f06:	d0fb      	beq.n	408f00 <_isatty_r+0x14>
  408f08:	602b      	str	r3, [r5, #0]
  408f0a:	bd38      	pop	{r3, r4, r5, pc}
  408f0c:	20400e50 	.word	0x20400e50

00408f10 <__locale_mb_cur_max>:
  408f10:	4b04      	ldr	r3, [pc, #16]	; (408f24 <__locale_mb_cur_max+0x14>)
  408f12:	4a05      	ldr	r2, [pc, #20]	; (408f28 <__locale_mb_cur_max+0x18>)
  408f14:	681b      	ldr	r3, [r3, #0]
  408f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408f18:	2b00      	cmp	r3, #0
  408f1a:	bf08      	it	eq
  408f1c:	4613      	moveq	r3, r2
  408f1e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408f22:	4770      	bx	lr
  408f24:	20400014 	.word	0x20400014
  408f28:	20400854 	.word	0x20400854

00408f2c <_lseek_r>:
  408f2c:	b570      	push	{r4, r5, r6, lr}
  408f2e:	460d      	mov	r5, r1
  408f30:	4c08      	ldr	r4, [pc, #32]	; (408f54 <_lseek_r+0x28>)
  408f32:	4611      	mov	r1, r2
  408f34:	4606      	mov	r6, r0
  408f36:	461a      	mov	r2, r3
  408f38:	4628      	mov	r0, r5
  408f3a:	2300      	movs	r3, #0
  408f3c:	6023      	str	r3, [r4, #0]
  408f3e:	f7f8 fa7d 	bl	40143c <_lseek>
  408f42:	1c43      	adds	r3, r0, #1
  408f44:	d000      	beq.n	408f48 <_lseek_r+0x1c>
  408f46:	bd70      	pop	{r4, r5, r6, pc}
  408f48:	6823      	ldr	r3, [r4, #0]
  408f4a:	2b00      	cmp	r3, #0
  408f4c:	d0fb      	beq.n	408f46 <_lseek_r+0x1a>
  408f4e:	6033      	str	r3, [r6, #0]
  408f50:	bd70      	pop	{r4, r5, r6, pc}
  408f52:	bf00      	nop
  408f54:	20400e50 	.word	0x20400e50

00408f58 <__ascii_mbtowc>:
  408f58:	b082      	sub	sp, #8
  408f5a:	b149      	cbz	r1, 408f70 <__ascii_mbtowc+0x18>
  408f5c:	b15a      	cbz	r2, 408f76 <__ascii_mbtowc+0x1e>
  408f5e:	b16b      	cbz	r3, 408f7c <__ascii_mbtowc+0x24>
  408f60:	7813      	ldrb	r3, [r2, #0]
  408f62:	600b      	str	r3, [r1, #0]
  408f64:	7812      	ldrb	r2, [r2, #0]
  408f66:	1c10      	adds	r0, r2, #0
  408f68:	bf18      	it	ne
  408f6a:	2001      	movne	r0, #1
  408f6c:	b002      	add	sp, #8
  408f6e:	4770      	bx	lr
  408f70:	a901      	add	r1, sp, #4
  408f72:	2a00      	cmp	r2, #0
  408f74:	d1f3      	bne.n	408f5e <__ascii_mbtowc+0x6>
  408f76:	4610      	mov	r0, r2
  408f78:	b002      	add	sp, #8
  408f7a:	4770      	bx	lr
  408f7c:	f06f 0001 	mvn.w	r0, #1
  408f80:	e7f4      	b.n	408f6c <__ascii_mbtowc+0x14>
  408f82:	bf00      	nop

00408f84 <_read_r>:
  408f84:	b570      	push	{r4, r5, r6, lr}
  408f86:	460d      	mov	r5, r1
  408f88:	4c08      	ldr	r4, [pc, #32]	; (408fac <_read_r+0x28>)
  408f8a:	4611      	mov	r1, r2
  408f8c:	4606      	mov	r6, r0
  408f8e:	461a      	mov	r2, r3
  408f90:	4628      	mov	r0, r5
  408f92:	2300      	movs	r3, #0
  408f94:	6023      	str	r3, [r4, #0]
  408f96:	f7f7 fd0f 	bl	4009b8 <_read>
  408f9a:	1c43      	adds	r3, r0, #1
  408f9c:	d000      	beq.n	408fa0 <_read_r+0x1c>
  408f9e:	bd70      	pop	{r4, r5, r6, pc}
  408fa0:	6823      	ldr	r3, [r4, #0]
  408fa2:	2b00      	cmp	r3, #0
  408fa4:	d0fb      	beq.n	408f9e <_read_r+0x1a>
  408fa6:	6033      	str	r3, [r6, #0]
  408fa8:	bd70      	pop	{r4, r5, r6, pc}
  408faa:	bf00      	nop
  408fac:	20400e50 	.word	0x20400e50

00408fb0 <__swbuf_r>:
  408fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408fb2:	460d      	mov	r5, r1
  408fb4:	4614      	mov	r4, r2
  408fb6:	4606      	mov	r6, r0
  408fb8:	b110      	cbz	r0, 408fc0 <__swbuf_r+0x10>
  408fba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408fbc:	2b00      	cmp	r3, #0
  408fbe:	d04b      	beq.n	409058 <__swbuf_r+0xa8>
  408fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408fc4:	69a3      	ldr	r3, [r4, #24]
  408fc6:	60a3      	str	r3, [r4, #8]
  408fc8:	b291      	uxth	r1, r2
  408fca:	0708      	lsls	r0, r1, #28
  408fcc:	d539      	bpl.n	409042 <__swbuf_r+0x92>
  408fce:	6923      	ldr	r3, [r4, #16]
  408fd0:	2b00      	cmp	r3, #0
  408fd2:	d036      	beq.n	409042 <__swbuf_r+0x92>
  408fd4:	b2ed      	uxtb	r5, r5
  408fd6:	0489      	lsls	r1, r1, #18
  408fd8:	462f      	mov	r7, r5
  408fda:	d515      	bpl.n	409008 <__swbuf_r+0x58>
  408fdc:	6822      	ldr	r2, [r4, #0]
  408fde:	6961      	ldr	r1, [r4, #20]
  408fe0:	1ad3      	subs	r3, r2, r3
  408fe2:	428b      	cmp	r3, r1
  408fe4:	da1c      	bge.n	409020 <__swbuf_r+0x70>
  408fe6:	3301      	adds	r3, #1
  408fe8:	68a1      	ldr	r1, [r4, #8]
  408fea:	1c50      	adds	r0, r2, #1
  408fec:	3901      	subs	r1, #1
  408fee:	60a1      	str	r1, [r4, #8]
  408ff0:	6020      	str	r0, [r4, #0]
  408ff2:	7015      	strb	r5, [r2, #0]
  408ff4:	6962      	ldr	r2, [r4, #20]
  408ff6:	429a      	cmp	r2, r3
  408ff8:	d01a      	beq.n	409030 <__swbuf_r+0x80>
  408ffa:	89a3      	ldrh	r3, [r4, #12]
  408ffc:	07db      	lsls	r3, r3, #31
  408ffe:	d501      	bpl.n	409004 <__swbuf_r+0x54>
  409000:	2d0a      	cmp	r5, #10
  409002:	d015      	beq.n	409030 <__swbuf_r+0x80>
  409004:	4638      	mov	r0, r7
  409006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409008:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40900a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40900e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409012:	81a2      	strh	r2, [r4, #12]
  409014:	6822      	ldr	r2, [r4, #0]
  409016:	6661      	str	r1, [r4, #100]	; 0x64
  409018:	6961      	ldr	r1, [r4, #20]
  40901a:	1ad3      	subs	r3, r2, r3
  40901c:	428b      	cmp	r3, r1
  40901e:	dbe2      	blt.n	408fe6 <__swbuf_r+0x36>
  409020:	4621      	mov	r1, r4
  409022:	4630      	mov	r0, r6
  409024:	f7fe fbba 	bl	40779c <_fflush_r>
  409028:	b940      	cbnz	r0, 40903c <__swbuf_r+0x8c>
  40902a:	6822      	ldr	r2, [r4, #0]
  40902c:	2301      	movs	r3, #1
  40902e:	e7db      	b.n	408fe8 <__swbuf_r+0x38>
  409030:	4621      	mov	r1, r4
  409032:	4630      	mov	r0, r6
  409034:	f7fe fbb2 	bl	40779c <_fflush_r>
  409038:	2800      	cmp	r0, #0
  40903a:	d0e3      	beq.n	409004 <__swbuf_r+0x54>
  40903c:	f04f 37ff 	mov.w	r7, #4294967295
  409040:	e7e0      	b.n	409004 <__swbuf_r+0x54>
  409042:	4621      	mov	r1, r4
  409044:	4630      	mov	r0, r6
  409046:	f7fd fad7 	bl	4065f8 <__swsetup_r>
  40904a:	2800      	cmp	r0, #0
  40904c:	d1f6      	bne.n	40903c <__swbuf_r+0x8c>
  40904e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409052:	6923      	ldr	r3, [r4, #16]
  409054:	b291      	uxth	r1, r2
  409056:	e7bd      	b.n	408fd4 <__swbuf_r+0x24>
  409058:	f7fe fbf8 	bl	40784c <__sinit>
  40905c:	e7b0      	b.n	408fc0 <__swbuf_r+0x10>
  40905e:	bf00      	nop

00409060 <_wcrtomb_r>:
  409060:	b5f0      	push	{r4, r5, r6, r7, lr}
  409062:	4606      	mov	r6, r0
  409064:	b085      	sub	sp, #20
  409066:	461f      	mov	r7, r3
  409068:	b189      	cbz	r1, 40908e <_wcrtomb_r+0x2e>
  40906a:	4c10      	ldr	r4, [pc, #64]	; (4090ac <_wcrtomb_r+0x4c>)
  40906c:	4d10      	ldr	r5, [pc, #64]	; (4090b0 <_wcrtomb_r+0x50>)
  40906e:	6824      	ldr	r4, [r4, #0]
  409070:	6b64      	ldr	r4, [r4, #52]	; 0x34
  409072:	2c00      	cmp	r4, #0
  409074:	bf08      	it	eq
  409076:	462c      	moveq	r4, r5
  409078:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40907c:	47a0      	blx	r4
  40907e:	1c43      	adds	r3, r0, #1
  409080:	d103      	bne.n	40908a <_wcrtomb_r+0x2a>
  409082:	2200      	movs	r2, #0
  409084:	238a      	movs	r3, #138	; 0x8a
  409086:	603a      	str	r2, [r7, #0]
  409088:	6033      	str	r3, [r6, #0]
  40908a:	b005      	add	sp, #20
  40908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40908e:	460c      	mov	r4, r1
  409090:	4906      	ldr	r1, [pc, #24]	; (4090ac <_wcrtomb_r+0x4c>)
  409092:	4a07      	ldr	r2, [pc, #28]	; (4090b0 <_wcrtomb_r+0x50>)
  409094:	6809      	ldr	r1, [r1, #0]
  409096:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409098:	2900      	cmp	r1, #0
  40909a:	bf08      	it	eq
  40909c:	4611      	moveq	r1, r2
  40909e:	4622      	mov	r2, r4
  4090a0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4090a4:	a901      	add	r1, sp, #4
  4090a6:	47a0      	blx	r4
  4090a8:	e7e9      	b.n	40907e <_wcrtomb_r+0x1e>
  4090aa:	bf00      	nop
  4090ac:	20400014 	.word	0x20400014
  4090b0:	20400854 	.word	0x20400854

004090b4 <__ascii_wctomb>:
  4090b4:	b121      	cbz	r1, 4090c0 <__ascii_wctomb+0xc>
  4090b6:	2aff      	cmp	r2, #255	; 0xff
  4090b8:	d804      	bhi.n	4090c4 <__ascii_wctomb+0x10>
  4090ba:	700a      	strb	r2, [r1, #0]
  4090bc:	2001      	movs	r0, #1
  4090be:	4770      	bx	lr
  4090c0:	4608      	mov	r0, r1
  4090c2:	4770      	bx	lr
  4090c4:	238a      	movs	r3, #138	; 0x8a
  4090c6:	6003      	str	r3, [r0, #0]
  4090c8:	f04f 30ff 	mov.w	r0, #4294967295
  4090cc:	4770      	bx	lr
  4090ce:	bf00      	nop

004090d0 <__aeabi_dcmpun>:
  4090d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4090d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4090d8:	d102      	bne.n	4090e0 <__aeabi_dcmpun+0x10>
  4090da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4090de:	d10a      	bne.n	4090f6 <__aeabi_dcmpun+0x26>
  4090e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4090e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4090e8:	d102      	bne.n	4090f0 <__aeabi_dcmpun+0x20>
  4090ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4090ee:	d102      	bne.n	4090f6 <__aeabi_dcmpun+0x26>
  4090f0:	f04f 0000 	mov.w	r0, #0
  4090f4:	4770      	bx	lr
  4090f6:	f04f 0001 	mov.w	r0, #1
  4090fa:	4770      	bx	lr

004090fc <__aeabi_d2iz>:
  4090fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409104:	d215      	bcs.n	409132 <__aeabi_d2iz+0x36>
  409106:	d511      	bpl.n	40912c <__aeabi_d2iz+0x30>
  409108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40910c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409110:	d912      	bls.n	409138 <__aeabi_d2iz+0x3c>
  409112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40911a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40911e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409122:	fa23 f002 	lsr.w	r0, r3, r2
  409126:	bf18      	it	ne
  409128:	4240      	negne	r0, r0
  40912a:	4770      	bx	lr
  40912c:	f04f 0000 	mov.w	r0, #0
  409130:	4770      	bx	lr
  409132:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409136:	d105      	bne.n	409144 <__aeabi_d2iz+0x48>
  409138:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40913c:	bf08      	it	eq
  40913e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409142:	4770      	bx	lr
  409144:	f04f 0000 	mov.w	r0, #0
  409148:	4770      	bx	lr
  40914a:	bf00      	nop
  40914c:	454c4449 	.word	0x454c4449
  409150:	00000000 	.word	0x00000000
  409154:	51726d54 	.word	0x51726d54
  409158:	00000000 	.word	0x00000000
  40915c:	20726d54 	.word	0x20726d54
  409160:	00637653 	.word	0x00637653
  409164:	686c6166 	.word	0x686c6166
  409168:	6d652061 	.word	0x6d652061
  40916c:	69726320 	.word	0x69726320
  409170:	6f207261 	.word	0x6f207261
  409174:	6d657320 	.word	0x6d657320
  409178:	726f6661 	.word	0x726f6661
  40917c:	7462206f 	.word	0x7462206f
  409180:	0000206e 	.word	0x0000206e
  409184:	686c6166 	.word	0x686c6166
  409188:	6d652061 	.word	0x6d652061
  40918c:	69726320 	.word	0x69726320
  409190:	61207261 	.word	0x61207261
  409194:	65757120 	.word	0x65757120
  409198:	78206575 	.word	0x78206575
  40919c:	75657551 	.word	0x75657551
  4091a0:	6f725065 	.word	0x6f725065
  4091a4:	00002063 	.word	0x00002063
  4091a8:	75626564 	.word	0x75626564
  4091ac:	00000067 	.word	0x00000067
  4091b0:	6c696146 	.word	0x6c696146
  4091b4:	74206465 	.word	0x74206465
  4091b8:	7263206f 	.word	0x7263206f
  4091bc:	65746165 	.word	0x65746165
  4091c0:	62656420 	.word	0x62656420
  4091c4:	74206775 	.word	0x74206775
  4091c8:	0d6b7361 	.word	0x0d6b7361
  4091cc:	00000000 	.word	0x00000000
  4091d0:	6e696f63 	.word	0x6e696f63
  4091d4:	00000073 	.word	0x00000073
  4091d8:	6c696146 	.word	0x6c696146
  4091dc:	74206465 	.word	0x74206465
  4091e0:	7263206f 	.word	0x7263206f
  4091e4:	65746165 	.word	0x65746165
  4091e8:	696f6320 	.word	0x696f6320
  4091ec:	7420736e 	.word	0x7420736e
  4091f0:	0d6b7361 	.word	0x0d6b7361
  4091f4:	00000000 	.word	0x00000000
  4091f8:	79616c70 	.word	0x79616c70
  4091fc:	00000000 	.word	0x00000000
  409200:	6c696146 	.word	0x6c696146
  409204:	74206465 	.word	0x74206465
  409208:	7263206f 	.word	0x7263206f
  40920c:	65746165 	.word	0x65746165
  409210:	616c7020 	.word	0x616c7020
  409214:	61742079 	.word	0x61742079
  409218:	000d6b73 	.word	0x000d6b73
  40921c:	64656553 	.word	0x64656553
  409220:	6425203a 	.word	0x6425203a
  409224:	0000000a 	.word	0x0000000a
  409228:	6e696f43 	.word	0x6e696f43
  40922c:	25203a73 	.word	0x25203a73
  409230:	00000a64 	.word	0x00000a64
  409234:	63617473 	.word	0x63617473
  409238:	766f206b 	.word	0x766f206b
  40923c:	6c667265 	.word	0x6c667265
  409240:	2520776f 	.word	0x2520776f
  409244:	73252078 	.word	0x73252078
  409248:	00000a0d 	.word	0x00000a0d

0040924c <_global_impure_ptr>:
  40924c:	20400018 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40925c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40926c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40927c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40928c:	0000296c 00000030                       l)..0...

00409294 <blanks.7238>:
  409294:	20202020 20202020 20202020 20202020                     

004092a4 <zeroes.7239>:
  4092a4:	30303030 30303030 30303030 30303030     0000000000000000
  4092b4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4092c4:	00000000                                ....

004092c8 <__mprec_bigtens>:
  4092c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4092d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4092e8:	7f73bf3c 75154fdd                       <.s..O.u

004092f0 <__mprec_tens>:
  4092f0:	00000000 3ff00000 00000000 40240000     .......?......$@
  409300:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409310:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409320:	00000000 412e8480 00000000 416312d0     .......A......cA
  409330:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409340:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409350:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409360:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409370:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409380:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409390:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4093a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4093b0:	79d99db4 44ea7843                       ...yCx.D

004093b8 <p05.6055>:
  4093b8:	00000005 00000019 0000007d 00000043     ........}...C...
  4093c8:	49534f50 00000058 0000002e              POSIX.......

004093d4 <_ctype_>:
  4093d4:	20202000 20202020 28282020 20282828     .         ((((( 
  4093e4:	20202020 20202020 20202020 20202020                     
  4093f4:	10108820 10101010 10101010 10101010      ...............
  409404:	04040410 04040404 10040404 10101010     ................
  409414:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409424:	01010101 01010101 01010101 10101010     ................
  409434:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409444:	02020202 02020202 02020202 10101010     ................
  409454:	00000020 00000000 00000000 00000000      ...............
	...

004094d8 <_init>:
  4094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094da:	bf00      	nop
  4094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094de:	bc08      	pop	{r3}
  4094e0:	469e      	mov	lr, r3
  4094e2:	4770      	bx	lr

004094e4 <__init_array_start>:
  4094e4:	004066c1 	.word	0x004066c1

004094e8 <__frame_dummy_init_array_entry>:
  4094e8:	00400165                                e.@.

004094ec <_fini>:
  4094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094ee:	bf00      	nop
  4094f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094f2:	bc08      	pop	{r3}
  4094f4:	469e      	mov	lr, r3
  4094f6:	4770      	bx	lr

004094f8 <__fini_array_start>:
  4094f8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0e2c 2040                                   ,.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	90b5 0040 8f59 0040 0000 0000 93d4 0040     ..@.Y.@.......@.
20400944:	93d0 0040 91cc 0040 91cc 0040 91cc 0040     ..@...@...@...@.
20400954:	91cc 0040 91cc 0040 91cc 0040 91cc 0040     ..@...@...@...@.
20400964:	91cc 0040 91cc 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
